<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Certbot申请免费SSL证书</title>
    <url>/2020/03/26/162445.html</url>
    <content><![CDATA[<blockquote>
<p>Certbot 是 Let’s Encrypt 官方推荐的获取证书的客户端，可以帮我们获取免费的 Let’s Encrypt 证书</p>
</blockquote>
<span id="more"></span>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 certbot</span></span><br><span class="line">[root@ckx conf.d]<span class="comment"># yum install certbot python2-certbot-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入命令</span></span><br><span class="line">[root@ckx conf.d]<span class="comment"># certbot --nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示输入接收紧急更新和安全提示的邮箱</span></span><br><span class="line">Saving debug <span class="built_in">log</span> to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator nginx, Installer nginx</span><br><span class="line">Enter email address (used <span class="keyword">for</span> urgent renewal and security notices) (Enter <span class="string">&#x27;c&#x27;</span> to</span><br><span class="line">cancel): chenkaixin12121@163.com</span><br><span class="line">Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否同意该协议</span></span><br><span class="line">Please <span class="built_in">read</span> the Terms of Service at</span><br><span class="line">https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must</span><br><span class="line">agree <span class="keyword">in</span> order to register with the ACME server at</span><br><span class="line">https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(A)gree/(C)ancel: a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否接受广告</span></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Would you be willing to share your email address with the Electronic Frontier</span><br><span class="line">Foundation, a founding partner of the Let<span class="string">&#x27;s Encrypt project and the non-profit</span></span><br><span class="line"><span class="string">organization that develops Certbot? We&#x27;</span>d like to send you email about our work</span><br><span class="line">encrypting the web, EFF news, campaigns, and ways to support digital freedom.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es/(N)o: n</span><br><span class="line">Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以输入数字选择要安装的域名的证书，或者回车全部安装</span></span><br><span class="line">Which names would you like to activate HTTPS <span class="keyword">for</span>?</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">1: ckx.ink</span><br><span class="line">2: blog.ckx.ink</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Select the appropriate numbers separated by commas and/or spaces, or leave input</span><br><span class="line">blank to select all options shown (Enter <span class="string">&#x27;c&#x27;</span> to cancel): </span><br><span class="line">Obtaining a new certificate</span><br><span class="line">Deploying Certificate to VirtualHost /etc/nginx/conf.d/ckx.ink.conf</span><br><span class="line">Deploying Certificate to VirtualHost /etc/nginx/conf.d/blog.ckx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否重定向到 https</span></span><br><span class="line">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class="line">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this <span class="keyword">for</span></span><br><span class="line">new sites, or <span class="keyword">if</span> you<span class="string">&#x27;re confident your site works on HTTPS. You can undo this</span></span><br><span class="line"><span class="string">change by editing your web server&#x27;</span>s configuration.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Select the appropriate number [1-2] <span class="keyword">then</span> [enter] (press <span class="string">&#x27;c&#x27;</span> to cancel): 2</span><br><span class="line">Redirecting all traffic on port 80 to ssl <span class="keyword">in</span> /etc/nginx/conf.d/ckx.ink.conf</span><br><span class="line">Redirecting all traffic on port 80 to ssl <span class="keyword">in</span> /etc/nginx/conf.d/blog.ckx.conf</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装成功</span></span><br><span class="line">Congratulations! You have successfully enabled https://ckx.ink and</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">You should <span class="built_in">test</span> your configuration at:</span><br><span class="line">https://www.ssllabs.com/ssltest/analyze.html?d=ckx.ink</span><br><span class="line">https://www.ssllabs.com/ssltest/analyze.html?d=blog.ckx.ink</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">   /etc/letsencrypt/live/ckx.ink/fullchain.pem</span><br><span class="line">   Your key file has been saved at:</span><br><span class="line">   /etc/letsencrypt/live/ckx.ink/privkey.pem</span><br><span class="line">   Your cert will expire on 2020-08-14. To obtain a new or tweaked</span><br><span class="line">   version of this certificate <span class="keyword">in</span> the future, simply run certbot again</span><br><span class="line">   with the <span class="string">&quot;certonly&quot;</span> option. To non-interactively renew *all* of</span><br><span class="line">   your certificates, run <span class="string">&quot;certbot renew&quot;</span></span><br><span class="line"> - If you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating to ISRG / Let<span class="string">&#x27;s Encrypt:   https://letsencrypt.org/donate</span></span><br><span class="line"><span class="string">   Donating to EFF:                    https://eff.org/donate-le</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测 nginx 是否配置正确</span></span><br><span class="line">[root@ckx conf.d]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"><span class="comment"># 重新加载 nginx</span></span><br><span class="line">[root@ckx conf.d]<span class="comment"># systemctl reload nginx</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先检查一波，查看命令是否可以执行成功</span></span><br><span class="line">[root@ckx conf.d]<span class="comment"># /usr/bin/certbot renew --disable-hook-validation --renew-hook &quot;/usr/sbin/nginx -s reload&quot;</span></span><br><span class="line">Saving debug <span class="built_in">log</span> to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Processing /etc/letsencrypt/renewal/ckx.ink.conf</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">OCSP check failed <span class="keyword">for</span> /etc/letsencrypt/archive/ckx.ink/cert1.pem (are we offline?)</span><br><span class="line"><span class="comment"># 提示证书尚未到期</span></span><br><span class="line">Cert not yet due <span class="keyword">for</span> renewal</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">The following certs are not due <span class="keyword">for</span> renewal yet:</span><br><span class="line">  /etc/letsencrypt/live/ckx.ink/fullchain.pem expires on 2020-06-14 (skipped)</span><br><span class="line">No renewals were attempted.</span><br><span class="line">No hooks were run.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure>

<h4 id="定时刷新"><a href="#定时刷新" class="headerlink" title="定时刷新"></a>定时刷新</h4><p>Let’s Encrypt 免费 SSL 证书只有三个月有效期，但是可以重新申请，我们可以使用它提供的续订命令配合定时任务，实现自动续订</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置定时任务</span></span><br><span class="line">[root@ckx conf.d]<span class="comment"># crontab -e</span></span><br><span class="line">0 3 * * * /usr/bin/certbot renew --disable-hook-validation --renew-hook <span class="string">&quot;/usr/sbin/nginx -s reload&quot;</span></span><br><span class="line"><span class="comment"># 检查定时任务</span></span><br><span class="line">[root@ckx conf.d]<span class="comment"># crontab -l</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>AlibabaCloudToolkit使用</title>
    <url>/2020/03/29/191805.html</url>
    <content><![CDATA[<blockquote>
<p>Cloud Toolkit 是阿里云针对 IDE 平台为开发者提供的一款插件，用于帮助开发者高效开发并部署适合在云端运行的应用，<br>本文介绍的是在 IDEA 中使用 Cloud ToolKit 插件部署 Spring Boot 项目到服务器</p>
</blockquote>
<span id="more"></span>

<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p><img data-src="/../../../../upload/2020/09/idea-cloud-toolkit-1-0113d7e8375c4984bada6bf4db1b6b10.png" alt="image.png"></p>
<h4 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h4><p><img data-src="/../../../../upload/2020/09/idea-cloud-toolkit-2-8bed78dbc034461ea106017ae157589b.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2020/09/idea-cloud-toolkit-3-1cbc8778b18d47689e81d0f5bb924b55.png" alt="image.png"></p>
<h4 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h4><p><img data-src="/../../../../upload/2020/09/idea-cloud-toolkit-4-b03082eff1c340a1b56ced71fccf8a5a.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2020/09/idea-cloud-toolkit-5.png-4d731a4f780344ed89937cf93af6db7d.png" alt="image.png"></p>
<blockquote>
<p>脚本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">path=/usr/local/software/web/xieZhongCrm</span><br><span class="line"></span><br><span class="line">pid=`ps -ef | grep xieZhongCrmAPI-1.0-SNAPSHOT.jar | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;kill <span class="variable">$pid</span>&quot;</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;sleep 3s&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;sleep 2s&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;sleep 1s&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cd <span class="variable">$path</span>&quot;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$path</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rm -rf logs/&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -rf logs/</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nohup java -jar xieZhongCrmAPI-1.0-SNAPSHOT.jar&quot;</span></span><br><span class="line"><span class="built_in">nohup</span> java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=5005 -jar xieZhongCrmAPI-1.0-SNAPSHOT.jar 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img data-src="/../../../../upload/2020/09/idea-cloud-toolkit-6-4550c62a298b4f938cbc961da7c524cd.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2020/09/idea-cloud-toolkit-8-58fc2ad23ade46b99f2f9aae3e0cdb48.png" alt="image.png"></p>
<h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p>启动脚本时报错 bad interpreter : No such file or directory，使用 vim 打开，输入 :set ff 提示 fileformat&#x3D;dos</p>
<p>原因：文件是在 windows 环境创建后放到 linux 的，所以导致文件格式错误</p>
<p>解决方案：vim 使用命令 :set ff&#x3D;unix 即可</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用插件</title>
    <url>/2020/03/31/222258.html</url>
    <content><![CDATA[<blockquote>
<p>IDEA 常用插件</p>
</blockquote>
<span id="more"></span>

<h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><p>提供 @Data，@builder，@ToString，@NoArgsConstructor 等相关注解，可以很大程序上减少代码维护的负担</p>
<p><img data-src="/../../../../upload/2020/09/image-12a64402b93b441d98c048f213b068ae.png" alt="image.png"></p>
<h4 id="Save-Actions"><a href="#Save-Actions" class="headerlink" title="Save Actions"></a>Save Actions</h4><p>可以自动保存代码，并且在保存的时候做一些额外的操作</p>
<p><img data-src="/../../../../upload/2020/09/image-c05c0aaeb25549dd86c06ebb0dff49f3.png" alt="image.png"></p>
<h4 id="Material-Theme-UI"><a href="#Material-Theme-UI" class="headerlink" title="Material Theme UI"></a>Material Theme UI</h4><p>超级多的主题样式</p>
<p><img data-src="/../../../../upload/2020/09/image-27c214a5e6504526801c5ad91105b680.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2020/09/image-b8b9f44feac64a84959469ec987dc49a.png" alt="image.png"></p>
<h4 id="Alibaba-Cloud-Toolkit"><a href="#Alibaba-Cloud-Toolkit" class="headerlink" title="Alibaba Cloud Toolkit"></a>Alibaba Cloud Toolkit</h4><p>高效开发并部署适合在云端运行的应用</p>
<p><img data-src="/../../../../upload/2020/09/image-8cd39d29412c4b7482d6fc74883a271e.png" alt="image.png"></p>
<h4 id="Free-MyBatis-plugin-MyBatisX"><a href="#Free-MyBatis-plugin-MyBatisX" class="headerlink" title="Free MyBatis plugin MyBatisX"></a><del>Free MyBatis plugin</del> MyBatisX</h4><p>mapper 到 mapper.xml 相互跳转</p>
<p><img data-src="/../../../../upload/2020/09/image-6a167ecf75f1441c926765563451aeab.png" alt="image.png"></p>
<h4 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h4><p>彩虹括号</p>
<p><img data-src="/../../../../upload/2020/09/image-29e87b9c91f04907b7ca1ef1f240586b.png" alt="image.png"></p>
<h4 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a>Grep Console</h4><p>控制台颜色显示</p>
<p><img data-src="/../../../../upload/2020/09/image-c319a9086eea4e4cb382c718aab8b793.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2020/09/image-91c6dcaf7dd1432886e51d0608b84f4a.png" alt="image.png"></p>
<h4 id="CodeGlance-CodeGlance-Pro"><a href="#CodeGlance-CodeGlance-Pro" class="headerlink" title="CodeGlance CodeGlance Pro"></a><del>CodeGlance</del> CodeGlance Pro</h4><p>嵌入一个代码小地图</p>
<p><img data-src="/../../../../upload/2020/09/image-7cc2afd96b4e43ffbac8893ec6801f86.png" alt="image.png"></p>
<h4 id="Maven-Helper"><a href="#Maven-Helper" class="headerlink" title="Maven Helper"></a>Maven Helper</h4><p>依赖分析及排除冲突</p>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-04_09-12-46-003d371646f349e08cf17f86a1e2c597.png" alt="image.png"></p>
<h4 id="HighlightBracketPair"><a href="#HighlightBracketPair" class="headerlink" title="HighlightBracketPair"></a>HighlightBracketPair</h4><p>高亮显示成对的括号</p>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-04_09-19-34-42d8f99354354a1c82af6a70b7ec88c7.png" alt="image.png"></p>
<h4 id="Alibaba-Java-Coding-Guidelines"><a href="#Alibaba-Java-Coding-Guidelines" class="headerlink" title="Alibaba Java Coding Guidelines"></a>Alibaba Java Coding Guidelines</h4><p>代码规范检查，使用 Alibaba Java 开发规约</p>
<h4 id="IDE-Eval-Reset"><a href="#IDE-Eval-Reset" class="headerlink" title="IDE Eval Reset"></a>IDE Eval Reset</h4><p>重置 IDEA 试用时间</p>
<p>Settings -&gt; Plugins -&gt; Manage Plugin Repositories 添加 <a href="https://plugins.zhile.io/">https://plugins.zhile.io</a></p>
<h4 id="CheckStyle-IDEA"><a href="#CheckStyle-IDEA" class="headerlink" title="CheckStyle-IDEA"></a>CheckStyle-IDEA</h4><p>代码规范检查，可以使用自定义代码风格文件<br><a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml">https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml</a></p>
<h4 id="RestfulTool"><a href="#RestfulTool" class="headerlink" title="RestfulTool"></a>RestfulTool</h4><p>搜索 Restful 请求，快捷键 Ctrl + Alt + &#x2F;</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>系统输出重定向到SLF4J</title>
    <url>/2020/05/02/221002.html</url>
    <content><![CDATA[<blockquote>
<p>由于项目所依赖的 jar 包使用 System.out 进行输出日志，对于排查问题并不方便，所以需要将日志重定向<br>  解决方案：<a href="https://projects.lidalia.org.uk/sysout-over-slf4j">https://projects.lidalia.org.uk/sysout-over-slf4j</a></p>
</blockquote>
<span id="more"></span>

<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>uk.org.lidalia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sysout-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SOutRedirectApplicationRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments applicationArguments)</span> &#123;</span><br><span class="line">        SysOutOverSLF4J.sendSystemOutAndErrToSLF4J();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
  </entry>
  <entry>
    <title>Linux环境下安装MySQL</title>
    <url>/2020/05/08/000809.html</url>
    <content><![CDATA[<blockquote>
<p>Linux 环境下安装 MySQL</p>
</blockquote>
<span id="more"></span>

<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 mysql</span></span><br><span class="line">wget https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.20-el7-x86_64.tar.gz</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxvf mysql-8.0.20-el7-x86_64.tar.gz</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> mysql-8.0.20-el7-x86_64 /data/software/mysql</span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /data/software/mysql</span><br></pre></td></tr></table></figure>

<h4 id="创建用户及用户组"><a href="#创建用户及用户组" class="headerlink" title="创建用户及用户组"></a>创建用户及用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>

<h4 id="创建日志及进程文件"><a href="#创建日志及进程文件" class="headerlink" title="创建日志及进程文件"></a>创建日志及进程文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/log/mariadb /var/run/mariadb</span><br><span class="line"><span class="built_in">touch</span> /var/log/mariadb/mariadb.log /var/run/mariadb/mariadb.pid</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /var/log/mariadb /var/run/mariadb</span><br></pre></td></tr></table></figure>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>vim &#x2F;etc&#x2F;my.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line">user=mysql</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">basedir=/data/software/mysql</span><br><span class="line">datadir=/data/software/mysql/data</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mariadb/mariadb.log</span><br><span class="line">pid-file=/var/run/mariadb/mariadb.pid</span><br></pre></td></tr></table></figure>

<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># /data/software/mysql/bin/mysqld --initialize --user=mysql --basedir=/data/software/mysql/ --datadir=/data/software/mysql/data/</span></span><br><span class="line">2020-05-07T15:40:08.278047Z 0 [Warning] [MY-011070] [Server] <span class="string">&#x27;Disabling symbolic links using --skip-symbolic-links (or equivalent) is the default. Consider not using this option as it&#x27;</span> is deprecated and will be removed <span class="keyword">in</span> a future release.</span><br><span class="line">2020-05-07T15:40:08.278154Z 0 [System] [MY-013169] [Server] /data/software/mysql/bin/mysqld (mysqld 8.0.20) initializing of server <span class="keyword">in</span> progress as process 2524</span><br><span class="line">2020-05-07T15:40:08.291519Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">2020-05-07T15:40:08.558052Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">2020-05-0715:40:09.093362Z 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: ToX3&gt;VJQuFrt</span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]<span class="comment"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line">[root@localhost mysql]<span class="comment"># service mysqld start</span></span><br><span class="line">Starting MySQL                                             [  OK  ]</span><br><span class="line">[root@localhost mysql]<span class="comment"># bin/mysql -uroot -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 8</span><br><span class="line">Server version: 8.0.20</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">mysql&gt; alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>; </span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 root 用户可以远程连接</span></span><br><span class="line">mysql&gt; update mysql.user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user = <span class="string">&#x27;root&#x27;</span>; </span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line">mysql&gt; flush privileges; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开放端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="comment"># 重载入</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL配置主从复制</title>
    <url>/2020/05/09/221141.html</url>
    <content><![CDATA[<blockquote>
<p>MySQL 主从复制是指数据可以从一个 MySQL 数据库服务器主节点复制到一个或多个从节点，MySQL 默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据库中的所有数据库或者特定的数据库，或者特定的表</p>
</blockquote>
<span id="more"></span>

<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>192.168.1.104 # master<br>192.168.1.105 # slave</p>
<h4 id="主从复制步骤"><a href="#主从复制步骤" class="headerlink" title="主从复制步骤"></a>主从复制步骤</h4><ol>
<li>主库的更新事件会被写到 bin log 日志中  </li>
<li>从库启用 slave 服务连接到主库  </li>
<li>从库创建一个 I&#x2F;O 线程，从主库读取 bin log 日志的内容并写入到 relay log 日志中  </li>
<li>从库创建一个 SQL 线程，从 relay log 里读取内容并写入</li>
</ol>
<h4 id="master-配置"><a href="#master-配置" class="headerlink" title="master 配置"></a>master 配置</h4><p>vim &#x2F;etc&#x2F;my.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 服务器唯一ID,一般取IP最后一段</span></span><br><span class="line">server-id=104</span><br><span class="line"><span class="comment"># 启用二进制日志</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="comment"># 日志格式</span></span><br><span class="line">binlog-format=mixed</span><br><span class="line"><span class="comment"># 需要同步的数据库</span></span><br><span class="line">binlog-do-db=test_db</span><br><span class="line"><span class="comment"># 不需要同步的数据库</span></span><br><span class="line">binlog-ignore-db=sys</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=performance_schema</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启 mysql 服务</span></span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 创建用户并授权</span></span><br><span class="line">create user <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">grant replication slave on *.* to <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">flush privileges; </span><br><span class="line"><span class="comment"># 查看主节点配置（记着 File 和 Position 等会要用到）</span></span><br><span class="line">show master status;</span><br><span class="line"></span><br><span class="line">+------------------+----------+--------------+-------------------------------------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                                | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+-------------------------------------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |     1677 | test_db      | sys,mysql,information_schema,performance_schema |                   |</span><br><span class="line">+------------------+----------+--------------+-------------------------------------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="slave-配置"><a href="#slave-配置" class="headerlink" title="slave 配置"></a>slave 配置</h4><p>vim &#x2F;etc&#x2F;my.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 服务器唯一 ID,一般取 IP 最后一段</span></span><br><span class="line">server-id=105</span><br><span class="line"><span class="comment"># 设置只读</span></span><br><span class="line">super_read_only=1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启 mysql 服务</span></span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 关闭从节点的复制功能</span></span><br><span class="line">stop slave;</span><br><span class="line"><span class="comment"># 配置从节点</span></span><br><span class="line">change master to master_host=<span class="string">&#x27;192.168.1.104&#x27;</span>,master_user=<span class="string">&#x27;slave&#x27;</span>,master_password=<span class="string">&#x27;123456&#x27;</span>,master_log_file=<span class="string">&#x27;mysql-bin.000001&#x27;</span>,master_log_pos=1677; </span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 启动从节点的复制功能</span></span><br><span class="line">start slave; </span><br><span class="line"><span class="comment"># 检查从节点复制功能状态</span></span><br><span class="line">show slave status\G</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.1.104</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 1677</span><br><span class="line">               Relay_Log_File: localhost-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 324</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1677</span><br><span class="line">              Relay_Log_Space: 537</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 104</span><br><span class="line">                  Master_UUID: 0478182c-284e-11ec-9539-000c29ecfc3e</span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has <span class="built_in">read</span> all relay <span class="built_in">log</span>; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">       Master_public_key_path: </span><br><span class="line">        Get_master_public_key: 0</span><br><span class="line">            Network_Namespace: </span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><blockquote>
<p>在主库创建，会同步到从库</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE test_db;</span><br><span class="line"></span><br><span class="line">USE test_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test_user` (</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test_db`.`test_user` (`username`, `password`) <span class="keyword">VALUES</span> (<span class="string">&#x27;slave&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p>使用命令 show slave status\G 后出现错误提示 Last_IO_Error: Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work</p>
<p>原因：这是由于从服务器是克隆的主服务器系统，导致主从 mysql uuid 相同</p>
<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select uuid();</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| uuid()                               |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| 42affe55-2995-11ec-b52e-000c29c49344 |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>vim .&#x2F;data&#x2F;auto.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[auto]</span><br><span class="line">server-uuid=42affe55-2995-11ec-b52e-000c29c49344</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8日期时间处理</title>
    <url>/2020/06/02/213419.html</url>
    <content><![CDATA[<blockquote>
<p>在 SpringBoot 中使用 spring.jackson.date-format 只会对 Date 类型进行格式化，而使用 @JsonFormat 和 @DataTimeFormat 只能针对单个属性进行格式化，比较麻烦，所以需要一个全局的格式化</p>
</blockquote>
<span id="more"></span>

<h4 id="输入输出数据时格式化"><a href="#输入输出数据时格式化" class="headerlink" title="输入输出数据时格式化"></a>输入输出数据时格式化</h4><ul>
<li>方法里使用的常量来自 hutool</li>
<li>Controller 里直接使用 LocalDateTime 接收参数时还需指定 @DateTimeFormat</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="title function_">customizer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder -&gt; &#123;</span><br><span class="line">            builder.locale(Locale.CHINA);</span><br><span class="line">            builder.timeZone(TimeZone.getTimeZone(ZoneId.systemDefault()));</span><br><span class="line">            builder.simpleDateFormat(NORM_DATETIME_PATTERN);</span><br><span class="line">            builder.modules(getJavaTimeModule());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JavaTimeModule <span class="title function_">getJavaTimeModule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JavaTimeModule</span> <span class="variable">javaTimeModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>();</span><br><span class="line">        javaTimeModule.addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(NORM_DATETIME_PATTERN)));</span><br><span class="line">        javaTimeModule.addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(NORM_DATE_PATTERN)));</span><br><span class="line">        javaTimeModule.addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(NORM_TIME_PATTERN)));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(NORM_DATETIME_PATTERN)));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(NORM_DATE_PATTERN)));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(NORM_TIME_PATTERN)));</span><br><span class="line">        <span class="keyword">return</span> javaTimeModule;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="对象转Json时格式化"><a href="#对象转Json时格式化" class="headerlink" title="对象转Json时格式化"></a>对象转Json时格式化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        objectMapper.registerModule(JacksonConfig.getJavaTimeModule());</span><br><span class="line">        <span class="comment">// 设置时间类的序列化以及反序列化的格式</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(NORM_DATETIME_PATTERN));</span><br><span class="line">        <span class="comment">// 包含所有字段</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);</span><br><span class="line">        <span class="comment">// 在序列化一个空对象时时不抛出异常</span></span><br><span class="line">        objectMapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line">        <span class="comment">// 忽略反序列化时在 json 字符串中存在, 但在 java 对象中不存在的属性</span></span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">toJson</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;Parse object to string error&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">toPrettyJson</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;Parse object to string error&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">fromJson</span><span class="params">(String str, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.readValue(str, clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;Parse String to object error!&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">fromJson</span><span class="params">(String json, TypeReference&lt;T&gt; typeReference)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.readValue(json, typeReference);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;Parse String to object error&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常见问题整理</title>
    <url>/2020/06/05/120632.html</url>
    <content><![CDATA[<blockquote>
<p>Linux 常见问题整理</p>
</blockquote>
<span id="more"></span>

<h4 id="command-not-found"><a href="#command-not-found" class="headerlink" title="command not found"></a>command not found</h4><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">lsof</td>
<td align="center">yum -y install lsof</td>
</tr>
<tr>
<td align="center">ifconfig</td>
<td align="center">yum -y install net-tools</td>
</tr>
<tr>
<td align="center">lsb_release</td>
<td align="center">yum -y install redhat-lsb</td>
</tr>
<tr>
<td align="center">vim</td>
<td align="center">yum -y install vim</td>
</tr>
<tr>
<td align="center">wget</td>
<td align="center">yum -y install wget</td>
</tr>
<tr>
<td align="center">rz</td>
<td align="center">yum -y install lrzsz</td>
</tr>
<tr>
<td align="center">firewall-cmd</td>
<td align="center">yum -y install firewalld</td>
</tr>
</tbody></table>
<h4 id="yum-命令不能使用"><a href="#yum-命令不能使用" class="headerlink" title="yum 命令不能使用"></a>yum 命令不能使用</h4><p>查看网卡是否启动，vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33，将 ONBOOT 改成 yes，重启网卡，service network restart，如果还是不行的话，设置如下<br>vi &#x2F;etc&#x2F;yum&#x2F;pluginconf.d&#x2F;fastestmirror.conf，设置 enabled&#x3D;0<br>vi &#x2F;etc&#x2F;yum.conf，设置 plugins&#x3D;0</p>
<h4 id="连不上外网"><a href="#连不上外网" class="headerlink" title="连不上外网"></a>连不上外网</h4><p>检测网络配置，cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ens-*</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=enp0s3</span><br><span class="line">UUID=eac2ccd5-8840-41da-8da5-fa3967bf63fa</span><br><span class="line">DEVICE=enp0s3</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.1.14</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br></pre></td></tr></table></figure>

<p>如果配置没问题就检查 dns，cat &#x2F;etc&#x2F;resolv.conf，重启网络</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal</title>
    <url>/2020/06/05/231740.html</url>
    <content><![CDATA[<blockquote>
<p>ThreadLocal 将一个变量隔离在某一个线程上，即该变量只在某个线程本身可见，其他线程无法访问，可以实现线程的安全性，而且可以避免线程同步带来的性能损失</p>
</blockquote>
<span id="more"></span>

<p><img data-src="/../../../../upload/2020/09/image-a69735bdcc754219bf29ddf601b80a0e.png" alt="image.png"></p>
<p>如图所示，每个 Thread对象中都持有一个 ThreadLocalMap 成员变量，每个 ThreadLocalMap 有一个键值对 Entry[] table，可以认为是一个 map，ThreadLocal 就是这个键，我们需要存储的数据做为值</p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="每个线程需要一个独享的对象"><a href="#每个线程需要一个独享的对象" class="headerlink" title="每个线程需要一个独享的对象"></a>每个线程需要一个独享的对象</h5><blockquote>
<p>通常是工具类，典型需要使用的有 SimpleDateFormat 和 Random<br>  Java8 可以使用线程安全的 DateTimeFormatter 和 ThreadLocalRandom</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; dateFormat = ThreadLocal.withInitial(() -&gt; <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(DATE_FORMAT));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="每个线程内需要保存全局变量"><a href="#每个线程内需要保存全局变量" class="headerlink" title="每个线程内需要保存全局变量"></a>每个线程内需要保存全局变量</h5><blockquote>
<p>例如在拦截器中获取用户信息，可以直接让不同方法直接使用，避免参数传递的麻烦</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; userHolder = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userHolder.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userHolder.get().getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        userHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginToken</span> <span class="operator">=</span> request.getHeader(Const.HEAD_TOKEN);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(loginToken)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        loginToken = Const.TOKEN_PREFIX + loginToken;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userJsonStr</span> <span class="operator">=</span> redisService.get(loginToken);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JsonUtil.string2Obj(userJsonStr, User.class);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重置Session时间</span></span><br><span class="line">        redisService.expire(loginToken, Const.REDIS_SESSION_EXPIRE_TIME);</span><br><span class="line">        <span class="comment">// 设置ThreadLocal</span></span><br><span class="line">        ThreadLocalHolder.set(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params">                           ModelAndView modelAndView)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">        ThreadLocalHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="带来的好处"><a href="#带来的好处" class="headerlink" title="带来的好处"></a>带来的好处</h4><ul>
<li>达到线程安全</li>
<li>不需要加锁，提高执行效率</li>
<li>更高效的利用内存，节省开销</li>
<li>免去传参的繁琐</li>
</ul>
<h4 id="主要方法介绍"><a href="#主要方法介绍" class="headerlink" title="主要方法介绍"></a>主要方法介绍</h4><ul>
<li>initialValue：初始化，该方法会返回当前线程对应的“初始值”，这是一个延迟加载的方法，只有在调用 get() 的时候才会触发<br>当线程第一次使用 get() 访问变量时，将调用此方法，除非线程之前调用了 set()，在这种情况下，不会为线程调用 initialValue()<br>通常，每个线程最多调用一次此方法，但如果已经调用了 remove() 后，再调用 get() ，则可能会再次调用此方法<br>如果不重写此方法，这个方法会返回 null，一般使用匿名内部类的方法来重写 initialValue()，以便在后续使用中可以初始化副本对象</li>
<li>set：为当前线程副本设置一个新值，set() 和 setInitialValue() 最后都是利用 map.set() 来设置值</li>
<li>get：得到当前线程副本对应的值，如果是首次调用 get()，则会调用 initialize 来得到这个值</li>
<li>remove：删除对应这个线程的值</li>
</ul>
<h4 id="内存泄露问题"><a href="#内存泄露问题" class="headerlink" title="内存泄露问题"></a>内存泄露问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        <span class="built_in">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="value-的泄露"><a href="#value-的泄露" class="headerlink" title="value 的泄露"></a>value 的泄露</h5><p>ThreadLocalMap 中的每一个 Entry 都是对 key 的弱引用（弱引用的特点是，如果这个对象只被弱引用关联，那么这个对象就可以被回收），同时每个 Entry 都包含了一个对 value 的强引用<br>正常情况下，当线程终止，保存在 ThreadLocal 里的 value 会被垃圾回收，因为没有任何强引用了<br>但是，如果线程不终止（比如线程需要保持很久），那么 key 对应的 value 就不能被回收，所以有以下的调用链：Thread -&gt; ThreadLocalMap -&gt; Entry（key 为 null）-&gt; value<br>因为 value 和 Thread 之间还存在这个强引用链路，所以导致 value 无法回收，就可能会出现 OOM<br>为了解决这个问题，JDK 会在 set、remove、rehash 方法中扫描 key 为 null 的 Entry，并把对应的 value 设置为 null，这样 value 对象就会被回收<br>但是如果一个 TreadLocal 不被使用，那么实际上 set、remove、rehash 方法也不会被调用，如果同时线程又不停止，那么调用链就会一直存在，那么就导致了 value 的内存泄露</p>
<h5 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h5><p>调用 remove 方法，就会删除对应的 Entry 对象，可以避免内存泄露，所以使用完 ThreadLocal 之后，应该调用 remove 方法</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux相关命令</title>
    <url>/2020/06/06/230632.html</url>
    <content><![CDATA[<blockquote>
<p>Linux 相关命令</p>
</blockquote>
<span id="more"></span>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">说明</th>
<th align="center">参数</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">tail</td>
<td align="center">输出文件内容</td>
<td align="center">-n 显示文件的尾部 n 行内容，-f 循环读取</td>
<td align="center">tail -200f logs.out</td>
</tr>
<tr>
<td align="center">less</td>
<td align="center">浏览文件</td>
<td align="center">-r 去除颜色信息，pageUp 与 pageDown 进行翻页，&#x2F; 向下搜索，? 向上搜索</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">mv</td>
<td align="center">移动文件或重命名</td>
<td align="center"></td>
<td align="center">mv source dest</td>
</tr>
<tr>
<td align="center">touch</td>
<td align="center">更新文件的时间属性为当前时间，如文件不存在则创建一个新的空白文件</td>
<td align="center"></td>
<td align="center">touch a.txt</td>
</tr>
<tr>
<td align="center">grep</td>
<td align="center">搜索指定字符串</td>
<td align="center">-C 显示指定行之后的内容，-i 忽略大小写</td>
<td align="center">grep “陈开开” -C 50 logs.out</td>
</tr>
<tr>
<td align="center">pgrep</td>
<td align="center">根据条件查询进程信息</td>
<td align="center">-l 同时显示进程名和 pid，-o 当匹配多个进程时，显示进程号最小的那个</td>
<td align="center">pgrep -l java</td>
</tr>
<tr>
<td align="center">find</td>
<td align="center">搜索文件</td>
<td align="center">-cime n 在过去 n 天被修改过的文件，-name name，-size n</td>
<td align="center">find . -name “*.jar”</td>
</tr>
<tr>
<td align="center">tar</td>
<td align="center">备份文件</td>
<td align="center">-zcvf 压缩文件，-zxvf 解压缩</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">zip</td>
<td align="center">压缩文件</td>
<td align="center">-r 递归处理，-q 不显示指令执行过程</td>
<td align="center">zip -q -r crmViewX.zip crmViewX</td>
</tr>
<tr>
<td align="center">unzip</td>
<td align="center">解压缩</td>
<td align="center">-l 显示压缩文件内所包含的文件</td>
<td align="center">unzip crmViewX</td>
</tr>
<tr>
<td align="center">du</td>
<td align="center">查看文件夹大小</td>
<td align="center">-a 显示全部文件</td>
<td align="center">du -sh .&#x2F;log</td>
</tr>
<tr>
<td align="center">ps</td>
<td align="center">显示当前进程的状态</td>
<td align="center">-ef 全模式显示所有进程，-au 显示较详细的信息，-aux 显示所有包含其他使用者的进程</td>
<td align="center">ps -ef | grep java</td>
</tr>
<tr>
<td align="center">lsof</td>
<td align="center">显示端口占用情况</td>
<td align="center">-i 查找在特定端口上运行的进程</td>
<td align="center">lsof -i :8080</td>
</tr>
<tr>
<td align="center">netstat</td>
<td align="center">显示网络状态</td>
<td align="center">-a 显示所有连线中的 socket，-n 直接使用 ip 地址，-p 显示程序名称</td>
<td align="center">netstat -anp | grep 8080</td>
</tr>
<tr>
<td align="center">kill</td>
<td align="center">删除执行中的程序</td>
<td align="center">-9 彻底杀死进程</td>
<td align="center">kill -9 8080</td>
</tr>
<tr>
<td align="center">route</td>
<td align="center">显示和操作路由表</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">jobs</td>
<td align="center">显示任务列表和任务状态</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">放在一个命令的最后，将此命令放到后台执行</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">uname</td>
<td align="center">显示系统信息</td>
<td align="center">-a 显示全部信息</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">who</td>
<td align="center">显示系统中有哪些使用者正在上面</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">halt</td>
<td align="center">关机，root 用户也可使用</td>
<td align="center"></td>
<td align="center">shutdown -h now</td>
</tr>
<tr>
<td align="center">reboot</td>
<td align="center">重启，root 用户也可使用</td>
<td align="center"></td>
<td align="center">shutdown -r now</td>
</tr>
<tr>
<td align="center">scp</td>
<td align="center">Linux之间复制文件或目录</td>
<td align="center">-r 递归复制整个目录</td>
<td align="center">scp install.sh <a href="mailto:&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x32;&#x32;&#x39;&#46;&#49;&#x32;&#x38;">&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#x2e;&#x32;&#x32;&#x39;&#46;&#49;&#x32;&#x38;</a>:&#x2F;usr&#x2F;local&#x2F;software&#x2F;install.sh</td>
</tr>
</tbody></table>
<h4 id="查看系统资源信息"><a href="#查看系统资源信息" class="headerlink" title="查看系统资源信息"></a>查看系统资源信息</h4><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">cat &#x2F;proc&#x2F;cpuinfo | grep ‘physical id’ | uniq | wc -l</td>
<td align="center">查看 cpu 个数</td>
</tr>
<tr>
<td align="center">cat &#x2F;proc&#x2F;cpuinfo | grep ‘cpu cores’ | uniq</td>
<td align="center">每个 cpu 的核心数</td>
</tr>
<tr>
<td align="center">cat &#x2F;proc&#x2F;cpuinfo | grep ‘processor’ | wc -l</td>
<td align="center">逻辑 cpu 的数量</td>
</tr>
<tr>
<td align="center">cat &#x2F;proc&#x2F;cpuinfo | grep ‘model name’ | uniq</td>
<td align="center">查看 cpu 型号</td>
</tr>
<tr>
<td align="center">free -h</td>
<td align="center">查看内存大小</td>
</tr>
<tr>
<td align="center">df -h</td>
<td align="center">查看硬盘大小</td>
</tr>
</tbody></table>
<h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">systemctl start firewalld</td>
<td align="center">启动防火墙</td>
</tr>
<tr>
<td align="center">systemctl stop firewalld</td>
<td align="center">关闭防火墙</td>
</tr>
<tr>
<td align="center">systemctl status firewalld</td>
<td align="center">查看防火墙状态</td>
</tr>
<tr>
<td align="center">systemctl enable firewalld</td>
<td align="center">设置防火墙为开机启用</td>
</tr>
<tr>
<td align="center">systemctl disable firewalld</td>
<td align="center">设置防火墙为开机禁用</td>
</tr>
</tbody></table>
<h4 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h4><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">firewall-cmd –list-ports</td>
<td align="center">查看开放的端口</td>
</tr>
<tr>
<td align="center">firewall-cmd –reload</td>
<td align="center">重载入</td>
</tr>
<tr>
<td align="center">firewall-cmd –zone&#x3D;public –add-port&#x3D;3306&#x2F;tcp –permanent</td>
<td align="center">开启端口</td>
</tr>
<tr>
<td align="center">firewall-cmd –zone&#x3D;public –add-port&#x3D;3306&#x2F;tcp –add-port&#x3D;8090&#x2F;tcp –permanent <br> firewall-cmd –zone&#x3D;public –add-port&#x3D;3306-3308&#x2F;tcp –permanent</td>
<td align="center">开启多个端口</td>
</tr>
<tr>
<td align="center">firewall-cmd –zone&#x3D;public –remove-port&#x3D;80&#x2F;tcp –permanent</td>
<td align="center">关闭端口</td>
</tr>
</tbody></table>
<h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set nu</td>
<td align="center">显示行号</td>
</tr>
<tr>
<td align="center">set nonu</td>
<td align="center">取消显示行号</td>
</tr>
<tr>
<td align="center">dd</td>
<td align="center">删除当前行</td>
</tr>
<tr>
<td align="center">1,10d</td>
<td align="center">多行删除</td>
</tr>
<tr>
<td align="center">%s&#x2F;foo&#x2F;bar&#x2F;g</td>
<td align="center">替换</td>
</tr>
<tr>
<td align="center">shift + g</td>
<td align="center">跳转最后一行</td>
</tr>
<tr>
<td align="center">gg</td>
<td align="center">跳转第一行</td>
</tr>
</tbody></table>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><blockquote>
<p>top 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况</p>
</blockquote>
<p><img data-src="/../../../../upload/2021/10/Snipaste_2021-10-16_16-08-00-a92f71120f8841ee9995c23e35d5e47d.png" alt="image.png"></p>
<h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">c</td>
<td align="center">切换显示命令名称和完整命令行</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center">切换显示平均负载和启动时间信息</td>
</tr>
<tr>
<td align="center">t</td>
<td align="center">切换显示进程和 CPU 状态信息</td>
</tr>
<tr>
<td align="center">m</td>
<td align="center">切换显示内存信息</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">根据使用内存排序</td>
</tr>
<tr>
<td align="center">P</td>
<td align="center">根据 CPU 使用百分比大小进行排序</td>
</tr>
<tr>
<td align="center">T</td>
<td align="center">根据时间&#x2F;累计时间进行排序</td>
</tr>
<tr>
<td align="center">W</td>
<td align="center">将当前设置写入 ~&#x2F;.toprc 文件中</td>
</tr>
<tr>
<td align="center">f</td>
<td align="center">从当前显示中添加或者删除项目</td>
</tr>
<tr>
<td align="center">o</td>
<td align="center">改变显示项目的顺序</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">改变两次刷新之间的延迟时间，系统将提示用户输入新的时间，单位为 s，如果有小数，就换算成 ms，输入 0 值则系统将不断刷新，默认值是 5s</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">切换到累计模式</td>
</tr>
<tr>
<td align="center">i</td>
<td align="center">忽略闲置和僵死进程</td>
</tr>
<tr>
<td align="center">K</td>
<td align="center">终止一个进程，系统将提示用户输入需要终止的进程 id，以及需要发送给该进程什么样的信号，一般的终止进程可以使用 15 信号，如果不能正常结束那就使用信号 9 强制结束该进程，默认值是信号 15，在安全模式中此命令被屏蔽</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">重新安排一个进程的优先级别，系统提示用户输入需要改变的进程 id 以及需要设置的进程优先级值，输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权，默认值是 10</td>
</tr>
<tr>
<td align="center">q</td>
<td align="center">退出程序</td>
</tr>
</tbody></table>
<h5 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h5><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-10-17_20-33-42-9a7407433103449c829e6447c6b71348.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">04:07:57</td>
<td align="center">当前时间</td>
</tr>
<tr>
<td align="center">up 2:11</td>
<td align="center">系统运行时间，分</td>
</tr>
<tr>
<td align="center">1 user</td>
<td align="center">当前登录用户数</td>
</tr>
<tr>
<td align="center">load average</td>
<td align="center">0.88, 0.41, 0.38 系统负载，即任务队列的平均长度，1，5，15m 到现在的平均值</td>
</tr>
</tbody></table>
<h5 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h5><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-10-17_20-38-20-d69191d154b04c519f1cdb0fe179c7ea.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">110 total</td>
<td align="center">进程总数</td>
</tr>
<tr>
<td align="center">1 running</td>
<td align="center">1 个在运行</td>
</tr>
<tr>
<td align="center">109 sleeping</td>
<td align="center">109 个在睡眠</td>
</tr>
<tr>
<td align="center">0 stopped</td>
<td align="center">0 个已停止</td>
</tr>
<tr>
<td align="center">0 zombie</td>
<td align="center">0 个僵尸进程</td>
</tr>
</tbody></table>
<h5 id="CPU-信息"><a href="#CPU-信息" class="headerlink" title="CPU 信息"></a>CPU 信息</h5><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-10-17_20-40-13-1f515f707cd74309850db67f5c15e1b1.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">50.1 us</td>
<td align="center">用户空间占 CPU 百分比</td>
</tr>
<tr>
<td align="center">0.0 sy</td>
<td align="center">内核空间占 CPU 百分比</td>
</tr>
<tr>
<td align="center">0.0 ni</td>
<td align="center">用户进程空间内改变过优先级的进程占用 CPU 百分比</td>
</tr>
<tr>
<td align="center">49.9 id</td>
<td align="center">空闲 CPU 百分比</td>
</tr>
<tr>
<td align="center">0.0 wa</td>
<td align="center">等待 IO 的 CPU 时间百分比</td>
</tr>
<tr>
<td align="center">0.0 hi</td>
<td align="center">处理硬件中断的 CPU 占用百分比</td>
</tr>
<tr>
<td align="center">0.0 si</td>
<td align="center">处理软件中断的 CPU 占用百分比</td>
</tr>
<tr>
<td align="center">0.0 st</td>
<td align="center">虚拟机占用百分比</td>
</tr>
</tbody></table>
<h5 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h5><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-10-17_20-41-48-df74d8457f654562a4df869cb9834cc0.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1863016 total</td>
<td align="center">全部内存</td>
</tr>
<tr>
<td align="center">1132920 free</td>
<td align="center">空闲内存</td>
</tr>
<tr>
<td align="center">457464 used</td>
<td align="center">已使用的内存</td>
</tr>
<tr>
<td align="center">272632 buff&#x2F;cache</td>
<td align="center">用作内核缓存的内存</td>
</tr>
</tbody></table>
<h5 id="交换空间信息"><a href="#交换空间信息" class="headerlink" title="交换空间信息"></a>交换空间信息</h5><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-10-17_20-43-43-79a58e162e26493fb15777009494efbb.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2097148 total</td>
<td align="center">总交换区</td>
</tr>
<tr>
<td align="center">2097148 free</td>
<td align="center">空闲交换区</td>
</tr>
<tr>
<td align="center">0 used</td>
<td align="center">已使用的交换区</td>
</tr>
<tr>
<td align="center">1250872 avail Mem</td>
<td align="center">缓冲的交换区</td>
</tr>
</tbody></table>
<h5 id="进程详细信息"><a href="#进程详细信息" class="headerlink" title="进程详细信息"></a>进程详细信息</h5><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-10-17_20-45-43-36d0de93d4c944608d59e1e8855fd2f1.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PID</td>
<td align="center">进程号</td>
</tr>
<tr>
<td align="center">USER</td>
<td align="center">进程所有者</td>
</tr>
<tr>
<td align="center">PR</td>
<td align="center">进程优先级，其值越小越早被执行</td>
</tr>
<tr>
<td align="center">NI nice</td>
<td align="center">值，进程可被执行的优先级的修正数值</td>
</tr>
<tr>
<td align="center">VIRT</td>
<td align="center">进程使用的虚拟内存</td>
</tr>
<tr>
<td align="center">RES</td>
<td align="center">常驻内存</td>
</tr>
<tr>
<td align="center">SHR</td>
<td align="center">共享内存</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">进程状态，D 不可中断的休眠状态 R 运行 S 睡眠 T 跟踪&#x2F;停止 Z 僵死</td>
</tr>
<tr>
<td align="center">%CPU</td>
<td align="center">上次更新到现在的 CPU 时间占用百分比</td>
</tr>
<tr>
<td align="center">%MEM</td>
<td align="center">进程使用的物理内存百分比</td>
</tr>
<tr>
<td align="center">TIME+</td>
<td align="center">进程使用的 CPU 时间总计，精确到 0.01 秒</td>
</tr>
<tr>
<td align="center">COMMAND</td>
<td align="center">进程所使用的命令</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringAOP</title>
    <url>/2020/06/10/010943.html</url>
    <content><![CDATA[<blockquote>
<p>AOP（Aspect Oriented Program，面向切面编程），可以说是面向对象编程的补充，它提供一种“横切”的技术，将影响了多个类的公共行为封装到一个可重用模块，并将其命名为切面（Aspect），AOP 把软件系统分为两个部分：核心关注点和横切关注点，业务处理的主要流程就是核心关注点，而横切关注点就是核心关注点里的一些公共行为，比如权限认证、日志、事物等</p>
</blockquote>
<span id="more"></span>

<h4 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h4><ul>
<li>切面（Aspect）：切入点和通知的结合</li>
<li>连接点（JoinPoint）：被拦截到的点，因为 Spring 只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</li>
<li>切入点（Pointcut）：对连接点进行拦截的定义</li>
<li>通知（Advice）：所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</li>
<li>目标对象（Target Object）：被一个或者多个切面所通知的对象</li>
<li>织入（Weave）：将切面应用到目标对象并导致代理对象创建的过程</li>
<li>引入（Introduction）：在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段</li>
</ul>
<h5 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h5><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">before（前置通知）</td>
<td align="center">通知方法在目标方法调用之前执行</td>
</tr>
<tr>
<td align="center">after（后置通知）</td>
<td align="center">通知方法在目标方法返回或异常后调用</td>
</tr>
<tr>
<td align="center">after-returning（返回后通知）</td>
<td align="center">通知方法会在目标方法返回后调用</td>
</tr>
<tr>
<td align="center">after-throwing（抛出异常通知）</td>
<td align="center">通知方法会在目标方法抛出异常后调用</td>
</tr>
<tr>
<td align="center">around（环绕通知）</td>
<td align="center">通知方法会将目标方法封装起来</td>
</tr>
</tbody></table>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>Spring AOP 是通过动态代理实现的，通过动态代理，可以对被代理对象的方法进行增强，主要用到了两种动态代理技术：JDK 动态代理 和 CGLIB 库<br>其中 JDK 动态代理只能对实现了接口的类生成代理，CGLIB 则是针对类实现代理，主要是对指定的类生成一个子类，重写其中的方法</p>
<h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><h5 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">execution(权限修饰符 返回值类型 类路径(方法名) 抛出的异常类型)</span><br><span class="line"></span><br><span class="line">// 拦截任意公共方法</span><br><span class="line">execution(public * *(..))</span><br><span class="line"></span><br><span class="line">// 拦截以 set 开头的任意方法</span><br><span class="line">execution(* set*(..))</span><br><span class="line"></span><br><span class="line">// 拦截 service 包中以 public 修饰的任意方法</span><br><span class="line">execution(public * ink.ckx.test.*.service.*.*(..))</span><br><span class="line"></span><br><span class="line">// 拦截 test 包及其子包下的任意方法</span><br><span class="line">execution(* ink.ckx.test..*.*(..))</span><br></pre></td></tr></table></figure>

<h5 id="within"><a href="#within" class="headerlink" title="within"></a>within</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 拦截包中任意方法，不包含子包中的方法</span><br><span class="line">within(ink.ckx.service.*)</span><br><span class="line"></span><br><span class="line">// 拦截包或者子包中定义的方法</span><br><span class="line">within(ink.ckx.service..*)</span><br></pre></td></tr></table></figure>

<h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 拦截 AService 所有的子类的所有外部调用方法</span><br><span class="line">this(ink.ckx.Aservice*)</span><br></pre></td></tr></table></figure>

<h5 id="target"><a href="#target" class="headerlink" title="target"></a>target</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 拦截 AServiceImpl 下的所有方法</span><br><span class="line">target(ink.ckx.impl.AServiceImpl)</span><br></pre></td></tr></table></figure>

<h5 id="args"><a href="#args" class="headerlink" title="args"></a>args</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 拦截任何不带参数的方法</span><br><span class="line">args()</span><br><span class="line"></span><br><span class="line">// 拦截带任意参数的方法</span><br><span class="line">args(…)</span><br><span class="line"></span><br><span class="line">// 拦截任何只带一个参数，而且这个参数的类型是 String 的方法</span><br><span class="line">args(java.lang.String)</span><br><span class="line"></span><br><span class="line">// 拦截带任意个参数，但是第一个参数的类型是 String 的方法</span><br><span class="line">args(java.lang.String,…)</span><br></pre></td></tr></table></figure>

<h5 id="target-1"><a href="#target-1" class="headerlink" title="@target"></a>@target</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 拦截类上有指定注解的所有外部调用方法</span><br><span class="line">@target(ink.ckx.test.Annotation1)</span><br></pre></td></tr></table></figure>

<h5 id="within-1"><a href="#within-1" class="headerlink" title="@within"></a>@within</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 拦截类上具有指定注解的的所有方法</span><br><span class="line">@within(ink.ckx.test.Annotation1)</span><br></pre></td></tr></table></figure>

<h5 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 拦截具有指定注解的方法</span><br><span class="line">@annotation(ink.ckx.test.Annotation1)</span><br></pre></td></tr></table></figure>

<h5 id="args-1"><a href="#args-1" class="headerlink" title="@args"></a>@args</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 拦截一个参数的方法，并且这个参数的类型有指定的注解</span><br><span class="line">@args(ink.ckx.test.Annotation1)</span><br><span class="line"></span><br><span class="line">// 拦截两个参数的方法，且两个参数的类型上都有指定的注解</span><br><span class="line">@args(ink.ckx.test.Annotation1,ink.ckx.test.Annotation2)</span><br><span class="line"></span><br><span class="line">// 拦截多个参数的方法，且第一个参数类型上有指定的注解</span><br><span class="line">@args(ink.ckx.test.Annotation1,..)</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * ink.ckx.test.*.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aspect</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;aspect()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;before：&quot;</span>, joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;aspect()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;after：&quot;</span>, joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;aspect()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">&quot;around：&#123;&#125;，Use time：&#123;&#125; ms&quot;</span>, joinPoint, (end - start));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">&quot;around：&#123;&#125;，Use time：&#123;&#125; ms，with exception：&#123;&#125;&quot;</span>, joinPoint, (end - start), e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;aspect()&quot;, returning = &quot;retVal&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturn</span><span class="params">(Object retVal)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterReturn：&#123;&#125;&quot;</span>, retVal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut = &quot;aspect()&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrow</span><span class="params">(JoinPoint joinPoint, Exception ex)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterThrow：&#123;&#125;，with exception：&#123;&#125;&quot;</span>, joinPoint, ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务</title>
    <url>/2020/06/11/234551.html</url>
    <content><![CDATA[<blockquote>
<p>Spring 事务可以简化对常规事务的一些操作，比如获取连接、关闭连接、事务提交和回滚等，在使用 Spring 事务时，有一个非常重要的概念就是事务属性，事务属性通常由事务的传播行为、隔离级别、超时时间和只读标志组成</p>
</blockquote>
<span id="more"></span>

<h4 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h4><p>事务是指一个工作单元，它包含了一组数据操作命令，并且所有的命令作为一个整体一起向系统提交或撤消请求操作，即这组命令要么都执行，要么都不执行</p>
<h4 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h4><ul>
<li>原子性（Atomicity）：事务中的操作要么全部完成，要么全部不完成</li>
<li>一致性（Consistency）：事务执行的结果必须是从一个一致性状态转换到另一个一致性状态</li>
<li>隔离性（Isolation）：事务的执行不能被其他事务干扰</li>
<li>持久性（Durability）：事务一旦提交，它对数据的改变就应该是永久性的</li>
</ul>
<h4 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h4><ul>
<li>脏读（Dirty read）：当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据，因为这个数据还没有提交，那么另外一个事务读到的这个数据是“脏数据”，根据“脏数据”所做的操作可能是不正确的</li>
<li>丢失修改（Lost to modify）：在一个事务正在读取数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据，这样第一个事务内的修改结果就被丢失，因此称为丢失修改</li>
<li>不可重复读（Unrepeatable read）：指在一个事务内多次读同一数据，在这个事务还没有结束时，另一个事务也访问该数据，那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样，这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读</li>
<li>幻读（Phantom read）：幻读与不可重复读类似，它发生在一个事务读取了几行数据，接着另一个事务插入了一些数据时，在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读</li>
</ul>
<blockquote>
<p>不可重复度和幻读的区别：不可重复读的重点是修改和删除，幻读的重点在于新增</p>
</blockquote>
<h4 id="事务的分类"><a href="#事务的分类" class="headerlink" title="事务的分类"></a>事务的分类</h4><h5 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h5><p>通过在代码中显示调用 commit()、rollback() 等方法来精确定义事务的边界，使用 TransactionTemplate 或者 PlatformTransactionManager，对于编程式事务，Spring 推荐使用TransactionTemplate</p>
<h5 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h5><p>声明式事务是建立在 AOP 之上的，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务<br>声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需修改配置文件或者添加相应注解，便可以将事务规则应用到业务逻辑中</p>
<h4 id="核心接口"><a href="#核心接口" class="headerlink" title="核心接口"></a>核心接口</h4><h5 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h5><blockquote>
<p>Spring 并不会直接管理事务，而是通过此接口为各个平台提供对应的事务管理器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取事务状态信息</span></span><br><span class="line">  TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提交事务</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 回滚事务</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h5><blockquote>
<p>此接口提供了获取事务属性的一些方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取事务的传播行为</span></span><br><span class="line">  <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">getPropagationBehavior</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> PROPAGATION_REQUIRED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取事务的隔离级别</span></span><br><span class="line">  <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">getIsolationLevel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ISOLATION_DEFAULT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取事务的超时时间</span></span><br><span class="line">  <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">getTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> TIMEOUT_DEFAULT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取事务是否只读</span></span><br><span class="line">  <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isReadOnly</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取事务的名称</span></span><br><span class="line">  <span class="keyword">default</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> TransactionDefinition <span class="title function_">withDefaults</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> StaticTransactionDefinition.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h5><blockquote>
<p>此接口提供一些查询事务状态的方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionStatus</span> <span class="keyword">extends</span> <span class="title class_">TransactionExecution</span>, SavepointManager, Flushable &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否有保存点</span></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">hasSavepoint</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 刷新</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h4><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PROPAGATION_REQUIRED</td>
<td align="center">支持当前事务，如果不存在事务，则创建一个新的事务，这是默认的设置</td>
</tr>
<tr>
<td align="center">PROPAGATION_SUPPORTS</td>
<td align="center">支持当前事务，如果不存在事务，则以非事务方式运行</td>
</tr>
<tr>
<td align="center">PROPAGATION_MANDATORY</td>
<td align="center">支持当前事务，如果不存在事务，则抛出异常</td>
</tr>
<tr>
<td align="center">PROPAGATION_REQUIRES_NEW</td>
<td align="center">创建一个新的事务，如果当前存在事务，则将当前事务挂起</td>
</tr>
<tr>
<td align="center">PROPAGATION_NOT_SUPPORTED</td>
<td align="center">以非事务方式运行，如果当前存在事务，则将当前事务挂起</td>
</tr>
<tr>
<td align="center">PROPAGATION_NEVER</td>
<td align="center">以非事务方式运行，如果当前存在事务，则抛出异常</td>
</tr>
<tr>
<td align="center">PROPAGATION_NESTED</td>
<td align="center">如果存在当前事务，则在嵌套事务中执行，否则类似于 PROPAGATION_REQUIRED</td>
</tr>
</tbody></table>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ISOLATION_DEFAULT</td>
<td align="center">使用底层数据存储的默认隔离级别</td>
</tr>
<tr>
<td align="center">ISOLATION_READ_UNCOMMITTED</td>
<td align="center">允许读取尚未提交的更改，可能导致脏读、幻读和不可重复读</td>
</tr>
<tr>
<td align="center">ISOLATION_READ_COMMITTED</td>
<td align="center">允许读取已提交的并发事务，防止脏读，可能出现不可重复读和幻读，这是 Oracle 的默认级别</td>
</tr>
<tr>
<td align="center">ISOLATION_REPEATABLE_READ</td>
<td align="center">多次读取相同字段的结果是一致的，防止脏读和不可重复读，可能出现幻读，这是 MySQL 的默认级别</td>
</tr>
<tr>
<td align="center">ISOLATION_SERIALIZABLE</td>
<td align="center">最高代价但是最可靠的事务隔离级别，事务被处理为顺序执行，防止脏读、不可重复读和幻读</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA远程调试</title>
    <url>/2020/06/14/155351.html</url>
    <content><![CDATA[<blockquote>
<p>在本地开发过程中，对代码进行 Debug 能逐行对代码逻辑进行调试，方便排查问题，但是当代码发布到测试环境时，如果运行过程中出现异常，仅仅依靠日志来排查问题的话，会比较耗时，经常由于日志不全等原因而不能快速准确定位问题，而通过对 JAVA 代码进行远程 Debug 能很好的解决这个问题</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>注意：本地代码与远程代码需要保持一致</p>
</blockquote>
<h4 id="远程应用启动命令"><a href="#远程应用启动命令" class="headerlink" title="远程应用启动命令"></a>远程应用启动命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=5005 -jar xieZhongCrmAPI-1.0-SNAPSHOT.jar 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">-Xdebug：通知 JVM 在 Debug 模式下工作</span><br><span class="line">-Xrunjdwp：通知 JVM 使用（Java Debug Wire Protocol）来运行调试环境，参数同时有一系列的调试选项</span><br><span class="line">transport：用于监听 Socket 端口连接方式，常用的 dt_socket 表示使用 socket 连接</span><br><span class="line">server：是否支持在 Server 模式的 VM 中，=y 表示当前调试服务端，=n 表示当前调试客户端</span><br><span class="line"><span class="built_in">suspend</span>：是否在调试客户端建立起来后，再执行 JVM，=n 表示启动时不中断</span><br><span class="line">address：调试服务器的端口号，客户端用来连接服务器的端口号</span><br></pre></td></tr></table></figure>

<h4 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已经开放的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=5005/tcp --permanent</span><br><span class="line"><span class="comment"># 重载入</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="配置并启动"><a href="#配置并启动" class="headerlink" title="配置并启动"></a>配置并启动</h4><p><img data-src="/../../../../upload/2020/06/idea-remote-debug-1-8de7707cff49428b9341347ee6a121ee.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2020/06/idea-remote-debug-2-7a0d3f2b7f474129b6fbd92d8c3e7cf5.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2020/06/idea-remote-debug-3-54256104d00c40baa6b16559730faea9.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合OpenAPI3</title>
    <url>/2020/09/11/231637.html</url>
    <content><![CDATA[<blockquote>
<p>文档：<a href="https://springdoc.org/">https://springdoc.org</a><br>  源码：<a href="https://github.com/springdoc/springdoc-openapi">https://github.com/springdoc/springdoc-openapi</a></p>
</blockquote>
<span id="more"></span>

<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">publicApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;springbootdemo-public&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/public/**&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">adminApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;springbootdemo-admin&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">openAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(info())</span><br><span class="line"><span class="comment">//                .externalDocs(externalDocumentation())</span></span><br><span class="line">                .components(components())</span><br><span class="line">                .security(Lists.newArrayList(<span class="keyword">new</span> <span class="title class_">SecurityRequirement</span>().addList(<span class="string">&quot;Authorization&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExternalDocumentation <span class="title function_">externalDocumentation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">                .description(<span class="string">&quot;SpringShop Wiki Documentation&quot;</span>)</span><br><span class="line">                .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Components <span class="title function_">components</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Components</span>()</span><br><span class="line">                .addSecuritySchemes(<span class="string">&quot;Authorization&quot;</span>, <span class="keyword">new</span> <span class="title class_">SecurityScheme</span>()</span><br><span class="line">                        .type(SecurityScheme.Type.HTTP)</span><br><span class="line">                        .scheme(<span class="string">&quot;bearer&quot;</span>)</span><br><span class="line">                        .bearerFormat(<span class="string">&quot;JWT&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Info <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                .title(<span class="string">&quot;springbootdemoAPI&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;springbootdemoAPI相关文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;v1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>()</span><br><span class="line">                        .name(<span class="string">&quot;开心&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                        .email(<span class="string">&quot;chenkaixin12121@163.com&quot;</span>))</span><br><span class="line">                .license(<span class="keyword">new</span> <span class="title class_">License</span>()</span><br><span class="line">                        .name(<span class="string">&quot;Apache 2.0&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://opensource.org/licenses/Apache2.0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/api-docs</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/doc.html</span></span><br><span class="line">    <span class="attr">display-request-duration:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">groups-order:</span> <span class="string">DESC</span></span><br><span class="line">    <span class="attr">operationsSorter:</span> <span class="string">method</span></span><br><span class="line">    <span class="attr">disable-swagger-default-url:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">use-root-path:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;用户信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户名&quot;, required = true, minLength = 6, maxLength = 20)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;密码&quot;, required = true, minLength = 6, maxLength = 20)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;是否删除&quot;, hidden = true, allowableValues = &#123;&quot;0&quot;, &quot;1&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tag(name = &quot;admin&quot;, description = &quot;管理接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;测试方法&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/sayHello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(<span class="meta">@Parameter(description = &quot;名称&quot;, in = ParameterIn.QUERY)</span> <span class="meta">@RequestParam(required = false, defaultValue = &quot;chenkaixin12121&quot;)</span> String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;获取当前用户&quot;, security = &#123;@SecurityRequirement(name = &quot;Authorization&quot;)&#125;)</span></span><br><span class="line">    <span class="meta">@ApiResponses(value = &#123;</span></span><br><span class="line"><span class="meta">            @ApiResponse(responseCode = &quot;200&quot;, description = &quot;请求成功&quot;, content = &#123;@Content(mediaType = &quot;application/json&quot;, schema = @Schema(implementation = User.class))&#125;),</span></span><br><span class="line"><span class="meta">            @ApiResponse(responseCode = &quot;400&quot;, description = &quot;客户端参数错误&quot;, content = @Content),</span></span><br><span class="line"><span class="meta">            @ApiResponse(responseCode = &quot;404&quot;, description = &quot;请求路径不存在&quot;, content = @Content)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/getUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;chenkaixin12121&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tag(name = &quot;public&quot;, description = &quot;公共接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/public&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;测试方法&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/sayHello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(<span class="meta">@ParameterObject</span> UserQuery userQuery)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>OpenAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ消息可靠性投递</title>
    <url>/2020/09/25/003042.html</url>
    <content><![CDATA[<blockquote>
<p>源码（已改用延迟队列插件）：<a href="https://github.com/chenkaixin12121/rabbit-reliability">https://github.com/chenkaixin12121/rabbit-reliability</a></p>
</blockquote>
<span id="more"></span>

<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><img data-src="/../../../../upload/2020/09/image-1f412ceebd7248f2b75d683efb6033e9.png" alt="image.png"></p>
<h5 id="消息可靠性投递步骤"><a href="#消息可靠性投递步骤" class="headerlink" title="消息可靠性投递步骤"></a>消息可靠性投递步骤</h5><p>如何保证 RabbitMQ 可靠性投递，本文主要分为以下几个步骤进行：</p>
<ol>
<li>生成数据库消息日志，状态为投递中，再把消息放入队列</li>
<li>根据 confirm（ConfirmCallback 和 ReturnCallback）的结果来确定消息是否投递成功，投递成功的，修改投递状态为发送成功，投递失败的消息由定时任务定期扫描并重新投递</li>
<li>定时任务重新投递发送失败的消息，如果投递次数达过阈值后还是发送失败，设置投递状态为发送失败，由人工进行检查</li>
<li>消费者取到消息后，从消息中取出唯一标识，先判断此消息有没有被消费过，若已消费过，则直接 ack（避免重复消费）</li>
<li>正常处理成功后，修改投递状态为消费成功，并 ack</li>
<li>遇到异常时，捕获异常，验证消息重试次数是否达到阈值，超过则修改投递状态为消费失败，由人工进行处理</li>
</ol>
<h5 id="消息投递的顺序"><a href="#消息投递的顺序" class="headerlink" title="消息投递的顺序"></a>消息投递的顺序</h5><ol>
<li>Producer -&gt; RabbitMQ Broker Cluster -&gt; Exchange -&gt; Queue -&gt; Consumer</li>
<li>Message 从 Producer 到 RabbitMQ Broker Cluster 会返回一个 ConfirmCallback</li>
<li>Message 从 Exchange 到 Queue 投递失败则会返回一个 ReturnCallback，我们使用这两个 Callback 来控制消息的最终一致性和部分纠错能力</li>
</ol>
<h5 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h5><p>没有被及时消费的消息存放的队列被称为死信队列，消息没有被及时消费有以下几点原因：</p>
<ol>
<li>消息被拒绝（basic.reject &#x2F; basic.nack）并且不再重新投递（requeue &#x3D; false）</li>
<li>TTL（Time-To-Live）消息超时未消费</li>
<li>达到最大队列长度</li>
</ol>
<p>使用死信队列实现延迟消息：将正常的业务队列或者是需要延迟处理的队列添加 x-message-ttl 和 x-dead-letter-exchange 等参数，这样当触发死信的条件后，就会转发到死信交换器，就由监听 dlx.queue 死信队列的程序进行相应业务处理了</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="comment"># 发送者开启 confirm 确认机制</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment"># 发送者开启 return 确认机制，要和 mandatory 一起使用</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="comment"># 设置消费端需要手动 ack,默认为 auto</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">        <span class="comment"># 一次处理的消息数量</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">2</span></span><br><span class="line">        <span class="comment"># 消费端最大并发数</span></span><br><span class="line">        <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">MSG_TIMEOUT</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 消息超时时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">MAX_TRY_COUNT</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 最大重试次数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_MSG_LOG</span> <span class="operator">=</span> <span class="string">&quot;order_msg_log&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAIL_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ckx.mail.queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAIL_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ckx.mail.exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAIL_ROUTING_KEY_NAME</span> <span class="operator">=</span> <span class="string">&quot;ckx.mail.routing.key&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RETRY_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ckx.retry.queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RETRY_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ckx.retry.exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RETRY_ROUTING_KEY_NAME</span> <span class="operator">=</span> <span class="string">&quot;ckx.retry.routing.key&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">RETRY_TTL</span> <span class="operator">=</span> <span class="number">5000</span>; <span class="comment">// 在延迟队列的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">MSG_DELIVER_SUCCESS</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 发送成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">MSG_DELIVER_FAIL</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// 发送失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">MSG_CONSUMED_SUCCESS</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 消费成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">MSG_CONSUMED_FAIL</span> <span class="operator">=</span> <span class="number">4</span>; <span class="comment">// 消费失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CachingConnectionFactory cachingConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IMsgLogService msgLogService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RabbitConfig</span><span class="params">(CachingConnectionFactory cachingConnectionFactory, IMsgLogService msgLogService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cachingConnectionFactory = cachingConnectionFactory;</span><br><span class="line">        <span class="built_in">this</span>.msgLogService = msgLogService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">rabbitTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(cachingConnectionFactory);</span><br><span class="line">        rabbitTemplate.setMessageConverter(converter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * correlationData 唯一标识</span></span><br><span class="line"><span class="comment">         * ack 消息是否到达</span></span><br><span class="line"><span class="comment">         * cause 失败的异常消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> Objects.requireNonNull(correlationData).getId();</span><br><span class="line">            <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;消息成功发送到Exchange, msgId: &#123;&#125;&quot;</span>, msgId);</span><br><span class="line">                msgLogService.updateStatus(msgId, MSG_DELIVER_SUCCESS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;消息发送到Exchange失败, correlationData : &#123;&#125;, cause: &#123;&#125;&quot;</span>, correlationData, cause);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.setReturnsCallback(</span><br><span class="line">                returnedMessage -&gt;</span><br><span class="line">                        log.info(<span class="string">&quot;消息从Exchange路由到Queue失败: exchange: &#123;&#125;, routingKey: &#123;&#125;, replyCode: &#123;&#125;, replyText: &#123;&#125;, message: &#123;&#125;&quot;</span>,</span><br><span class="line">                                returnedMessage.getExchange(), returnedMessage.getRoutingKey(), returnedMessage.getReplyCode(),</span><br><span class="line">                                returnedMessage.getReplyText(), returnedMessage.getMessage()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Jackson2JsonMessageConverter <span class="title function_">converter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">mailExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder</span><br><span class="line">                .directExchange(MAIL_EXCHANGE_NAME)</span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">retryExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder</span><br><span class="line">                .directExchange(RETRY_EXCHANGE_NAME)</span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">mailQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MAIL_QUEUE_NAME, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 经过延迟时间后，将该消息重新投递到对应的 Exchange 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">retryQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder</span><br><span class="line">                .durable(RETRY_QUEUE_NAME)</span><br><span class="line">                .withArgument(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, MAIL_ROUTING_KEY_NAME)</span><br><span class="line">                .withArgument(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, MAIL_EXCHANGE_NAME)</span><br><span class="line">                .withArgument(<span class="string">&quot;x-message-ttl&quot;</span>, RETRY_TTL)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">mailBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(mailQueue()).to(mailExchange()).with(MAIL_ROUTING_KEY_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">retryBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(retryQueue()).to(retryExchange()).with(RETRY_ROUTING_KEY_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MsgLogMapper msgLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MailProducer</span><span class="params">(MsgLogMapper msgLogMapper, RabbitTemplate rabbitTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msgLogMapper = msgLogMapper;</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Mail mail)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> JsonUtil.toJson(mail);</span><br><span class="line">        <span class="type">MsgLog</span> <span class="variable">msgLog</span> <span class="operator">=</span> MsgLog.builder()</span><br><span class="line">                .msgId(msgId)</span><br><span class="line">                .msg(msg)</span><br><span class="line">                .exchange(MAIL_EXCHANGE_NAME)</span><br><span class="line">                .routingKey(MAIL_ROUTING_KEY_NAME)</span><br><span class="line">                .nextTryTime(LocalDateTime.now().plusMinutes(MSG_TIMEOUT))</span><br><span class="line">                .createTime(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line">        msgLogMapper.insert(msgLog); <span class="comment">// 消息入库</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withBody(Objects.requireNonNull(msg).getBytes()).build();</span><br><span class="line">        <span class="type">MessageProperties</span> <span class="variable">messageProperties</span> <span class="operator">=</span> message.getMessageProperties();</span><br><span class="line">        messageProperties.setDeliveryMode(MessageDeliveryMode.PERSISTENT); <span class="comment">// 消息持久化</span></span><br><span class="line">        messageProperties.setContentType(MessageProperties.CONTENT_TYPE_JSON); <span class="comment">// JSON</span></span><br><span class="line">        rabbitTemplate.convertAndSend(MAIL_EXCHANGE_NAME, MAIL_ROUTING_KEY_NAME, message, <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(msgId)); <span class="comment">// 发送消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MailService mailService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IMsgLogService msgLogService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MailConsumer</span><span class="params">(StringRedisTemplate redisTemplate, MailService mailService, IMsgLogService msgLogService, RabbitTemplate rabbitTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.mailService = mailService;</span><br><span class="line">        <span class="built_in">this</span>.msgLogService = msgLogService;</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = MAIL_QUEUE_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handler</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Mail</span> <span class="variable">mail</span> <span class="operator">=</span> JsonUtil.fromJson(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()), <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Mail&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">MessageProperties</span> <span class="variable">messageProperties</span> <span class="operator">=</span> message.getMessageProperties();</span><br><span class="line">        Map&lt;String, Object&gt; headers = messageProperties.getHeaders();</span><br><span class="line">        <span class="type">long</span> <span class="variable">tag</span> <span class="operator">=</span> messageProperties.getDeliveryTag();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> (String) headers.get(<span class="string">&quot;spring_returned_message_correlation&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">retryCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (headers.containsKey(<span class="string">&quot;x-death&quot;</span>)) &#123;</span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; deathList = (List&lt;Map&lt;String, Object&gt;&gt;) headers.get(<span class="string">&quot;x-death&quot;</span>);</span><br><span class="line">            retryCount = (<span class="type">long</span>) deathList.get(<span class="number">0</span>).get(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.opsForSet().isMember(ORDER_MSG_LOG, msgId)) &#123;</span><br><span class="line">            <span class="comment">// redis中包含该key,说明此消息已经被消费过</span></span><br><span class="line">            log.info(<span class="string">&quot;消息已经被消费, msgId: &#123;&#125;&quot;</span>, msgId);</span><br><span class="line">            <span class="comment">// 确认消息已消费</span></span><br><span class="line">            channel.basicAck(tag, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 发送邮件</span></span><br><span class="line">            mailService.send(mail);</span><br><span class="line">            msgLogService.updateStatus(msgId, MSG_CONSUMED_SUCCESS);</span><br><span class="line">            redisTemplate.opsForSet().add(ORDER_MSG_LOG, msgId);</span><br><span class="line">            channel.basicAck(tag, <span class="literal">false</span>);</span><br><span class="line">            log.info(<span class="string">&quot;发送邮件成功，msgId: &#123;&#125;&quot;</span>, msgId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            channel.basicNack(tag, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (retryCount &lt; MAX_TRY_COUNT) &#123;</span><br><span class="line">                <span class="comment">// 发送到延迟队列</span></span><br><span class="line">                rabbitTemplate.send(RETRY_EXCHANGE_NAME, RETRY_ROUTING_KEY_NAME, message, <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(msgId));</span><br><span class="line">                log.info(<span class="string">&quot;发送邮件失败，进入第&#123;&#125;次重试，msgId: &#123;&#125;&quot;</span>, retryCount + <span class="number">1</span>, msgId);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                msgLogService.updateStatus(msgId, MSG_CONSUMED_FAIL);</span><br><span class="line">                log.info(<span class="string">&quot;发送邮件失败，达到最大重试次数，msgId: &#123;&#125;&quot;</span>, msgId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="如何保证消息的幂等性"><a href="#如何保证消息的幂等性" class="headerlink" title="如何保证消息的幂等性"></a>如何保证消息的幂等性</h5><p>当消费者消费完消息时，在给生产端返回 ack 时由于网络中断，导致生产端未收到确认信息，该条消息会重新发送并被消费者消费，但实际上该消费者已成功消费了该条消息，这就是重复消费问题  </p>
<p>解决方案：</p>
<ol>
<li>使用全局唯一 ID，只要消费过该消息就存储过 Redis 中，开始消费前，先去 Redis 中查询有没消费记录即可</li>
<li>利用 Redis 的原子性去实现，可以使用 setNX 命令，执行成功就表示没有处理过这条消息，可以进行消费</li>
</ol>
<h5 id="手动应答机制"><a href="#手动应答机制" class="headerlink" title="手动应答机制"></a>手动应答机制</h5><p>手动 ack 机制下，只要没有明确告诉 RabbitMQ 消息被消费，没有 ack，消息就一直是 unacked 状态，即使 consumer 宕机，消息不会丢失，会变为 ready 状态，下次一有新的 consumer 连接进来就会发给它 </p>
<ul>
<li>basicAck：确认一个或多个接收的消息  </li>
<li>basicNack：拒绝一个或多个接收的消息，可以设置 requeue 是否重回队列  </li>
<li>basicReject：拒绝一个消息，其他同上</li>
</ul>
<h4 id="失败消息重新投递"><a href="#失败消息重新投递" class="headerlink" title="失败消息重新投递"></a>失败消息重新投递</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResendMsgTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IMsgLogService msgLogService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/20 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resend</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务 -&gt; 重新投递消息 -&gt; 开始&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;MsgLog&gt; msgLogList = msgLogService.selectTimeoutMsg();</span><br><span class="line">        msgLogList.forEach(</span><br><span class="line">                msgLog -&gt; &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> msgLog.getMsgId();</span><br><span class="line">                    <span class="keyword">if</span> (msgLog.getTryCount() &gt;= MAX_TRY_COUNT) &#123;</span><br><span class="line">                        <span class="comment">// 设置该条消息发送失败</span></span><br><span class="line">                        msgLogService.updateStatus(msgId, MSG_DELIVER_FAIL);</span><br><span class="line">                        log.info(<span class="string">&quot;超过最大重试次数，消息投递失败，msgId: &#123;&#125;&quot;</span>, msgId);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        msgLogService.updateTryCount(msgId, msgLog.getNextTryTime());</span><br><span class="line">                        rabbitTemplate.convertAndSend(msgLog.getExchange(), msgLog.getRoutingKey(), msgLog.getMsg(), <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(msgId));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;任务结束 &lt;- 重新投递消息 &lt;- 结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><p>消费者消费消息的时候抛出异常，由于 设置 basicNack（重回队列）为 true，消息回滚到消息队列的时候不会回到队列尾部，而是仍是在队列头部，这时消费者又立即接收到这条消息进行处理，接着抛出异常，进行回滚，造成死循环  </p>
<p>解决方案：无论消费是否成功，都必须对 channel 进行应答，使用 nack 时设置 requeue 为 false，抛出异常后进入延迟队列进行重试机制，达到阈值时修改投递状态为消费失败，不再重试</p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器消息推送-WebSocket</title>
    <url>/2020/08/14/205611.html</url>
    <content><![CDATA[<blockquote>
<p>在做 Web 系统时，经常会遇到一些需要服务端主动向客户端发送通知的场景，一般我们可以使用轮询来查询服务端信息，但是这样会对服务器造成较大的压力，对于以上问题，我们可以使用 WebSocket 或者 SSE 来解决</p>
</blockquote>
<blockquote>
<p>WebSocket：基于 TCP 的一种网络协议，它实现了浏览器与服务器全双工通信，而且数据格式比较轻量，性能开销小，不用频繁创建及销毁 TCP 请求</p>
</blockquote>
<span id="more"></span>

<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">getServerEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/websocket/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(<span class="meta">@PathParam(&quot;userId&quot;)</span> Integer userId, Session session)</span> &#123;</span><br><span class="line">        WebSocketUtil.userCache.put(userId, session);</span><br><span class="line">        WebSocketUtil.sendMsg(userId, <span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;有新连接加入，当前连接数为：&quot;</span> + WebSocketUtil.userCache.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(<span class="meta">@PathParam(&quot;userId&quot;)</span> Integer userId, Session session)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;关闭连接异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        WebSocketUtil.sendMsg(userId, <span class="string">&quot;关闭连接&quot;</span>);</span><br><span class="line">        WebSocketUtil.userCache.remove(userId);</span><br><span class="line">        log.info(<span class="string">&quot;有一个连接关闭，当前连接数为：&quot;</span> + WebSocketUtil.userCache.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(<span class="meta">@PathParam(&quot;userId&quot;)</span> Integer userId, String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;收到来自用户：[&#123;&#125;]的消息：&#123;&#125;&quot;</span>, userId, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Session session, Throwable error)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(<span class="string">&quot;连接异常：&#123;&#125;&quot;</span>, error.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, Session&gt; userCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendAllMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        userCache.forEach((k, v) -&gt; sendMsg(k, msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(Integer userId, String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息：&#123;&#125;，到用户：[&#123;&#125;]&quot;</span>, msg, userId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userCache.get(userId).getBasicRemote().sendText(msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发送消息失败：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId, <span class="meta">@RequestParam</span> String msg)</span> &#123;</span><br><span class="line">        WebSocketUtil.sendMsg(userId, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="meta">@RequestParam</span> String msg)</span> &#123;</span><br><span class="line">        WebSocketUtil.sendAllMsg(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/onlineUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">onlineUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> WebSocketUtil.userCache.keySet().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>websocket测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> ws;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080/websocket/1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">printMsg</span>(<span class="string">&quot;onOpen&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">printMsg</span>(<span class="string">&quot;onMessage: &quot;</span> + e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">printMsg</span>(<span class="string">&quot;onClose&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            ws.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">printMsg</span>(<span class="string">&quot;onError&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          ws.<span class="title function_">send</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">printMsg</span>(<span class="string">&quot;sendMessage: &quot;</span> + input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            input.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onCloseClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            ws.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">printMsg</span>(<span class="params">str</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> log = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;log&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          log.<span class="property">innerHTML</span> = str + <span class="string">&quot;&lt;br&gt;&quot;</span> + log.<span class="property">innerHTML</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;init();&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;onSubmit(); return false;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;send&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onCloseClick(); return false;&quot;</span>&gt;</span>close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li>启动项目</li>
<li>复制 html 文件，socket1.html 和 socket2.html，修改各自的 userId（项目地址后面）</li>
<li>打开文件后服务器日志输出</li>
</ol>
<p><img data-src="/../../../../upload/2021/09/image-bb041d75f86e4ce3bca243b8dbb033dd.png" alt="image.png"></p>
<ol start="4">
<li>页面输入文本后点击 send，服务器日志输出</li>
</ol>
<p><img data-src="/../../../../upload/2021/09/image-426d4e640044419cb05c300bc73f5122.png" alt="image.png"></p>
<ol start="5">
<li>指定用户发送消息：<a href="http://localhost:8080/send/1?msg=%E6%B6%88%E6%81%AF1">http://localhost:8080/send/1?msg=消息1</a></li>
</ol>
<p><img data-src="/../../../../upload/2021/09/image-60bbd8102a8f4c4aaf98736c38a33158.png" alt="image.png"></p>
<ol start="6">
<li>群发消息：<a href="http://localhost:8080/send?msg=%E6%B6%88%E6%81%AF222">http://localhost:8080/send?msg=消息222</a></li>
</ol>
<p><img data-src="/../../../../upload/2021/09/image-02748d4f9b9649bba5203821446a6bf2.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/09/image-b896fd511acd4f3a843332702deb9a66.png" alt="image.png"></p>
<ol start="7">
<li>查看在线用户：<a href="http://localhost:8080/onlineUser">http://localhost:8080/onlineUser</a></li>
</ol>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>消息推送</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器消息推送-SSE</title>
    <url>/2020/08/16/213441.html</url>
    <content><![CDATA[<blockquote>
<p>SSE（Server Sent Event）：服务器发送事件，客户端发起请求后，连接会一直保持，等待服务器发送数据，它与 WebSocket 的明显区别就是 SSE 是半双工的，只能服务端向客户端发送数据，优点是不需要其他的类库，开发难度较低，默认支持断线重连</p>
</blockquote>
<span id="more"></span>

<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SSEController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, SseEmitter&gt; sseCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/subscribe&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SseEmitter <span class="title function_">subscribe</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>(<span class="number">5</span> * <span class="number">60</span> * <span class="number">1000L</span>);</span><br><span class="line">        sseCache.put(userId, sseEmitter);</span><br><span class="line">        sseEmitter.onTimeout(() -&gt; sseCache.remove(userId));</span><br><span class="line">        sseEmitter.onCompletion(() -&gt; System.out.println(<span class="string">&quot;完成&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sseEmitter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Integer userId, String msg)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> sseCache.get(userId);</span><br><span class="line">        <span class="keyword">if</span> (sseEmitter != <span class="literal">null</span>) &#123;</span><br><span class="line">            sseEmitter.send(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/over&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">over</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> sseCache.get(userId);</span><br><span class="line">        <span class="keyword">if</span> (sseEmitter != <span class="literal">null</span>) &#123;</span><br><span class="line">            sseEmitter.complete();</span><br><span class="line">            sseCache.remove(userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>sse测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> source = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&#x27;http://localhost:8080/subscribe?userId=1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        source.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> log = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;log&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            log.<span class="property">innerHTML</span> = <span class="string">&quot;onMessage：&quot;</span> + event.<span class="property">data</span> + <span class="string">&quot;&lt;br&gt;&quot;</span> + log.<span class="property">innerHTML</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        source.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> log = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;log&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            log.<span class="property">innerHTML</span> = <span class="string">&quot;开启回调&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li>启动项目，打开前端文件</li>
<li>指定用户发送消息：<a href="http://localhost:8080/send?userId=1&msg=%E6%B5%8B%E8%AF%95%E6%B6%88%E6%81%AF222">http://localhost:8080/send?userId=1&amp;msg=测试消息222</a></li>
</ol>
<p><img data-src="/../../../../upload/2021/09/image-212488ee2a154abe98eef0c735d655bc.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>消息推送</tag>
        <tag>SSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis搭建主从，哨兵，集群</title>
    <url>/2020/10/08/224903.html</url>
    <content><![CDATA[<blockquote>
<p>Redis 搭建主从，哨兵，集群</p>
</blockquote>
<span id="more"></span>

<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>192.168.1.102 # master<br>192.168.1.103 # slave<br>192.168.1.104 # slave</p>
<h5 id="安装-gcc"><a href="#安装-gcc" class="headerlink" title="安装 gcc"></a>安装 gcc</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -v</span><br><span class="line"></span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-7-gcc*</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-7 bash</span><br></pre></td></tr></table></figure>

<h5 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.0.0.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/software</span><br><span class="line">tar -zxvf redis-6.0.0.tar.gz -C /data/software</span><br><span class="line"><span class="built_in">cd</span> /data/software/redis-6.0.0</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h5 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开放端口  </span></span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --add-port=16379/tcp --add-port=26379/tcp --add-port=6666/tcp --add-port=16666/tcp --add-port=6667/tcp --add-port=16667/tcp --permanent</span><br><span class="line"><span class="comment"># 重载入</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="comment"># 查看开放的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<h4 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h4><h5 id="主节点修改配置文件"><a href="#主节点修改配置文件" class="headerlink" title="主节点修改配置文件"></a>主节点修改配置文件</h5><p>vim redis.onf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭保护模式</span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="comment"># 外部可访问</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="comment"># 非只读 </span></span><br><span class="line">replica-read-only no</span><br><span class="line"><span class="comment"># 主节点密码，主备切换并重启旧的主节点后，不加密码可能导致连不上当前主节点</span></span><br><span class="line">masterauth 123456</span><br><span class="line"><span class="comment"># 禁用一些命令</span></span><br><span class="line">rename-command FLUSHALL <span class="string">&quot;&quot;</span></span><br><span class="line">rename-command FLUSHDB <span class="string">&quot;&quot;</span></span><br><span class="line">rename-command KEYS <span class="string">&quot;&quot;</span></span><br><span class="line">rename-command CONFIG <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="从节点修改配置文件"><a href="#从节点修改配置文件" class="headerlink" title="从节点修改配置文件"></a>从节点修改配置文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="comment"># 只读</span></span><br><span class="line">replica-read-only <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 主节点信息</span></span><br><span class="line">replicaof 192.168.1.102 6379</span><br><span class="line"><span class="comment"># 主节点密码 </span></span><br><span class="line">masterauth 123456</span><br></pre></td></tr></table></figure>

<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line">192.168.1.102:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=192.168.1.104,port=6379,state=online,offset=728,lag=0</span><br><span class="line">slave1:ip=192.168.1.103,port=6379,state=online,offset=728,lag=0</span><br><span class="line">master_replid:12398d4f5835d83b667f6edc54b3880cf0c05ecc</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:728</span><br><span class="line">master_repl_meaningful_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:728</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主节点添加数据</span></span><br><span class="line">192.168.1.102:6379&gt; <span class="built_in">set</span> key1 value1</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从节点查看数据</span></span><br><span class="line">192.168.1.103:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;value1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从节点添加数据</span></span><br><span class="line">192.168.1.103:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">(error) READONLY You can<span class="string">&#x27;t write against a read only replica.</span></span><br></pre></td></tr></table></figure>

<h4 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h4><h5 id="哨兵核心功能"><a href="#哨兵核心功能" class="headerlink" title="哨兵核心功能"></a>哨兵核心功能</h5><ul>
<li>监控：哨兵会不断地检查主节点和从节点是否运作正常</li>
<li>自动故障转移：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点</li>
<li>配置提供者：客户端在初始化时，通过连接哨兵来获得当前Redis服务的主节点地址</li>
<li>通知：哨兵可以将故障转移的结果发送给客户端</li>
</ul>
<h5 id="哨兵选举过程"><a href="#哨兵选举过程" class="headerlink" title="哨兵选举过程"></a>哨兵选举过程</h5><ol>
<li>多个 sentinel 发现并确认 master 有问题</li>
<li>选出一个 sentinel 作为领导</li>
<li>选出一个 slave 作为 master</li>
<li>通知其余 slave 成为新的 master 的 slave</li>
<li>通知客户端主从变化</li>
<li>等待老的 master 复活成为新 master 的 slave</li>
</ol>
<h5 id="全部节点修改配置文件"><a href="#全部节点修改配置文件" class="headerlink" title="全部节点修改配置文件"></a>全部节点修改配置文件</h5><p>vim sentinel.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监控主节点，2 代表至少需要 2 个哨兵节点同意，才能判定主节点故障并进行故障转移</span></span><br><span class="line">sentinel monitor mymaster 192.168.1.102 6379 2</span><br><span class="line"><span class="comment"># 在指定的时间（毫秒），不能接受 ping 应答，则哨兵认为该节点处于宕机状态</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line"><span class="comment"># 指定故障切换允许的毫秒数，超过这个时间，就认为故障切换失败</span></span><br><span class="line">sentinel failover-timeout mymaster 60000</span><br><span class="line"><span class="comment"># 重新选举后，有几个从节点能同时从新的主节点同步缓存</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"><span class="comment"># 主节点密码</span></span><br><span class="line">sentinel auth-pass mymaster 123456</span><br></pre></td></tr></table></figure>

<h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><ol>
<li>启动三台机器的 redis 和 sentinel</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src/redis-server redis.conf</span><br><span class="line">src/redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看配置信息</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.1.102:26379&gt; info sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=192.168.1.102:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>关闭主节点 redis，几秒过后查看 sentinel 日志</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># +monitor master mymaster 192.168.1.102 6379 quorum 2</span></span><br><span class="line">* +slave slave 192.168.1.103:6379 192.168.1.103 6379 @ mymaster 192.168.1.102 6379</span><br><span class="line">* +slave slave 192.168.1.104:6379 192.168.1.104 6379 @ mymaster 192.168.1.102 6379</span><br><span class="line">* +sentinel sentinel 79d36f7254730a17297c52c0022c0d5058cef66f 192.168.1.103 26379 @ mymaster 192.168.1.102 6379</span><br><span class="line">* +sentinel sentinel 185b25bf694a703f8f685434da03e6b9dfd68d8d 192.168.1.104 26379 @ mymaster 192.168.1.102 6379</span><br><span class="line"><span class="comment"># +sdown master mymaster 192.168.1.102 6379</span></span><br><span class="line"><span class="comment"># +new-epoch 1</span></span><br><span class="line"><span class="comment"># +vote-for-leader 79d36f7254730a17297c52c0022c0d5058cef66f 1</span></span><br><span class="line"><span class="comment"># +odown master mymaster 192.168.1.102 6379 #quorum 3/2</span></span><br><span class="line"><span class="comment"># Next failover delay: I will not start a failover before Thu Oct 8 22:44:10 2020</span></span><br><span class="line"><span class="comment"># +config-update-from sentinel 79d36f7254730a17297c52c0022c0d5058cef66f 192.168.1.103 26379 @ mymaster 192.168.1.102 6379</span></span><br><span class="line"><span class="comment"># +switch-master mymaster 192.168.1.102 6379 192.168.1.103 6379</span></span><br><span class="line">* +slave slave 192.168.1.104:6379 192.168.1.104 6379 @ mymaster 192.168.1.103 6379</span><br><span class="line">* +slave slave 192.168.1.102:6379 192.168.1.102 6379 @ mymaster 192.168.1.103 6379</span><br><span class="line"><span class="comment"># +sdown slave 192.168.1.102:6379 192.168.1.102 6379 @ mymaster 192.168.1.103 6379</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>再次查看主节点，发现已经改变</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.1.102:26379&gt; sentinel get-master-addr-by-name mymaster</span><br><span class="line">1) <span class="string">&quot;192.168.1.103&quot;</span></span><br><span class="line">2) <span class="string">&quot;6379&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>重新启动之前的主节点，可以看到已经变成从节点了</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.1.102:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.1.102</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:427857</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:b557e5253593be5b9d2dc52491f5b37b461b8e94</span><br><span class="line">master_replid2:99e95a6c4b78e0a0b64090b43cf4546f5786b4d1</span><br><span class="line">master_repl_offset:427857</span><br><span class="line">master_repl_meaningful_offset:427857</span><br><span class="line">second_repl_offset:125759</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:43</span><br><span class="line">repl_backlog_histlen:427815</span><br></pre></td></tr></table></figure>

<h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><h5 id="安装-redis-1"><a href="#安装-redis-1" class="headerlink" title="安装 redis"></a>安装 redis</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.0.0.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/software/redisCluster</span><br><span class="line">tar -zxvf redis-6.0.0.tar.gz -C /data/software/redisCluster</span><br><span class="line"><span class="built_in">cd</span> /data/software/redisCluster</span><br><span class="line"><span class="built_in">mv</span> redis-6.0.0 6666</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cp</span> -r ../6666 ../6667</span><br></pre></td></tr></table></figure>

<h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/software/redisCluster/6666/redis.conf</span><br><span class="line">port 6666 <span class="comment"># 端口</span></span><br><span class="line">protected-mode no <span class="comment"># 关闭保护模式</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0 <span class="comment"># 外部可访问</span></span><br><span class="line">daemonize <span class="built_in">yes</span> <span class="comment"># 后台运行</span></span><br><span class="line">requirepass 123456 <span class="comment"># 密码</span></span><br><span class="line">replica-read-only no <span class="comment"># 非只读</span></span><br><span class="line">pidfile /var/run/redis_6666.pid</span><br><span class="line">cluster-enabled <span class="built_in">yes</span> <span class="comment"># 开启集群</span></span><br><span class="line">cluster-config-file nodes-6666.conf <span class="comment"># 集群节点配置文件</span></span><br><span class="line">cluster-node-timeout 5000 <span class="comment"># 集群超时时间</span></span><br><span class="line"></span><br><span class="line">vim /data/software/redisCluster/6667/redis.conf</span><br><span class="line">port 6667 <span class="comment"># 端口</span></span><br><span class="line">protected-mode no <span class="comment"># 关闭保护模式</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0 <span class="comment"># 外部可访问</span></span><br><span class="line">daemonize <span class="built_in">yes</span> <span class="comment"># 后台运行</span></span><br><span class="line">requirepass 123456 <span class="comment"># 密码</span></span><br><span class="line">replica-read-only no <span class="comment"># 非只读</span></span><br><span class="line">pidfile /var/run/redis_6667.pid</span><br><span class="line">cluster-enabled <span class="built_in">yes</span> <span class="comment"># 开启集群</span></span><br><span class="line">cluster-config-file nodes-6667.conf <span class="comment"># 集群节点配置文件</span></span><br><span class="line">cluster-node-timeout 5000 <span class="comment"># 集群超时时间</span></span><br></pre></td></tr></table></figure>

<h5 id="复制文件到其他服务器"><a href="#复制文件到其他服务器" class="headerlink" title="复制文件到其他服务器"></a>复制文件到其他服务器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /data/software/redisCluster root@192.168.1.103:/data/software/redisCluster</span><br><span class="line">scp -r /data/software/redisCluster root@192.168.1.104:/data/software/redisCluster</span><br></pre></td></tr></table></figure>

<h5 id="启动全部节点后执行命令创建集群"><a href="#启动全部节点后执行命令创建集群" class="headerlink" title="启动全部节点后执行命令创建集群"></a>启动全部节点后执行命令创建集群</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --cluster-replicas 1：为集群中的每个节点创建一个从节点</span></span><br><span class="line"><span class="comment"># -a 123456：指定密码</span></span><br><span class="line">[root@localhost 6667]<span class="comment"># src/redis-cli --cluster create 192.168.1.102:6666 192.168.1.103:6666 192.168.1.104:6666 192.168.1.102:6667 192.168.1.103:6667 192.168.1.104:6667 --cluster-replicas 1 -a 123456</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.1.103:6667 to 192.168.1.102:6666</span><br><span class="line">Adding replica 192.168.1.104:6667 to 192.168.1.103:6666</span><br><span class="line">Adding replica 192.168.1.102:6667 to 192.168.1.104:6666</span><br><span class="line">M: 9b4d69b96870637bf09450c45eaacf423aedafb6 192.168.1.102:6666</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 588f93f38d8e8937d2e458f32f130c8c5ca7a9f7 192.168.1.103:6666</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: ecb366aec1d0b7a709a55230d0488ca11bf56403 192.168.1.104:6666</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: cd237e96d59187e0472d103ce22d655bc23ca570 192.168.1.102:6667</span><br><span class="line">   replicates ecb366aec1d0b7a709a55230d0488ca11bf56403</span><br><span class="line">S: 382d9791ab78fca6b1e4b150324bad138b312848 192.168.1.103:6667</span><br><span class="line">   replicates 9b4d69b96870637bf09450c45eaacf423aedafb6</span><br><span class="line">S: e13a50aa9068480aa65b258791bf2ec885505f41 192.168.1.104:6667</span><br><span class="line">   replicates 588f93f38d8e8937d2e458f32f130c8c5ca7a9f7</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): <span class="built_in">yes</span></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to <span class="built_in">join</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.102:6666)</span><br><span class="line">M: 9b4d69b96870637bf09450c45eaacf423aedafb6 192.168.1.102:6666</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 588f93f38d8e8937d2e458f32f130c8c5ca7a9f7 192.168.1.103:6666</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: e13a50aa9068480aa65b258791bf2ec885505f41 192.168.1.104:6667</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 588f93f38d8e8937d2e458f32f130c8c5ca7a9f7</span><br><span class="line">M: ecb366aec1d0b7a709a55230d0488ca11bf56403 192.168.1.104:6666</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: cd237e96d59187e0472d103ce22d655bc23ca570 192.168.1.102:6667</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ecb366aec1d0b7a709a55230d0488ca11bf56403</span><br><span class="line">S: 382d9791ab78fca6b1e4b150324bad138b312848 192.168.1.103:6667</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9b4d69b96870637bf09450c45eaacf423aedafb6</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"></span><br><span class="line">[root@localhost 6667]<span class="comment"># redis-cli --cluster check 192.168.1.102:6666 -a 123456</span></span><br></pre></td></tr></table></figure>

<h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost 6667]<span class="comment"># src/redis-cli -h 192.168.1.102 -p 6666 -a 123456 -c</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.1.102:6666&gt; <span class="built_in">set</span> chen kaixin</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">[root@localhost 6667]<span class="comment"># src/redis-cli -h 192.168.1.103 -p 6666 -a 123456 -c</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">192.168.1.103:6666&gt; get chen</span><br><span class="line">-&gt; Redirected to slot [2419] located at 192.168.1.102:6666</span><br><span class="line"><span class="string">&quot;kaixin&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/2020/10/10/205409.html</url>
    <content><![CDATA[<blockquote>
<p>服务器接受大量请求时，使用线程池技术是非常合适的，它可以大大减少线程的创建和销毁次数，提高服务器的工作效率，实际在开发中，如果需要创建 5 个以上的线程，那么就可以使用线程池来管理</p>
</blockquote>
<span id="more"></span>

<h4 id="为什么要使用线程池"><a href="#为什么要使用线程池" class="headerlink" title="为什么要使用线程池"></a>为什么要使用线程池</h4><ul>
<li>反复创建线程开销大</li>
<li>过多的线程会占用太多内存</li>
</ul>
<h4 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h4><ul>
<li>加快响应速度</li>
<li>合理利用 CPU 和内存</li>
<li>统一管理</li>
</ul>
<h4 id="线程池构相关参数"><a href="#线程池构相关参数" class="headerlink" title="线程池构相关参数"></a>线程池构相关参数</h4><table>
<thead>
<tr>
<th align="center">参数名</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">corePoolSize</td>
<td align="center">核心线程数，线程池中保留的线程数，即使它们是空闲的也不会被终止，除非设置了 allowCoreThreadTimeOut</td>
</tr>
<tr>
<td align="center">maximumPoolSize</td>
<td align="center">最大线程数</td>
</tr>
<tr>
<td align="center">keepAliveTime</td>
<td align="center">保持存活时间，当线程数大于核心数时，这是多余的空闲线程在终止之前等待新任务的最大时间，如果设置了 allowCoreThreadTimeOut，则核心线程也会回收</td>
</tr>
<tr>
<td align="center">unit</td>
<td align="center">keepAliveTime 的时间单位</td>
</tr>
<tr>
<td align="center">workQueue</td>
<td align="center">任务存储队列，用于在任务执行之前保存它们的队列，这个队列将只保存由 execute 方法提交的 Runnable 任务</td>
</tr>
<tr>
<td align="center">threadFactory</td>
<td align="center">线程工厂，执行程序创建新线程时要使用的工厂</td>
</tr>
<tr>
<td align="center">handle</td>
<td align="center">拒绝策略，当执行因达到线程边界和队列容量而阻塞时要使用的处理程序</td>
</tr>
</tbody></table>
<h5 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h5><ul>
<li>SynchronousQueue：不存储元素的阻塞队列，直接把任务交给线程池的线程来执行，如果没有可用的线程则会拒绝任务，使用此阻塞队列一般要求 maximumPoolSizes 为无界，避免线程拒绝执行操作（每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态）</li>
<li>LinkedBlockingQueue：基于链表结构的无界阻塞队列，按 FIFO 排序任务，默认大小为 Integer.MAX_VALUE，为了避免队列过大，一般需要自定义队列的大小，此阻塞队列内部分别使用了 takeLock 和 putLock 对并发进行控制，也就是说，添加和删除操作并不是互斥操作，可以同时进行，这样也就可以大大提高吞吐量</li>
<li>LinkedBlockingDeque：使用双向队列实现的双端阻塞队列，双端意味着可以像普通队列一样 FIFO，可以像栈一样 FILO</li>
<li>ArrayBlockingQueue：基于数组结构的有界阻塞队列，按 FIFO 排序任务</li>
<li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列，优先级高的任务会被先执行，如果多个任务具有相同的优先级，就会按照插入的顺序执行</li>
<li>DelayQueue：使用优先级队列实现的无界阻塞队列，队列中每个元素都有过期时间，当从队列获取元素时，只有过期元素才会出队列，而队列头部的元素是过期最快的元素</li>
<li>DelayedWorkQueue：使用优先级队列实现的无界阻塞队列，它并没有像 DelayQueue 那样，将队列操作委托给 PriorityQueue，而是自己重新实现了一遍堆的核心操作（入队元素必须实现 RunnableScheduledFuture 接口）</li>
<li>LinkedTransferQueue：SynchronousQueue 和 LinkedBlockingQueue 的合体，性能比 LinkedBlockingQueue 更高（没有锁操作），比 SynchronousQueue能存储更多的元素，当 put 时，如果有等待的线程，就直接将元素交给等待者， 否则直接进入队列</li>
</ul>
<h5 id="threadFactory"><a href="#threadFactory" class="headerlink" title="threadFactory"></a>threadFactory</h5><ul>
<li>DefaultThreadFactory（默认）：创建的线程拥有相同优先级、非守护线程、有线程名称</li>
<li>PrivilegedThreadFactory：在 defaultThreadFactory 的基础上，可以让运行在这个线程中的任务拥有和这个线程相同的访问控制和 ClassLoader</li>
</ul>
<h5 id="handle"><a href="#handle" class="headerlink" title="handle"></a>handle</h5><ul>
<li>AbortPolicy：直接抛出异常，默认策略</li>
<li>CallerRunsPolicy：用调用者所在的线程来执行任务</li>
<li>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务</li>
<li>DiscardPolicy：直接丢弃任务</li>
</ul>
<h4 id="添加线程的规则"><a href="#添加线程的规则" class="headerlink" title="添加线程的规则"></a>添加线程的规则</h4><ul>
<li>如果线程小于 corePoolSize，即使其他工作线程处于空闲状态，也会创建一个新线程来运行新任务</li>
<li>如果线程等于（或大于）corePoolSize 但小于 maximumPoolSize，则将任务放入队列 </li>
<li>如果队列已满，并且线程数小于 maximumPoolSize，则创建一个新线程来运行任务</li>
<li>如果队列已满，并且线程数大于或等于 maxPoolSize，则使用拒绝策略</li>
</ul>
<h4 id="增减线程的特点"><a href="#增减线程的特点" class="headerlink" title="增减线程的特点"></a>增减线程的特点</h4><ul>
<li>通过设置 corePoolSize 和 maxPoolSize 相同，就可以创建固定大小的线程池</li>
<li>线程池希望保持较少的线程数，并且只有在负载变得很大时才增加它</li>
<li>通过设置 maxPoolSize 为很高的值，例如 Integer.MAX_VALUE，可以允许线程池容纳任意数量的并发任务</li>
<li>只有队列填满时才创建多于 corePoolSize 的线程，所以如果使用的是无界队列（例如 LinkedBlockingQueue）那么线程数就不会超过 corePoolSize</li>
</ul>
<h4 id="创建线程池方式"><a href="#创建线程池方式" class="headerlink" title="创建线程池方式"></a>创建线程池方式</h4><ul>
<li>ThreadPoolExecutor：最原始的创建线程池的方式</li>
<li>newFixedThreadPool：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待，由于传进去的 LinkedBlockingQueue 是没有容量上限的，所以当请求数越来越多，并且无法及时处理完毕的时候也就是请求堆积的时候，会容易造成占用大量的内存，可能会发生 OОM</li>
<li>newSingleThreadExecutor：创建单个线程数的线程池，即只创建唯一的工作者线程来执行任务，单工作线程最大的特点是可以保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的，和 newFixedThreadPool 的原理基本一样，只不过把线程数直接设置成了 1，所以这也会导致同样的问题，也就是当请求堆积的时候，可能会占用大量的内存</li>
<li>newCachedThreadPool：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程，这里的弊端在于第二个参数 maximumPoolSize 被设置为了 Integer.MAX_VALUE，这可能会创建数量非常多的线程甚至导致 OOM</li>
<li>newScheduledThreadPool：创建一个定长的线程池，而且支持定时的以及周期性的任务执行</li>
<li>newSingleThreadScheduledExecutor：创建一个单线程的可以执行延迟任务的线程池</li>
<li>newWorkStealingPool：创建一个具有抢占式操作的线程池</li>
</ul>
<h4 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h4><ul>
<li>execute：提交任务，交给线程池来执行</li>
<li>submit：提交任务，能够返回执行结果</li>
<li>getTaskCount：返回线程池已执行和未执行的任务总数</li>
<li>getCompletedTaskCount：已完成的任务数量</li>
<li>getPoolSize：线程池当前的线程数量</li>
<li>getActiveCount：线程池中正在执行任务的线程数量</li>
<li>shutdown：平滑的关闭 ExecutorService，当调用这个方法时，ExecutorService 会停止接受任何新的任务且等待已经提交的任务执行完成，当所有已经提交的任务执行完毕后将会关闭 ExecutorService</li>
<li>isShutdown：线程池是否关闭，当调用 shutdown() 方法后返回为true</li>
<li>isTerminated：判断线程池关闭后所有的任务是否都执行完了，所有提交的任务完成后返回为true</li>
<li>awaitTermination：两个参数，一个是 timeout 即超时时间，另一个是 unit 即时间单位，这个方法会使线程等待 timeout 时长，当超过 timeout 时间后，会监测 ExecutorService 是否已经关闭，若关闭则返回 true，否则返回 false</li>
<li>shutdownNow：强制关闭 ExecutorService，它将取消所有运行中的任务和在工作队列中等待的任务，这个方法返回一个 List 列表，列表中返回的是等待在工作队列中的任务</li>
</ul>
<h4 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h4><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-14_22-20-09-9385b0eaf4084b1686e8facd9f87abf1.png" alt="image.png"></p>
<ul>
<li>RUNNING：接受新任务并处理排队任务</li>
<li>SHUTDOWN：不接受新任务，但处理排队任务</li>
<li>STOP：不接受新任务，也不处理排队任务，并中断正在进行的任务</li>
<li>TIDYING：所有任务都已终止，workerCount 为 0 时，线程会转换到 TIDYING 状态，并将运行 terminate() 钩子方法</li>
<li>TERMINATED：terminate() 运行完成</li>
</ul>
<h4 id="线程池调优"><a href="#线程池调优" class="headerlink" title="线程池调优"></a>线程池调优</h4><ul>
<li>CPU 密集任务：N + 1</li>
<li>IO 密集任务：2N</li>
<li>混合型任务：N * U * (1 + WT&#x2F;ST)</li>
</ul>
<blockquote>
<p>N：CPU 核心数<br>  U：期望 CPU 利用率<br>  WT：线程等待时间<br>  ST：线程运行时间<br>  使用 jvisualvm 分析，点击抽样器，总时间-自用时间&#x3D;线程等待时间，自用时间&#x3D;线程运行时间</p>
</blockquote>
<p>参考：<a href="https://www.javacodegeeks.com/2012/03/threading-stories-about-robust-thread.html">https://www.javacodegeeks.com/2012/03/threading-stories-about-robust-thread.html</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Target queue memory usage (bytes): 100000</span><br><span class="line">createTask() produced ink.ckx.consurrency.threadPool.AsynchronousTask which took 40 bytes in a queue</span><br><span class="line">Formula: 100000 / 40</span><br><span class="line">* Recommended queue capacity (bytes): 2500</span><br><span class="line">Number of CPU: 16</span><br><span class="line">Target utilization: 1</span><br><span class="line">Elapsed time (nanos): 3000000000</span><br><span class="line">Compute time (nanos): 2968750000</span><br><span class="line">Wait time (nanos): 31250000</span><br><span class="line">Formula: 16 * 1 * (1 + 31250000 / 2968750000)</span><br><span class="line">* Optimal thread count: 16</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>锁</title>
    <url>/2020/10/18/212029.html</url>
    <content><![CDATA[<blockquote>
<p>锁</p>
</blockquote>
<span id="more"></span>

<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-03_23-21-01-9547a938c1e74c1e9d1f93b4780dff81.png" alt="image.png"></p>
<h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><h5 id="为什么每个对象都可以成为一把锁"><a href="#为什么每个对象都可以成为一把锁" class="headerlink" title="为什么每个对象都可以成为一把锁"></a>为什么每个对象都可以成为一把锁</h5><p>因为对象都继承了 Object，每个 Object 对象里 markOop.monitor() 都保存 ObjectMonitor 的对象，所以每个对象天生都带着一把对象监视器，即在对象头文件中存储了锁的相关信息</p>
<h5 id="synchronized-的缺点"><a href="#synchronized-的缺点" class="headerlink" title="synchronized 的缺点"></a>synchronized 的缺点</h5><ul>
<li>效率低：锁的释放情况少，试图获得锁时不能设置超时，不能中断一个正在试图获得锁的线程</li>
<li>不够灵活（读写锁更灵活）：加锁和释放的时机单一，每个锁仅有单一的条件（某个对象），可能是不够的</li>
<li>无法知道是否成功获取到锁</li>
</ul>
<h5 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h5><p>java 的线程是映射到操作系统原生线程之上的，如果要阻塞或唤醒一个线程就需要操作系统介入，需要在用户态与内核态之间切换，这种切换会消耗大量的系统资源，因为用户态与内核态都有各自专用的内存空间，专用的寄存器等<br>用户态切换至内核态需要传递给许多变量、参数给内核，内核也需要保护好用户态在切换时的一些寄存器值、变量等，以便内核态调用结束后切换回用户态继续工作</p>
<p>在 java 早期版本中，synchronized 属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的<br>挂起线程和恢复线程都需要转入内核态去完成，阻塞或唤醒一个 java 线程需要操作系统切换 CPU 状态来完成，这种状态切换需要耗费处理器时间<br>如果同步代码块中内容过于简单，这种切换的时间可能比用户代码执行的时间还长，时间成本相对较高，这也是为什么早期的 synchronized 效率低的原因<br>java6 之后，为了减少获得锁和释放锁所带来的性能消耗，引入了偏向锁和轻量级锁</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-26_23-08-12-a0b3ba7c68d744658ef1feacd4932e5c.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/12/synchronized-277089bbab1647faba4ed4090bb40ea0.png" alt="image.png"></p>
<h6 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h6><p>当一段同步代码一直被同一个线程多次访问，由于只有一个线程那么该线程在后续访问时便会自动获得锁，因为大多数多线程的情况下，锁不仅不存在多线程竞争，还存在锁由同一线程多次获得的情况，偏向锁就是在这种情况下出现的，它的出现是为了解决只有在一个线程执行同步时提高性能</p>
<p>理论落地：在实际应用运行过程中发现，“锁总是同一个线程持有，很少发生竞争”，也就是说锁总是被第一个占用它的线程拥有，这个线程就是锁的偏向线程<br>那么只需要在锁第一次被拥有的时候，记录下偏向线程 ID，这样偏向线程就一直持有着锁（后续这个线程进入和退出这段加了同步锁的代码块时，不需要再次加锁和释放锁，而是直接比较对象头里面是否存储了指向当前线程的偏向锁）<br>如果相等，表示偏向锁是偏向于当前线程的，就不需要再尝试获得锁了，直到竞争发生才释放锁，以后每次同步，检查锁的偏向线程 ID 与当前线程 ID 是否一致，如果一致直接进入同步，无需每次加锁解锁都去 CAS 更新对象头，如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高，假如不一致意味着发生了竞争，锁已经不是总是偏向于同一个线程了，这时候可能需要升级变为轻量级锁，才能保证线程间公平竞争锁<br>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的</p>
<p>技术实现：一个 synchronized 方法被一个线程抢到了锁时，那这个方法所在的对象就会在其所在的 Mark Word 中将偏向锁修改状态位，同时还会有占用前 54 位来存储线程指针作为标识，若该线程再次访问同一个 synchronized 方法时，该线程只需去对象头的 Mark Word 中去判断一下是否有偏向锁指向本身的 ID，无需再进入 Monitor 去竞争对象了<br>偏向锁在 java6 之后是默认开启的，但是启动时间有延迟，所以需要添加参数 -XX:BiasedLockingStartupDelay&#x3D;0，让其在程序启动时立刻启动<br>开启偏向锁：-XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay&#x3D;0<br>关闭偏向锁（程序默认进入轻量级锁状态）：-XX:-UseBiasedLocking</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-26_23-17-25-a4304a93a4874fe68eee2029b6327864.png" alt="image.png"></p>
<p>偏向锁的撤销：偏向锁使用一种等到竞争出现才释放锁的机制，只有当其他线程竞争锁时，持有偏向锁的原来线程才会被撤销，撤销需要等待全局安全点（该时间点上没有字节码正在执行），同时检查持有偏向锁的线程是否还在执行： </p>
<ul>
<li>第一个线程正在执行 synchronized 方法（处于同步块），它还没有执行完，其它线程来抢夺，该偏向锁会被取消掉并出现锁升级，此时轻量级锁由原持有偏向锁的线程持有，继续执行其同步代码，而正在竞争的线程会进入自旋等待获得该轻量级锁</li>
<li>第一个线程执行完成 synchronized 方法（退出同步块），则将对象头设置成无锁状态并撤销偏向锁，重新偏向</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-26_23-24-25-b4aea49132b24c5d99654ab03efd9826.png" alt="image.png"></p>
<h6 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h6><p>有线程来参与锁的竞争，但是获取锁的冲突时间极短，本质就是自旋锁，轻量级锁是为了在线程近乎交替执行同步块时提高性能</p>
<p>主要目的：在没有多线程竞争的前提下，通过 CAS 减少重量级锁使用操作系统互斥量产生的性能消耗，说白了先自旋再阻塞<br>升级时机：当关闭偏向锁功能或多线程竞争偏向锁会导致偏向锁升级为轻量级锁</p>
<p>假如线程 A 已经拿到锁，这时线程 B 又来抢该对象的锁，由于该对象的锁已经被线程 A 拿到，当前该锁已是偏向锁了，而线程 B 在争抢时发现对象头 Mark Word 中的线程 ID 不是线程 B 自己的线程 ID （而是线程 A），那线程 B 就会进行 CAS 操作希望能获得锁，此时线程 B 操作中有两种情况：</p>
<ul>
<li>如果锁获取成功，直接替换 Mark Word 中的线程 ID 为 B 自己的 ID(A → B)，重新偏向于其他线程(即将偏向锁交给其他线程，相当于当前线程”被”释放了锁)，该锁会保持偏向锁状态，A 线程结束，B 线程上位</li>
<li>如果锁获取失败，则偏向锁升级为轻量级锁，此时轻量级锁由原持有偏向锁的线程持有，继续执行其同步代码，而正在竞争的线程B会进入自旋等待获得该轻量级锁</li>
</ul>
<p>什么时候自旋结束：自适应，自适应意味着自旋的次数不是固定不变的，而是根据同一个锁上一次自旋的时间以及拥有锁线程的状态来决定</p>
<p>轻量锁与偏向锁的区别和不同：</p>
<ul>
<li>争夺轻量级锁失败时，自旋尝试抢占锁</li>
<li>轻量级锁每次退出同步块都需要释放锁，而偏向锁是在竞争发生时才释放锁</li>
</ul>
<h6 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h6><p>有大量的线程参与锁的竞争，冲突性很高，会使线程进行用户态到内核态的切换</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-26_23-50-20-f9c54623188148a68423fd677eed017b.png" alt="image.png"></p>
<h6 id="锁的对比"><a href="#锁的对比" class="headerlink" title="锁的对比"></a>锁的对比</h6><table>
<thead>
<tr>
<th align="center">锁</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">偏向锁</td>
<td align="center">加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距</td>
<td align="center">如果线程同存在锁竞争会带来额外的锁撤销的消耗</td>
</tr>
<tr>
<td align="center">轻量级锁</td>
<td align="center">竞争的线程不会阻塞，提高了程序的响应速度</td>
<td align="center">如果始终得不到锁竞争的线程，使用自旋会消耗 CPU</td>
</tr>
<tr>
<td align="center">重级锁</td>
<td align="center">线程竞争不使用自旋，不会消耗 CPU</td>
<td align="center">线程阻塞，响应时间缓慢</td>
</tr>
</tbody></table>
<ul>
<li>偏向锁：适用于单线程适用的情况，在不存在锁竞争的时候进入同步方法&#x2F;代码块则使用偏向锁</li>
<li>轻量级锁：适用于竞争较不激烈的情况（这和乐观锁的使用范围类似），存在竞争时升级为轻量级锁，轻量级锁采用的是自旋锁，如果同步方法&#x2F;代码块执行时间很短的话，采用轻量级锁虽然会占用 CPU 资源但是相对比使用重量级锁还是更高效</li>
<li>重量级锁：适用于竞争激烈的情况，如果同步方法或代码块执行时间很长，那么使用轻量级锁自旋带来的性能消耗就比使用重量级锁更严重，这时候就需要升级为重量级锁</li>
</ul>
<h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4><p>Lock 接口最常见的实现类是 ReentrantLock，通常情况下，Lock 只允许一个线程来访问这个共享资源，不过有的时候，一些特殊的实现也可允许并发访问，比如 ReadWriteLock 里面的 ReadLock<br>Lock 的加解锁和 synchronized 有同样的内存语义，也就是说下一个线程加锁后可以看到所有前一个线程解锁前发生的所有操作<br>Lock 并不是用来代替 synchronized 的，而是当使用 synchronized 不合适或不足以满足要求的时候，来提供高级功能的  </p>
<h5 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h5><ul>
<li>lock：最普通的获取锁，如果锁已被其他线程获取，则进行等待，Lock 不会像 synchronized 一样在异常时自动释放锁，因此最佳实践是，在 finally 中释放锁，以保证发生异常时锁一定被释放，lock() 方法不能被中断，这会带来很大的隐患：一旦陷入死锁 lock() 就会陷入永久等待</li>
<li>tryLock：用来尝试获取锁，如果当前锁没有被其他线程占用，则获取成功，则返回 true，否则返回 false，代表获取锁失败，相比于 lock()，这样的方法显然功能更强大了，我们可以根据是否能获取到锁来决定后续程序的行为，该方法会立即返回，即便在拿不到锁时不会一直等待</li>
<li>tryLock(long time, TimeUnit unit)：超时就放弃</li>
<li>lockInterruptibly：相当于 tryLock(long time, TimeUnit unit) 把超时时间设置为无限，在等待锁的过程中，线程可以被中断</li>
<li>unlock：解锁</li>
</ul>
<h4 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h4><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>在更新的时候，会对比之前修改的数据有没有被人改变过，如果没有则去修改数据，适合并发写入少，大部分都是读取的场景，不加锁能让读取性能大幅提高，一般使用 CAS 算法实现<br>例：原子类 和 并发容器  </p>
<h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p>每次修改数据时，就把数据锁住，适合并发写入多的情况，适用于临界区持锁时间比较长的情况，悲观锁可以避免大量的无用自旋等消耗<br>例：synchronized 和 lock  </p>
<h5 id="互斥同步锁（悲观锁）的劣势"><a href="#互斥同步锁（悲观锁）的劣势" class="headerlink" title="互斥同步锁（悲观锁）的劣势"></a>互斥同步锁（悲观锁）的劣势</h5><ul>
<li>阻塞和唤醒带来的性能劣势</li>
<li>永久阻塞：如果持有锁的线程被永久阻塞，比如遇到了无限循环、死锁等活跃性问题，那么等待该线程释放锁的那几个线程，将永远也得不到执行</li>
<li>优先级反转</li>
</ul>
<h5 id="互斥同步锁的典型情况"><a href="#互斥同步锁的典型情况" class="headerlink" title="互斥同步锁的典型情况"></a>互斥同步锁的典型情况</h5><ul>
<li>临界区有 IO 操作</li>
<li>临界区代码复杂或者循环量大</li>
<li>临界区竞争非常激烈</li>
</ul>
<h5 id="开销对比"><a href="#开销对比" class="headerlink" title="开销对比"></a>开销对比</h5><p>悲观锁的原始开销要高于乐观锁，但是特点是一劳永逸，临界区持锁时间就算越来越差，也不会对互斥锁的开销造成影响<br>相反，虽然乐观锁一开始的开销比悲观锁小，但是如果自旋时间很长或者不停重试，那么消耗的资源也会越来越多  </p>
<h4 id="可重入锁与非可重入锁"><a href="#可重入锁与非可重入锁" class="headerlink" title="可重入锁与非可重入锁"></a>可重入锁与非可重入锁</h4><p>可重入锁：同一个线程可以重复获取同一把锁，synchronized 和 ReentrantLock 都是可重入锁</p>
<h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><ul>
<li>避免死锁</li>
<li>提升封装性</li>
</ul>
<h5 id="主要方法-1"><a href="#主要方法-1" class="headerlink" title="主要方法"></a>主要方法</h5><ul>
<li>isHeldByCurrentThread：当前锁是否被当前线程持有</li>
<li>getQueueLength：返回当前正在等待这把锁的队列长度</li>
</ul>
<h4 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h4><p>公平指的是按照线程请求的顺序，来分配锁，非公平指的是，不完全按照请求的顺序，在一定情况下，可以插队<br>非公平也同样不提倡“插队”行为，这里的非公平，指的是“在合适的时机”插队，而不是盲目插队<br>tryLock() 不遵守设定的公平的规则</p>
<h5 id="非公平目的"><a href="#非公平目的" class="headerlink" title="非公平目的"></a>非公平目的</h5><ul>
<li>提高效率，不调用 hasQueuedPredecessors()，即不检查队列是否有在等待的线程</li>
<li>避免唤醒带来的空档期</li>
</ul>
<h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">优势</th>
<th align="center">劣势</th>
</tr>
</thead>
<tbody><tr>
<td align="center">公平锁</td>
<td align="center">各线程公平平等，每个线程在等待一段时间后，总有执行的机会</td>
<td align="center">更慢，吞吐量更小</td>
</tr>
<tr>
<td align="center">非公平锁</td>
<td align="center">更快，吞吐量更大</td>
<td align="center">有可能产生线程饥饿，也就是一些线程长时间内始终得不到执行</td>
</tr>
</tbody></table>
<h5 id="使用-lock-加锁两次，解锁一次会遇到什么情况"><a href="#使用-lock-加锁两次，解锁一次会遇到什么情况" class="headerlink" title="使用 lock 加锁两次，解锁一次会遇到什么情况"></a>使用 lock 加锁两次，解锁一次会遇到什么情况</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;外层&quot;</span>);</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;内层&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果一个线程的情况下，只解锁一次是可以的，但是多个线程同时用一把锁的情况下会造成死锁</p>
<h4 id="共享锁和排它锁"><a href="#共享锁和排它锁" class="headerlink" title="共享锁和排它锁"></a>共享锁和排它锁</h4><p>排他锁：又称为独占锁、独享锁<br>共享锁：又称为读锁，获得共享锁之后，可以查看但无法修改和删除数据，其他线程此时也可以获取到共享锁，也可以查看但无法修改和删除数据<br>共享锁和排它锁的典型是读写锁 ReentrantReadWriteLock，其中读锁是共享锁，写锁是独享锁</p>
<h5 id="读写锁的作用"><a href="#读写锁的作用" class="headerlink" title="读写锁的作用"></a>读写锁的作用</h5><p>在没有读写锁之前，我们假设使用 ReentrantLock，那么虽然我们保证了线程安全，但是也浪费了一定的资源，多个读操作同时进行，并没有线程安全问题<br>在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的，提高了程序的执行效率  </p>
<h5 id="读写锁的原则"><a href="#读写锁的原则" class="headerlink" title="读写锁的原则"></a>读写锁的原则</h5><ul>
<li>多个线程只申请读锁，都可以申请到</li>
<li>如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁</li>
<li>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁</li>
</ul>
<p>一句话总结：要么是一个或多个线程同时有读锁，要么是一个线程有写锁，但是两者不会同时出现（要么多读，要多一写）<br>读写锁的规则换一种思路更容易理解，读写锁只是一把锁，可以通过两种方式锁定，读锁定和写锁定，读写锁可以同时被一个或多个线程读锁定，也可以被单一线程写锁定，但是永远不能同时对这把锁进行读锁定和写锁定，这里是把“获取写锁”理解为“把读写锁进行写锁定”，相当于是换了一种思路，不过原则是不变的，就是要么是一个或多个线程同时有读锁（同时读锁定），要么是一个线程有写锁（进行写锁定），但是两者不会同时出现  </p>
<h5 id="读锁插队策略"><a href="#读锁插队策略" class="headerlink" title="读锁插队策略"></a>读锁插队策略</h5><table>
<thead>
<tr>
<th align="center">公平锁</th>
<th align="center">非公平锁</th>
</tr>
</thead>
<tbody><tr>
<td align="center">不允许插队</td>
<td align="center">写锁可以随时插队 <br> 读锁仅在等待队列头结点不是想获取写锁的线程的时候可以插队</td>
</tr>
</tbody></table>
<h5 id="升降级策略"><a href="#升降级策略" class="headerlink" title="升降级策略"></a>升降级策略</h5><p>只能降级不能升级（只能从写锁降级为读锁，不能从读锁升级为写锁）</p>
<h5 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h5><p>相比于 ReentrantLock 适用于一般场合，ReentrantReadWriteLock 适用于读多写少的情况，合理使用可以进一步提高并发效率</p>
<h4 id="自旋锁和阻塞锁"><a href="#自旋锁和阻塞锁" class="headerlink" title="自旋锁和阻塞锁"></a>自旋锁和阻塞锁</h4><p>阻塞或唤醒一个 Java 线程需要操作系统切换 CPU 状态来完成，这种状态转换需要耗费处理器时间，如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长，在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失<br>如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁，而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销，这就是自旋锁<br>阻塞锁和自旋锁相反，阻塞锁如果遇到没拿到锁的情况，会直接把线程阻塞，直到被唤醒</p>
<h5 id="自旋锁的缺点"><a href="#自旋锁的缺点" class="headerlink" title="自旋锁的缺点"></a>自旋锁的缺点</h5><p>如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源在自旋的过程中，一直消耗 CPU，所以虽然自旋锁的起始开销低于悲观锁，但是随着自旋时间的增长，开销也是线性增长的</p>
<h5 id="AtomicInteger-的实现"><a href="#AtomicInteger-的实现" class="headerlink" title="AtomicInteger 的实现"></a>AtomicInteger 的实现</h5><p>自旋锁的实现原理是 CAS，AtomicInteger 中调用 unsafe 进行自增操作，源码中的 do-while 循环就是一个自旋操作，如果修改过程中遇到其他线程竞争导致没修改成功，就在 while 里死循环，直至修改成功</p>
<h5 id="自旋锁的适用场景"><a href="#自旋锁的适用场景" class="headerlink" title="自旋锁的适用场景"></a>自旋锁的适用场景</h5><p>自旋锁一般用于多核的服务器，在并发度不是特别高的情况下，比阻塞锁的效率高，另外，自旋锁适用于临界区比较短小的情况，否则如果临界区很大（线程一旦拿到锁，很久以后才会释放），那也是不合适的</p>
<h4 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h4><p>在 Java 中，synchronized 是不可中断锁，而 Lock 是可中断锁，因为 tryLock(time) 和 lockInterruptibly() 都能响应中断<br>如果某一线程 A 正在执行锁中的代码，另一线程 B 正在等待获取该锁，可能由于等待时间过长，线程 B 不想等待了，想先处理其他事情，我们可以中断它，这种就是可中断锁</p>
<h4 id="如何优化锁和提高并发性能"><a href="#如何优化锁和提高并发性能" class="headerlink" title="如何优化锁和提高并发性能"></a>如何优化锁和提高并发性能</h4><ul>
<li>缩小同步代码块</li>
<li>尽量不要锁住方法</li>
<li>减少请求锁的次数</li>
<li>避免人为制造“热点”</li>
<li>锁中不要再包含锁</li>
<li>选择合适的锁及合适的工具类</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>并发容器</title>
    <url>/2020/10/28/214650.html</url>
    <content><![CDATA[<blockquote>
<p>并发容器</p>
</blockquote>
<span id="more"></span>

<h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><h5 id="如何保证并发安全"><a href="#如何保证并发安全" class="headerlink" title="如何保证并发安全"></a>如何保证并发安全</h5><p>ConcurrentHashMap 在 JDK8 的时候将 put() 方法中的分段锁 Segment 移除，转而采用一种 CAS 锁和 synchronized 来实现插入方法的线程安全<br>由于每一个 Node 的首节点都会被 synchronized 修饰，从而将一个元素的新增转化为一个原子操作，同时 Node 的 value 和 next 都是由 volatile 关键字进行修饰，从而可以保证可见性</p>
<h5 id="Hash-碰撞"><a href="#Hash-碰撞" class="headerlink" title="Hash 碰撞"></a>Hash 碰撞</h5><p>JDK8 是直接采用数组+链表+红黑树来实现，时间复杂度在 O(1) 和 O(n) 之间，如果链表转化为红黑树了，那么就是 O(1) 到 O(nlogn)，在这里值得一提的是，ConcurrentHashMap 会判断 tabAt(tab, i &#x3D; (n - 1) &amp; hash) 是不是 null，是的话就直接采用 CAS 进行插入，而如果不为空的话，则是 synchronized 锁住当前 Node 的首节点，这是因为当该 Node 不为空的时候，证明了此时出现了 Hash 碰撞，就会涉及到链表的尾节点新增或者红黑树的节点新增以及红黑树的平衡，这些操作自然都是非原子性的，从而导致无法使用 CAS，当 Node 的当前下标为 null 的时候，由于只是涉及数组的新增，所以用 CAS 即可</p>
<h5 id="为什么链表长度超过-8-会转为红黑树"><a href="#为什么链表长度超过-8-会转为红黑树" class="headerlink" title="为什么链表长度超过 8 会转为红黑树"></a>为什么链表长度超过 8 会转为红黑树</h5><p>默认是链表结构而不是红黑树，因为链表所占用的空间更少<br>链表长度想要达到 8 很困难，概率只有千万分之 6，如果极端情况发生，那么可以保证在这种极端情况下的查询效率</p>
<h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><p>写时复制容器：向容器添加一个元素时，先将当前的容器进行复制，生成一个新的容器，然后在向新的容器添加元素，之后再将原容器的引用指向新的容器，这保证了多线程下的并发性和一致性，但是当数据量比较大的时候，就需要考虑效率问题</p>
<h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><p>适用于读多写少的并发场景</p>
<h5 id="读写规则"><a href="#读写规则" class="headerlink" title="读写规则"></a>读写规则</h5><p>读取是完全不用加锁的，写入也不会阻塞读取操作，只有写入和写入之间需要进行同步等待</p>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>数据一致性问题：CopyOnWrite 容器只能保证数据的最终一致性，不能保证数据的实时一致性，所以如果你希望写入的数据能马上读取到，那么请不要使用 CopyOnWrite 容器</li>
<li>内存占用问题：因为 CopyOnWrite 容器的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存</li>
</ul>
<h5 id="写入时复制思想"><a href="#写入时复制思想" class="headerlink" title="写入时复制思想"></a>写入时复制思想</h5><p>写入时复制（CopyOnWrite，简称 COW）思想是计算机程序设计领域中的一种优化策略，其核心思想是，如果有多个调用者同时要求相同的资源（如内存或者是磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者视图修改资源内容时，系统才会真正复制一份专用副本给该调用者，而其他调用者所见到的最初的资源仍然保持不变，这过程对其他的调用者都是透明的，此做法主要的优点是如果调用者没有修改资源，就不会有副本被创建，因此多个调用者只是读取操作时可以共享同一份资源</p>
<h4 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h4><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">抛出异常</th>
<th align="center">特殊值</th>
<th align="center">阻塞</th>
<th align="center">超时</th>
</tr>
</thead>
<tbody><tr>
<td align="center">插入</td>
<td align="center">add(e)</td>
<td align="center">offer(e)</td>
<td align="center">put(e)</td>
<td align="center">offer(e,time,unit)</td>
</tr>
<tr>
<td align="center">移出</td>
<td align="center">remove()</td>
<td align="center">poll()</td>
<td align="center">task()</td>
<td align="center">poll(time,unit)</td>
</tr>
<tr>
<td align="center">检查</td>
<td align="center">element()</td>
<td align="center">peek()</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
</tbody></table>
<blockquote>
<p>当队列是空的时，从队列中获取元素的操作将会被阻塞，试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其他的线程往空的队列插入新的元素<br>  当队列是满时，往队列里添加元素的操作会被阻塞，试图往已满的阻塞队列中添加新元素的线程同样也会被阻塞，直到其他的线程使队列重新变得空闲起来</p>
</blockquote>
<h5 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h5><p>一个有边界的阻塞队列，它的内部实现是一个数组，有边界的意思是它的容量是有限的，我们必须在其初始化的时候指定它的容量大小，容量大小一旦指定就不可改变，创建的时候可以指定是否公平，默认非公平，如果保证公平的话，那么等待了最长时间的线程会被优先处理，不过这会同时带来一定的性能损耗</p>
<h5 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h5><p>阻塞队列大小的配置是可选的，如果我们初始化时指定一个大小，它就是有边界的，如果不指定，它就是无边界的，说是无边界，其实是采用了默认大小为 Integer.MAX_VALUE 的容量，它的内部实现是一个链表</p>
<h5 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h5><p>一个没有边界的队列（有界，快满时自动扩容，看似无界），它的排序规则和 java.util.PriorityQueue 一样，需要注意，PriorityBlockingQueue 中允许插入 null 对象，所有插入 PriorityBlockingQueue 的对象必须实现 java.lang.Comparable 接口，队列优先级的排序规则就是按照我们对这个接口的实现来定义的，另外，我们可以从 PriorityBlockingQueue 获得一个迭代器 Iterator，但这个迭代器并不保证按照优先级顺序进行迭代</p>
<h5 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h5><p>没有容量，是无缓冲等待队列，是一个不存储元素的阻塞队列，会直接将任务交给消费者，必须等队列中的添加元素被消费后才能继续添加新的元素，拥有公平（FIFO）和非公平（LIFO）策略，非公平策略会导致一些数据永远无法被消费的情况</p>
<h5 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h5><p>延迟队列，根据延迟时间排序，元素需要实现 Delayed 接口，规定排序规则</p>
<h4 id="非阻塞队列"><a href="#非阻塞队列" class="headerlink" title="非阻塞队列"></a>非阻塞队列</h4><h5 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h5><p>一个适用于高并发场景下的队列，通过无锁的方式，实现了高并发状态下的高性能，通常 ConcurrentLinkedQueue 性能好于 BlockingQueue，它是一个基于链接节点的无界线程安全队列，使用 CAS 非阻塞算法来实现线程安全(不具备阻塞功能），该队列的元素遵循先进先出的原则，头是最先加入的，尾是最近加入的，该队列不允许 null 元素</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>并发工具类</title>
    <url>/2020/10/29/213137.html</url>
    <content><![CDATA[<blockquote>
<p>并发工具类</p>
</blockquote>
<span id="more"></span>

<h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>它是一个同步辅助类，在计数到达 0 之前，使线程一直处于等待状态，直到计数结束，线程才继续工作</p>
<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p>一个线程等待多个线程都执行完毕，再继续自己的工作<br>多个线程等待某一个线程的信号，同时开始执行</p>
<h5 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h5><ul>
<li>CountDownLatch：仅有一个构造函数，参数 count 为需要倒数的数值</li>
<li>await：调用 await() 方法的线程会被挂起，它会等待直到 count 值为 0 才继续执行</li>
<li>countDown：将 count 值减 1，直到为 0 时，等待的线程会被唤起</li>
</ul>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：模拟100米跑步，5名选手都准备好了，只等裁判员一声令下，所有人同时开始跑步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">no</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;No.&quot;</span> + no + <span class="string">&quot;准备完毕，等待发令枪&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    begin.await();</span><br><span class="line">                    System.out.println(<span class="string">&quot;No.&quot;</span> + no + <span class="string">&quot;开始跑步了&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            service.submit(runnable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 裁判员检查发令枪</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发令枪响，比赛开始！&quot;</span>);</span><br><span class="line">        begin.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>CountDownLatch 是不能够重用的，如果需要重新计数，可以考虑使用 CyclicBarrier 或者创建新的 CountDownLatch 实例</p>
<h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>CyclicBarrier 和 CountDownLatch 很类似，都能阻塞一组线程<br>当有大量线程相互配合，分别计算不同任务，并且需要最后统一汇总的时候，我们可以使用 CyclicBarrier，它可以构造一个集结点，当某一个线程执行完毕，就会到集结点等待，直到所有线程都到了集结点，那么该栅栏就被撤销，所有线程再统一出发，继续执行剩下的任务</p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：集合点有5个人就出发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span>, () -&gt; System.out.println(<span class="string">&quot;所有人都到场了，大家统一出发&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(i, cyclicBarrier)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(<span class="type">int</span> id, CyclicBarrier cyclicBarrier)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="built_in">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + id + <span class="string">&quot;现在前往集合地点&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">10000</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;线程&quot;</span> + id + <span class="string">&quot;到了集合地点，开始等待其他人到达&quot;</span>);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程&quot;</span> + id + <span class="string">&quot;出发了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="和-CountDownLatch-的区别"><a href="#和-CountDownLatch-的区别" class="headerlink" title="和 CountDownLatch 的区别"></a>和 CountDownLatch 的区别</h5><ul>
<li>作用不同：CyclicBarrier 要等固定数量的线程都到达了栅栏位置才能继续执行，而 CountDownLatch 只需等待数字到 0，也就是说，CountDownLatch 用于事件，但是 CyclicBarrier 是用于线程的</li>
<li>可重用性不同：CountDownLatch 在倒数到 0 并触发门闩打开后，就不能再次使用了，除非新建新的实例，而 CyclicBarrier 可以重复使用</li>
</ul>
<h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>Semaphore（信号量）是用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用公共资源，当达到指定数量时，只能等待其他线程释放信号量</p>
<h5 id="主要方法-1"><a href="#主要方法-1" class="headerlink" title="主要方法"></a>主要方法</h5><ul>
<li>Semaphore：创建一个信号量，参数 permits 为许可证数量，fair 是否公平</li>
<li>tryAcquire：尝试获取许可证，参数 timeout 指定超时时间</li>
<li>acquire：获得许可证（如果有的话），然后立即返回，使可用许可证的数量减少一个</li>
<li>release：释放许可证</li>
</ul>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：同时只允许存在5个许可证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">5</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            service.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了许可证&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;释放了许可证&quot;</span>);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><ul>
<li>获取和释放的许可证数量必须一致，否则比如每次都获取 2 个但是只释放 1 个甚至不释放，随着时间的推移，到最后许可证数量不够用，会导致程序卡死，虽然信号量类并不对释放和获取的数量做规定，但是这是我们的编程规范，否则容易出错</li>
<li>注意在初始化 Semaphore 的时候设置公平性，一般设置为 true 会更合理</li>
<li>并不是必须由获取许可证的线程释放那个许可证，事实上，获取和释放许可证对线程并无要求，也许是 A 获取了，然后由 B 释放，只要逻辑合理即可</li>
<li>信号量的作用，除了控制临界区最多同时有 N 个线程访问外，另一个作用是可以实现“条件等待”，例如线程 1 需要在线程 2 完成准备工作后才能开始工作，那么就线程 1 获取许可证，而线程 2 完成任务后释放许可证，这样的话，相当于是轻量级的 CountDownLatch</li>
</ul>
<h4 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h4><p>如果说 Lock 用来代替 synchronized，那么 Condition 就是用来代替相对应的 Object.wait&#x2F;notify 的，所以在用法和性质上几乎都一样<br>await 方法会自动释放持有的 Lock 锁，和 Object 的 wait 一样，不需要自己手动释放锁<br>另外，调用 await 的时候，必须持有锁，否则会抛出异常，和 Object.wait 一样</p>
<h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：用Condition实现生产者消费者模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">queueSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(queueSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConditionDemo2</span> <span class="variable">conditionDemo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConditionDemo2</span>();</span><br><span class="line">        <span class="type">Producer</span> <span class="variable">producer</span> <span class="operator">=</span> conditionDemo2.<span class="keyword">new</span> <span class="title class_">Producer</span>();</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> conditionDemo2.<span class="keyword">new</span> <span class="title class_">Consumer</span>();</span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (queue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;队列空，等待数据&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            notEmpty.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    notFull.signalAll();</span><br><span class="line">                    System.out.println(<span class="string">&quot;从队列里取走了一个数据，队列剩余&quot;</span> + queue.size() + <span class="string">&quot;个元素&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (queue.size() == queueSize) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;队列满，等待有空余&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            notFull.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.offer(<span class="number">1</span>);</span><br><span class="line">                    notEmpty.signalAll();</span><br><span class="line">                    System.out.println(<span class="string">&quot;向队列插入了一个元素，队列剩余空间&quot;</span> + (queueSize - queue.size()));</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows常见问题整理</title>
    <url>/2020/11/07/210029.html</url>
    <content><![CDATA[<blockquote>
<p>Windows 常见问题整理</p>
</blockquote>
<span id="more"></span>

<h4 id="强行终止占用端口的进程"><a href="#强行终止占用端口的进程" class="headerlink" title="强行终止占用端口的进程"></a>强行终止占用端口的进程</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr 8080</span><br><span class="line">taskkill /f /pid 11240</span><br></pre></td></tr></table></figure>

<h4 id="强行结束指定应用"><a href="#强行结束指定应用" class="headerlink" title="强行结束指定应用"></a>强行结束指定应用</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">taskkill /f /im nginx.exe</span><br></pre></td></tr></table></figure>

<h4 id="查看激活时间"><a href="#查看激活时间" class="headerlink" title="查看激活时间"></a>查看激活时间</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Slmgr.vbs -xpr</span><br></pre></td></tr></table></figure>

<h4 id="您的主机不满足在启用-Hyper-V-或-Device-Credential-Guard-的情况下运行-VMware-Workstation-的最低要求"><a href="#您的主机不满足在启用-Hyper-V-或-Device-Credential-Guard-的情况下运行-VMware-Workstation-的最低要求" class="headerlink" title="您的主机不满足在启用 Hyper-V 或 Device&#x2F;Credential Guard 的情况下运行 VMware Workstation 的最低要求"></a>您的主机不满足在启用 Hyper-V 或 Device&#x2F;Credential Guard 的情况下运行 VMware Workstation 的最低要求</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">启用或关闭Windows功能，找到Hyper-V，把勾选去掉，选择不重启 </span><br><span class="line">以管理员身份运行Windows Powershell (管理员)（Windows键+X） </span><br><span class="line">bcdedit /set hypervisorlaunchtype off </span><br><span class="line">重启</span><br></pre></td></tr></table></figure>

<h4 id="提示你不能访问此共享文件夹，因为你组织的安全策略阻止未经身份验证的来宾访问"><a href="#提示你不能访问此共享文件夹，因为你组织的安全策略阻止未经身份验证的来宾访问" class="headerlink" title="提示你不能访问此共享文件夹，因为你组织的安全策略阻止未经身份验证的来宾访问"></a>提示你不能访问此共享文件夹，因为你组织的安全策略阻止未经身份验证的来宾访问</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gpedit.msc </span><br><span class="line">计算机配置-&gt;管理模板-&gt;网络-&gt;Lanman工作站 </span><br><span class="line">双击“启用不安全的来宾登录”，选择“已启用”</span><br></pre></td></tr></table></figure>

<h4 id="虚拟机-ping-不通主机，但是主机可以-ping-通虚拟机"><a href="#虚拟机-ping-不通主机，但是主机可以-ping-通虚拟机" class="headerlink" title="虚拟机 ping 不通主机，但是主机可以 ping 通虚拟机"></a>虚拟机 ping 不通主机，但是主机可以 ping 通虚拟机</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">打开防火墙</span><br><span class="line">选择高级设置</span><br><span class="line">入站规则</span><br><span class="line">找到配置文件类型为“公用”的“文件和打印共享（回显请求 – ICMPv4-In）”规则，设置为允许</span><br></pre></td></tr></table></figure>

<h4 id="将-Redis-注册为服务"><a href="#将-Redis-注册为服务" class="headerlink" title="将 Redis 注册为服务"></a>将 Redis 注册为服务</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">redis-server --service-install redis.windows.conf</span><br><span class="line">redis-server --service-start</span><br></pre></td></tr></table></figure>

<h4 id="cmd-控制台乱码"><a href="#cmd-控制台乱码" class="headerlink" title="cmd 控制台乱码"></a>cmd 控制台乱码</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">chcp 65001</span><br></pre></td></tr></table></figure>

<h4 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h4><p>生成密钥</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">keytool -genkey -alias jwt -keyalg RSA -keypass admin123456 -keystore jwt.jks -storepass admin123456</span><br><span class="line"></span><br><span class="line">-alias 别名</span><br><span class="line">-keyalg 密钥算法</span><br><span class="line">-keypass 密钥口令</span><br><span class="line">-keystore 生成密钥库的存储路径和名称</span><br><span class="line">-storepass 密钥库口令</span><br></pre></td></tr></table></figure>

<p>导出公钥</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">下载 OpenSSL：http://slproweb.com/products/Win32OpenSSL.html </span><br><span class="line">添加 OpenSSL 到环境变量</span><br><span class="line">keytool -list -rfc --keystore jwt.jks | openssl x509 -inform pem -pubkey</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>幂等性</title>
    <url>/2020/11/05/234625.html</url>
    <content><![CDATA[<blockquote>
<p>幂等性</p>
</blockquote>
<span id="more"></span>

<h4 id="什么是幂等性"><a href="#什么是幂等性" class="headerlink" title="什么是幂等性"></a>什么是幂等性</h4><ul>
<li>数学中：幂等元素运行多次，还等于它原来的计算结果</li>
<li>系统中：同样的请求被执行一次与执行多次的效果是一样的</li>
</ul>
<h4 id="什么时候需要幂等性"><a href="#什么时候需要幂等性" class="headerlink" title="什么时候需要幂等性"></a>什么时候需要幂等性</h4><ul>
<li>重复提交、接口重试、重复消费</li>
<li>业务场景</li>
</ul>
<h4 id="HTTP-方法的幂等"><a href="#HTTP-方法的幂等" class="headerlink" title="HTTP 方法的幂等"></a>HTTP 方法的幂等</h4><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><p>查询一次或者查询多次对数据不会有影响，是天然幂等的</p>
<h5 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h5><p>删除一次和删除多次的结果是一致的（在不考虑返回结果的情况下），也是幂等的</p>
<h5 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h5><p>更新操作分为两种情况，直接更新数据是幂等的，对数据做累加操作不是幂等的</p>
<h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><p>每次调用接口都会创建数据，不是幂等的</p>
<h4 id="如何保证幂等性"><a href="#如何保证幂等性" class="headerlink" title="如何保证幂等性"></a>如何保证幂等性</h4><h5 id="token"><a href="#token" class="headerlink" title="token"></a>token</h5><ol>
<li>请求幂等接口前，调用获取 token 接口，获取 token 接口里主要做三件事（创建 token、缓存 token、返回 token）</li>
<li>页面将数据和 token 一起传给幂等接口，此接口判断 token 如果在缓存中，则删除 token 并执行业务，否则提示重复调用接口</li>
</ol>
<blockquote>
<p>后删除 token 带来的问题：业务已经执行成功，token 删除失败，有可能发生重复调用问题<br>先删除 token 带来的问题：token 删除成功，业务出现异常，这时候就需要前端配合重新获取新的 token</p>
</blockquote>
<h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>业务表添加额外字段版本号，调用更新接口的时候将该值带上，更新接口通过判断版本号来确定是否已经被更新过</p>
<h5 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h5><p>将当前业务唯一标识做为 key 进行加锁（setNX），确保同一时间只有一个流程执行成功</p>
<h5 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h5><p>在类似订单的业务中，通常会有多个状态的流转，在进行某些接口操作时，我们可以判断状态来确定订单是否重复操作</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>MongoDB基础语法</title>
    <url>/2020/11/09/221104.html</url>
    <content><![CDATA[<blockquote>
<p>MongoDB 基础语法</p>
</blockquote>
<span id="more"></span>

<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><h5 id="选中数据库，不存在则创建"><a href="#选中数据库，不存在则创建" class="headerlink" title="选中数据库，不存在则创建"></a>选中数据库，不存在则创建</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">use mydb;</span><br></pre></td></tr></table></figure>

<h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure>

<h5 id="查看当前数据库"><a href="#查看当前数据库" class="headerlink" title="查看当前数据库"></a>查看当前数据库</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db;</span><br></pre></td></tr></table></figure>

<h5 id="查看全部数据库"><a href="#查看全部数据库" class="headerlink" title="查看全部数据库"></a>查看全部数据库</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">show dbs;</span><br></pre></td></tr></table></figure>

<h5 id="查看当前数据库下全部集合"><a href="#查看当前数据库下全部集合" class="headerlink" title="查看当前数据库下全部集合"></a>查看当前数据库下全部集合</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">show collections;</span><br></pre></td></tr></table></figure>

<h5 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.version();</span><br></pre></td></tr></table></figure>

<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><h5 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.createCollection(&quot;mycol2&quot;);</span><br></pre></td></tr></table></figure>

<h5 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.myco2.drop();</span><br></pre></td></tr></table></figure>

<h5 id="删除集合下全部文档"><a href="#删除集合下全部文档" class="headerlink" title="删除集合下全部文档"></a>删除集合下全部文档</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.remove();</span><br></pre></td></tr></table></figure>

<h5 id="查询集合下全部文档"><a href="#查询集合下全部文档" class="headerlink" title="查询集合下全部文档"></a>查询集合下全部文档</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find();</span><br></pre></td></tr></table></figure>

<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><blockquote>
<p>（1 升序 -1 降序）（name 索引名称，unique 唯一，background 后台创建）</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.createIndex(&#123;</span><br><span class="line">    &quot;name&quot;: 1,</span><br><span class="line">    &quot;age&quot;: - 1</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;name&quot;: &quot;uk_name_age&quot;,</span><br><span class="line">    &quot;unique&quot;: 1,</span><br><span class="line">    &quot;background&quot;: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="删除全部索引"><a href="#删除全部索引" class="headerlink" title="删除全部索引"></a>删除全部索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.dropIndexes()</span><br></pre></td></tr></table></figure>

<h5 id="删除指定索引"><a href="#删除指定索引" class="headerlink" title="删除指定索引"></a>删除指定索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.dropIndex(&quot;uk_name_age&quot;)</span><br></pre></td></tr></table></figure>

<h5 id="查看全部索引"><a href="#查看全部索引" class="headerlink" title="查看全部索引"></a>查看全部索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.getIndexes()</span><br></pre></td></tr></table></figure>

<h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><h5 id="添加（如果集合不存在则创建集合）"><a href="#添加（如果集合不存在则创建集合）" class="headerlink" title="添加（如果集合不存在则创建集合）"></a>添加（如果集合不存在则创建集合）</h5><blockquote>
<p>insert 已不再建议使用，使用 insertOne 或 insertMany<br>区别：<br><a href="https://stackoverflow.com/questions/36792649/whats-the-difference-between-insert-insertone-and-insertmany-method">https://stackoverflow.com/questions/36792649/whats-the-difference-between-insert-insertone-and-insertmany-method</a><br>insert 单个插入返回 WriteResult 对象，批量插入返回一个 BulkWriteResult 对象，insertOne 和 insertMany 返回插入对象的 ObjectId<br>insert 命令在成功和错误情况下都返回一个文档，insertOne 和 insertMany 命令会引发异常  </p>
</blockquote>
<h6 id="添加单条文档"><a href="#添加单条文档" class="headerlink" title="添加单条文档"></a>添加单条文档</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.insertOne(&#123;</span><br><span class="line">    &quot;name&quot;: &quot;chen&quot;,</span><br><span class="line">    &quot;age&quot;: 18,</span><br><span class="line">    &quot;email&quot;: &quot;chen@163.com&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="添加多条文档"><a href="#添加多条文档" class="headerlink" title="添加多条文档"></a>添加多条文档</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.insertMany([</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">        &quot;age&quot;: 18</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">        &quot;age&quot;: 20</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><h6 id="指定条件删除文档（remove，deleteOne，deleteMany）"><a href="#指定条件删除文档（remove，deleteOne，deleteMany）" class="headerlink" title="指定条件删除文档（remove，deleteOne，deleteMany）"></a>指定条件删除文档（remove，deleteOne，deleteMany）</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.deleteMany(&#123;</span><br><span class="line">    &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><h6 id="in，and，or使用"><a href="#in，and，or使用" class="headerlink" title="in，and，or使用"></a>in，and，or使用</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find(</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;isDel&quot;: 0,</span><br><span class="line">        &quot;role&quot;: &#123;</span><br><span class="line">            $in: [&#x27;管理员1号&#x27;, &#x27;管理员2号&#x27;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;$or&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;name&quot;: &quot;陈1&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;age&quot;: &#123;</span><br><span class="line">                    &quot;$gte&quot;: 20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h6 id="比较（gt-，lt-，lte"><a href="#比较（gt-，lt-，lte" class="headerlink" title="比较（gt &gt;，lt &lt;，gte &gt;&#x3D;，lte &lt;&#x3D;，ne !&#x3D;）"></a>比较（gt &gt;，lt &lt;，gte &gt;&#x3D;，lte &lt;&#x3D;，ne !&#x3D;）</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find(&#123;</span><br><span class="line">    &quot;age&quot;: &#123;</span><br><span class="line">        &quot;$gt&quot;: 15,</span><br><span class="line">        &quot;$lt&quot;: 30,</span><br><span class="line">        &quot;$ne&quot;: 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="limit-和-skip-使用"><a href="#limit-和-skip-使用" class="headerlink" title="limit 和 skip 使用"></a>limit 和 skip 使用</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find().limit(2).skip(1);</span><br></pre></td></tr></table></figure>

<h6 id="排序（1-升序，-1-降序）"><a href="#排序（1-升序，-1-降序）" class="headerlink" title="排序（1 升序，-1 降序）"></a>排序（1 升序，-1 降序）</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find().sort(&#123;</span><br><span class="line">    &quot;age&quot;: - 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="统计数量"><a href="#统计数量" class="headerlink" title="统计数量"></a>统计数量</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find().count()</span><br></pre></td></tr></table></figure>

<h6 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find(&#123;</span><br><span class="line">    &quot;name&quot;: /陈/</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="模糊查询（左、右、全）"><a href="#模糊查询（左、右、全）" class="headerlink" title="模糊查询（左、右、全）"></a>模糊查询（左、右、全）</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find(&#123;</span><br><span class="line">    &quot;name&quot;: &#123;</span><br><span class="line">        &quot;$regex&quot;: &quot;^chen.*$&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.mycol2.find(&#123;</span><br><span class="line">    &quot;name&quot;: &#123;</span><br><span class="line">        &quot;$regex&quot;: &quot;^.*kaixin$&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.mycol2.find(&#123;</span><br><span class="line">    &quot;name&quot;: &#123;</span><br><span class="line">        &quot;$regex&quot;: &quot;^.*chenkaixin.*$&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="查询单个字段并去重"><a href="#查询单个字段并去重" class="headerlink" title="查询单个字段并去重"></a>查询单个字段并去重</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.distinct(&quot;name&quot;);</span><br></pre></td></tr></table></figure>

<h6 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find(&#123;</span><br><span class="line">    &quot;createTime&quot;: &#123;</span><br><span class="line">        $gt: new Date(&quot;2020-02-03T06:24:40.110Z&quot;),</span><br><span class="line">        $lt: new Date(&quot;2020-02-05T06:14:40.089Z&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="指定字段（1-查询，0-排除）"><a href="#指定字段（1-查询，0-排除）" class="headerlink" title="指定字段（1 查询，0 排除）"></a>指定字段（1 查询，0 排除）</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.find(&#123;&#125;, &#123;</span><br><span class="line">    &quot;name&quot;: 1,</span><br><span class="line">    &quot;_id&quot;: 0</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><blockquote>
<p>带_id是添加，不带_id则更新</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.save(&#123;</span><br><span class="line">    &quot;_id&quot;: ObjectId(&quot;613a1c32864100008c006de9&quot;),</span><br><span class="line">    &quot;name&quot;: &quot;麻子&quot;,</span><br><span class="line">    &quot;age&quot;: 3</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="根据条件更新一条"><a href="#根据条件更新一条" class="headerlink" title="根据条件更新一条"></a>根据条件更新一条</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.updateOne(</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;age&quot;: 18</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $set: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;18真好&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h6 id="更新多条"><a href="#更新多条" class="headerlink" title="更新多条"></a>更新多条</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.updateMany(&#123;</span><br><span class="line">    &quot;age&quot;: 30</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    $set: &#123;</span><br><span class="line">        &quot;name&quot;: &#x27;30真好啊222&#x27;,</span><br><span class="line">        &quot;age&quot;: 30</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    upsert: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="嵌套字段"><a href="#嵌套字段" class="headerlink" title="嵌套字段"></a>嵌套字段</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.insertMany( [</span><br><span class="line">   &#123; item: &quot;journal&quot;, qty: 25, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;notebook&quot;, qty: 50, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;A&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;paper&quot;, qty: 100, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;D&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;planner&quot;, qty: 75, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, status: &quot;D&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;postcard&quot;, qty: 45, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h6 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    size: &#123;</span><br><span class="line">        h: 14,</span><br><span class="line">        w: 21,</span><br><span class="line">        uom: &quot;cm&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="相等匹配"><a href="#相等匹配" class="headerlink" title="相等匹配"></a>相等匹配</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    &quot;size.uom&quot;: &quot;in&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="指定匹配"><a href="#指定匹配" class="headerlink" title="指定匹配"></a>指定匹配</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    &quot;size.h&quot;: &#123;</span><br><span class="line">        $lt: 15</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;size.uom&quot;: &quot;in&quot;,</span><br><span class="line">    status: &quot;D&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.insertMany([</span><br><span class="line">   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], dim_cm: [ 14, 21 ] &#125;,</span><br><span class="line">   &#123; item: &quot;notebook&quot;, qty: 50, tags: [&quot;red&quot;, &quot;blank&quot;], dim_cm: [ 14, 21 ] &#125;,</span><br><span class="line">   &#123; item: &quot;paper&quot;, qty: 100, tags: [&quot;red&quot;, &quot;blank&quot;, &quot;plain&quot;], dim_cm: [ 14, 21 ] &#125;,</span><br><span class="line">   &#123; item: &quot;planner&quot;, qty: 75, tags: [&quot;blank&quot;, &quot;red&quot;], dim_cm: [ 22.85, 30 ] &#125;,</span><br><span class="line">   &#123; item: &quot;postcard&quot;, qty: 45, tags: [&quot;blue&quot;], dim_cm: [ 10, 15.25 ] &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h6 id="指定顺序和大小查询"><a href="#指定顺序和大小查询" class="headerlink" title="指定顺序和大小查询"></a>指定顺序和大小查询</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    tags: [&quot;red&quot;, &quot;blank&quot;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="不指定"><a href="#不指定" class="headerlink" title="不指定"></a>不指定</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    tags: &#123;</span><br><span class="line">        $all: [&quot;red&quot;, &quot;blank&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="包含指定元素"><a href="#包含指定元素" class="headerlink" title="包含指定元素"></a>包含指定元素</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    tags: &quot;red&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="组合满足条件"><a href="#组合满足条件" class="headerlink" title="组合满足条件"></a>组合满足条件</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    dim_cm: &#123;</span><br><span class="line">        $gt: 15,</span><br><span class="line">        $lt: 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="满足全部条件"><a href="#满足全部条件" class="headerlink" title="满足全部条件"></a>满足全部条件</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    dim_cm: &#123;</span><br><span class="line">        $elemMatch: &#123;</span><br><span class="line">            $gt: 22,</span><br><span class="line">            $lt: 30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="使用长度查询"><a href="#使用长度查询" class="headerlink" title="使用长度查询"></a>使用长度查询</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    &quot;tags&quot;: &#123;</span><br><span class="line">        $size: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="数组文档"><a href="#数组文档" class="headerlink" title="数组文档"></a>数组文档</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.insertMany( [</span><br><span class="line">   &#123; item: &quot;journal&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 5 &#125;, &#123; warehouse: &quot;C&quot;, qty: 15 &#125; ] &#125;,</span><br><span class="line">   &#123; item: &quot;notebook&quot;, instock: [ &#123; warehouse: &quot;C&quot;, qty: 5 &#125; ] &#125;,</span><br><span class="line">   &#123; item: &quot;paper&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 60 &#125;, &#123; warehouse: &quot;B&quot;, qty: 15 &#125; ] &#125;,</span><br><span class="line">   &#123; item: &quot;planner&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 40 &#125;, &#123; warehouse: &quot;B&quot;, qty: 5 &#125; ] &#125;,</span><br><span class="line">   &#123; item: &quot;postcard&quot;, instock: [ &#123; warehouse: &quot;B&quot;, qty: 15 &#125;, &#123; warehouse: &quot;C&quot;, qty: 35 &#125; ] &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h6 id="对字段进行查询"><a href="#对字段进行查询" class="headerlink" title="对字段进行查询"></a>对字段进行查询</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    &#x27;instock.qty&#x27;: &#123;</span><br><span class="line">        $lte: 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="使用数组的索引查询"><a href="#使用数组的索引查询" class="headerlink" title="使用数组的索引查询"></a>使用数组的索引查询</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    &#x27;instock.0.qty&#x27;: &#123;</span><br><span class="line">        $lte: 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="组合满足条件-1"><a href="#组合满足条件-1" class="headerlink" title="组合满足条件"></a>组合满足条件</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    &quot;instock.qty&quot;: &#123;</span><br><span class="line">        $gt: 10,</span><br><span class="line">        $lte: 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="满足全部条件-1"><a href="#满足全部条件-1" class="headerlink" title="满足全部条件"></a>满足全部条件</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.inventory.find(&#123;</span><br><span class="line">    &quot;instock&quot;: &#123;</span><br><span class="line">        $elemMatch: &#123;</span><br><span class="line">            qty: &#123;</span><br><span class="line">                $gt: 10,</span><br><span class="line">                $lte: 20</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><h5 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h5><table>
<thead>
<tr>
<th align="center">sql</th>
<th align="center">mongo</th>
</tr>
</thead>
<tbody><tr>
<td align="center">select</td>
<td align="center">$project</td>
</tr>
<tr>
<td align="center">where</td>
<td align="center">$match</td>
</tr>
<tr>
<td align="center">join</td>
<td align="center">$lookup</td>
</tr>
<tr>
<td align="center">group by</td>
<td align="center">$group</td>
</tr>
<tr>
<td align="center">having</td>
<td align="center">$match</td>
</tr>
<tr>
<td align="center">order by</td>
<td align="center">$sort</td>
</tr>
<tr>
<td align="center">limit</td>
<td align="center">$limit</td>
</tr>
<tr>
<td align="center">sum()</td>
<td align="center">$sum</td>
</tr>
<tr>
<td align="center">count()</td>
<td align="center">$sum</td>
</tr>
<tr>
<td align="center">age()</td>
<td align="center">$age</td>
</tr>
<tr>
<td align="center">min()</td>
<td align="center">$min</td>
</tr>
<tr>
<td align="center">max()</td>
<td align="center">$max</td>
</tr>
</tbody></table>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        $group: &#123;</span><br><span class="line">            _id: &quot;$name&quot;,</span><br><span class="line">            user_count: &#123;</span><br><span class="line">                $sum: 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $match: &#123;</span><br><span class="line">            &quot;user_count&quot;: &#123;</span><br><span class="line">                $gt: 10</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $skip: 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $limit: 10</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $sort: &#123;</span><br><span class="line">            user_count: - 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.mycol2.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        $match: &#123;</span><br><span class="line">            isDel: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $group: &#123;</span><br><span class="line">            _id: &quot;$name&quot;,</span><br><span class="line">            age_sum: &#123;</span><br><span class="line">                $sum: &quot;$age&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>ES基础语法</title>
    <url>/2021/02/27/193617.html</url>
    <content><![CDATA[<blockquote>
<p>ES 基础语法</p>
</blockquote>
<span id="more"></span>

<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUT /employee</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUT /movie</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;english&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tagline&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;english&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;release_date&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;popularity&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;overview&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;english&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="查看索引是否存在"><a href="#查看索引是否存在" class="headerlink" title="查看索引是否存在"></a>查看索引是否存在</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HEAD /employee</span><br></pre></td></tr></table></figure>

<h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /employee</span><br></pre></td></tr></table></figure>

<h5 id="查看索引设置"><a href="#查看索引设置" class="headerlink" title="查看索引设置"></a>查看索引设置</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /employee/_settings</span><br></pre></td></tr></table></figure>

<h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">DELETE /employee</span><br></pre></td></tr></table></figure>

<h5 id="关闭索引"><a href="#关闭索引" class="headerlink" title="关闭索引"></a>关闭索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /employee/_close</span><br></pre></td></tr></table></figure>

<h5 id="打开索引"><a href="#打开索引" class="headerlink" title="打开索引"></a>打开索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /employee/_open</span><br></pre></td></tr></table></figure>

<h5 id="克隆索引"><a href="#克隆索引" class="headerlink" title="克隆索引"></a>克隆索引</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /employee/_clone/clone_employee</span><br></pre></td></tr></table></figure>

<h5 id="添加映射"><a href="#添加映射" class="headerlink" title="添加映射"></a>添加映射</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUT /employee,employee2/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;remark&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUT /employee</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;remark&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /employee/_mapping</span><br></pre></td></tr></table></figure>

<h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><h5 id="创建索引和文档"><a href="#创建索引和文档" class="headerlink" title="创建索引和文档"></a>创建索引和文档</h5><blockquote>
<p>如果索引不存在，则创建索引，如果文档不存在则创建文档，否则全量更新文档</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUT /employee/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;陈开开&quot;,</span><br><span class="line">  &quot;age&quot;: 25</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h5><blockquote>
<p>如果文档已存在则失败</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /employee/_create/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;中国人民&quot;,</span><br><span class="line">  &quot;age&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">DELETE /employee/_doc/1</span><br></pre></td></tr></table></figure>

<h5 id="检查文档是否存在"><a href="#检查文档是否存在" class="headerlink" title="检查文档是否存在"></a>检查文档是否存在</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HEAD /employee/_doc/1</span><br></pre></td></tr></table></figure>

<h5 id="查看文档总数量"><a href="#查看文档总数量" class="headerlink" title="查看文档总数量"></a>查看文档总数量</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_count</span><br></pre></td></tr></table></figure>

<h5 id="查看指定文档"><a href="#查看指定文档" class="headerlink" title="查看指定文档"></a>查看指定文档</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /employee/_doc/1</span><br></pre></td></tr></table></figure>

<h5 id="查看源"><a href="#查看源" class="headerlink" title="查看源"></a>查看源</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /employee/_source/1</span><br></pre></td></tr></table></figure>

<h5 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /employee/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;陈21&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="批量查看"><a href="#批量查看" class="headerlink" title="批量查看"></a>批量查看</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;employee&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;employee2&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /employee/_doc/_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: &quot;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: &quot;2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /employee/_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ids&quot;: [</span><br><span class="line">    &quot;1&quot;,</span><br><span class="line">    &quot;2&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;field1&quot;:&quot;value1&quot;&#125;</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;field1&quot;:&quot;value3&quot;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:&quot;1&quot;,&quot;_index&quot;:&quot;test&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;field2&quot;:&quot;value2&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /employee/_bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;男子偷上万元发红包求交女友 被抓获时仍然单身&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;16岁少女为结婚“变”22岁 7年后想离婚被法院拒绝&quot;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="根据查询删除"><a href="#根据查询删除" class="headerlink" title="根据查询删除"></a>根据查询删除</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /employee/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;中国&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="根据查询修改"><a href="#根据查询修改" class="headerlink" title="根据查询修改"></a>根据查询修改</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">POST /employee/_update_by_query</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;: &#123;</span><br><span class="line">    &quot;source&quot;: &quot;ctx._source.age++&quot;,</span><br><span class="line">    &quot;lang&quot;: &quot;painless&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;_id&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><h5 id="match-查看"><a href="#match-查看" class="headerlink" title="match 查看"></a>match 查看</h5><blockquote>
<p>按照字段上定义的分词分析后去索引内查看，默认 operator 为 or，默认 minimum_should_match 为 1</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;Wall Street: Money Never Sleeps&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">        &quot;minimum_should_match&quot;: 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="term-查看"><a href="#term-查看" class="headerlink" title="term 查看"></a>term 查看</h5><blockquote>
<p>不会进行分词，精确匹配</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;killer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: [</span><br><span class="line">        &quot;killer&quot;,</span><br><span class="line">        &quot;elite&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="查看全部"><a href="#查看全部" class="headerlink" title="查看全部"></a>查看全部</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /employee/_search</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="短语查看"><a href="#短语查看" class="headerlink" title="短语查看"></a>短语查看</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;steve zissou&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="短语前缀查看"><a href="#短语前缀查看" class="headerlink" title="短语前缀查看"></a>短语前缀查看</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;steve zis&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多字段查看"><a href="#多字段查看" class="headerlink" title="多字段查看"></a>多字段查看</h5><ul>
<li>best_fields：默认，查找匹配任何字段的文档，但使用来自最佳字段的 _score</li>
<li>most_fields：查找匹配任何字段的文档，并合并每个字段的 _score</li>
<li>cross_fields：使用同一个分析器处理字段，就像它们是一个大字段一样。查找任何字段中的每个单词</li>
<li>phrase：在每个字段上运行 match_phrase 查看，并使用来自最佳字段的 _score</li>
<li>phrase_prefix：在每个字段上运行 match_phrase_prefix 查看，并使用来自最佳字段的 _score</li>
<li>bool_prefix：在每个字段上创建一个 match_bool_prefix 查看，并合并每个字段的 _score</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;most_fields&quot;, </span><br><span class="line">      &quot;query&quot;: &quot;basketball with cartoom aliens&quot;,</span><br><span class="line">      &quot;fields&quot;: [</span><br><span class="line">        &quot;title&quot;,</span><br><span class="line">        &quot;overview&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 10,</span><br><span class="line">  &quot;_source&quot;: [</span><br><span class="line">    &quot;title&quot;,</span><br><span class="line">    &quot;overview&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="query-string"><a href="#query-string" class="headerlink" title="query_string"></a>query_string</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;fields&quot;: [</span><br><span class="line">        &quot;title&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;query&quot;: &quot;steve AND jobs&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;popularity&quot;: &#123;</span><br><span class="line">              &quot;gt&quot;: 10</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多条件过滤"><a href="#多条件过滤" class="headerlink" title="多条件过滤"></a>多条件过滤</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &quot;steve&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;release_date&quot;: &#123;</span><br><span class="line">              &quot;lte&quot;: &quot;2015-01-01&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;popularity&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: &quot;25&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="带分数的过滤"><a href="#带分数的过滤" class="headerlink" title="带分数的过滤"></a>带分数的过滤</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &quot;life&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &quot;steve&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;release_date&quot;: &#123;</span><br><span class="line">              &quot;lte&quot;: &quot;2015-01-01&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;popularity&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: &quot;25&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;popularity&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_release_date&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;release_date&quot;,</span><br><span class="line">        &quot;size&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Bool-查看"><a href="#Bool-查看" class="headerlink" title="Bool 查看"></a>Bool 查看</h5><ul>
<li>must：必须都是 true  </li>
<li>must not：必须都是 false </li>
<li>should：其中有一个为 true 即可，但 true 的越多得分越高</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &quot;basketball with cartoom aliens&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;overview&quot;: &quot;basketball with cartoom aliens&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="突出显示"><a href="#突出显示" class="headerlink" title="突出显示"></a>突出显示</h5><ul>
<li>“tags_schema” : “styled”, </li>
<li>“pre_tags”: [“<tag1>“], “post_tags”: [“</tag1>“],</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><h5 id="校验语句是否合法"><a href="#校验语句是否合法" class="headerlink" title="校验语句是否合法"></a>校验语句是否合法</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_validate/query?explain</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;steve job&quot;,</span><br><span class="line">      &quot;fields&quot;: [</span><br><span class="line">        &quot;title&quot;,</span><br><span class="line">        &quot;overview&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;most_fields&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="分析调试"><a href="#分析调试" class="headerlink" title="分析调试"></a>分析调试</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;explain&quot;: true,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;steve&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="修改打分权重"><a href="#修改打分权重" class="headerlink" title="修改打分权重"></a>修改打分权重</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;basketball with cartoom aliens&quot;,</span><br><span class="line">      &quot;fields&quot;: [</span><br><span class="line">        &quot;title^10&quot;,</span><br><span class="line">        &quot;overview&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;tie_breaker&quot;: 0.3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="自定义打分"><a href="#自定义打分" class="headerlink" title="自定义打分"></a>自定义打分</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;multi_match&quot;: &#123;</span><br><span class="line">          &quot;query&quot;: &quot;steve job&quot;,</span><br><span class="line">          &quot;fields&quot;: [</span><br><span class="line">            &quot;title&quot;,</span><br><span class="line">            &quot;overview&quot;</span><br><span class="line">          ],</span><br><span class="line">          &quot;operator&quot;: &quot;or&quot;,</span><br><span class="line">          &quot;type&quot;: &quot;most_fields&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;field_value_factor&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;popularity&quot;,</span><br><span class="line">            &quot;modifier&quot;: &quot;log2p&quot;,</span><br><span class="line">            &quot;factor&quot;: 10</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;score_mode&quot;: &quot;sum&quot;,</span><br><span class="line">      &quot;boost_mode&quot;: &quot;sum&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>ES分词配置</title>
    <url>/2021/03/06/205827.html</url>
    <content><![CDATA[<blockquote>
<p>ES 中的分词是通过分词器来实现的，主要作用是将文本转化成单词，其主要分词器有 standard（默认分词器，单词转小写，去除标点符号），simple（单词转小写，去除标点符号和数字类型的字符），whitespace（去除空格，不支持中文）</p>
</blockquote>
<span id="more"></span>

<h4 id="standard-分词器"><a href="#standard-分词器" class="headerlink" title="standard  分词器"></a>standard  分词器</h4><ol>
<li>standard 分词的过程</li>
</ol>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_21-56-54-7e833f46573e4bb6a3925bedf8fc346b.png" alt="image.png"></p>
<ol start="2">
<li>执行命令后可以看到，单词小写，标点符号也已经被去掉</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;Are you 18 years old, young man.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>接着，将 text 的值修改为“中华人民共和国国歌”，执行后可以看到，中文按单个字进行分隔，并不符合我们要求，所以我们需要一个中文的分词器</li>
</ol>
<h4 id="ik-分词器"><a href="#ik-分词器" class="headerlink" title="ik 分词器"></a>ik 分词器</h4><ol>
<li>下载 ik 分词器：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></li>
<li>将压缩包解压至 es 的 plugins 目录下后重启 es</li>
<li>执行命令后可以看到中文分词的结果</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;中华人民共和国国歌&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ik 分词器主要有两种，ik_smart（智能分词，粗粒度），ik_max_word（最大化分词，细粒度），使用时的最佳实践是创建索引时使用 max_word，查询的时候使用 smart，如果出现 smart 搜索不到的情况下，可以做降级强制指定 max_word 进行搜索</p>
<h4 id="自定义词库"><a href="#自定义词库" class="headerlink" title="自定义词库"></a>自定义词库</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;凯悦酒店&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;凯&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;悦&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 1,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;酒店&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为“凯悦”这个词在词库中并不存在，所以执行上述命令时返回的结果并不是我们想要的，这时候就需要自定义词库进行处理</p>
<ol>
<li>在 ik&#x2F;config 目录下创建 new_word.dic 文件，输入文本“凯悦”</li>
<li>修改 IKAnalyzer.cfg.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>new_word.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启 es 后执行 ik 分词，可以得到分词结果</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;凯悦&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;酒店&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="热更新词库"><a href="#热更新词库" class="headerlink" title="热更新词库"></a>热更新词库</h4><p>自定义词库创建后，需要重启 es 才会生效，一般不建议这么做，使用热更新的方式会更好<br>将文件配置改成可以用 http 请求访问即可，http 请求需要返回两个头部，last-modified 和 etag，两者任何一个发生变化则会重新更新，ik 一分钟检测一次</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>http://yoursite.com/getCustomeDic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="同义词搜索"><a href="#同义词搜索" class="headerlink" title="同义词搜索"></a>同义词搜索</h4><ol>
<li>在 es&#x2F;config 目录创建 ik&#x2F;synonyms.txt 文件，输入文本“凯悦,锡伯,红桃”</li>
<li>创建索引并添加数据</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUT /testindex2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 1,</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;my_synonym_filter&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;synonym&quot;,</span><br><span class="line">          &quot;synonyms_path&quot;: &quot;ik/synonyms.txt&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;ik_syno&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;my_synonym_filter&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ik_syno_max&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;tokenizer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;filter&quot;: [&quot;my_synonym_filter&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;, </span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_syno_max&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_syno&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUT /testindex2/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;凯悦酒店&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /testindex2/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;锡伯酒店&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /testindex2/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;红桃酒店&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /testindex2/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;测试酒店&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>测试同义词搜索</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /testindex2/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;field&quot;: &quot;name&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;凯悦&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET /testindex2/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;红挑&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回数据：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;凯悦&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;锡伯&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;SYNONYM&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;红桃&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;SYNONYM&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Minio</title>
    <url>/2021/08/05/213819.html</url>
    <content><![CDATA[<blockquote>
<p>Docker 安装 Minio</p>
</blockquote>
<span id="more"></span>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker search minio</span></span><br><span class="line">INDEX       NAME                                     DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/minio/minio                    Kubernetes Native, High Performance Object...   472                  [OK]</span><br><span class="line">docker.io   docker.io/minio/mc                       Minio Client (mc) provides a modern altern...   25                   [OK]</span><br><span class="line">docker.io   docker.io/minio/console                  A graphical user interface <span class="keyword">for</span> MinIO server     8                    </span><br><span class="line">docker.io   docker.io/jessestuart/minio              Minio server — supports arm (arm32v6, arm3...   5                    </span><br><span class="line">docker.io   docker.io/pixelchrome/minio-arm          This Dockerfile installs Minio on your ARM...   5                    </span><br><span class="line">docker.io   docker.io/opennms/minion                 Application container runs Minion by OpenN...   3                    [OK]</span><br><span class="line">docker.io   docker.io/webhippie/minio                Docker images <span class="keyword">for</span> Minio                         3                    [OK]</span><br><span class="line">docker.io   docker.io/rook/minio                     Minio is a high performance distributed ob...   2                    </span><br><span class="line">docker.io   docker.io/azinchen/minio                 Minio server Docker image. Always up-to-da...   1                    </span><br><span class="line">docker.io   docker.io/teamwork/minio                 Minio <span class="keyword">for</span> Teamwork                              1                    </span><br><span class="line">docker.io   docker.io/zenithar/minio-server          Minio.io Server <span class="keyword">in</span> Alpine Linux docker          1                    [OK]</span><br><span class="line">docker.io   docker.io/enzime/minio-docker            Modifies the default <span class="built_in">command</span> of the minio:...   0                    [OK]</span><br><span class="line">docker.io   docker.io/joepll/minio-exporter          Prometheus exporter <span class="keyword">for</span> Minio server            0                    </span><br><span class="line">docker.io   docker.io/kazesberger/miniomc-postgres   this image is used to create postgres dump...   0                    </span><br><span class="line">docker.io   docker.io/keikoproj/minion-manager       https://github.com/orkaproj/minion-manager      0                    </span><br><span class="line">docker.io   docker.io/kimurashuhei/minio             minio server <span class="keyword">for</span> using it <span class="keyword">in</span> github actions     0                    </span><br><span class="line">docker.io   docker.io/leviy/minio                    Minio image <span class="keyword">for</span> development and testing of...   0                    [OK]</span><br><span class="line">docker.io   docker.io/minio/k8s-operator             Minio Operator <span class="keyword">for</span> k8s https://kubernetes.io/   0                    </span><br><span class="line">docker.io   docker.io/minio/mint                     Collection of tests to detect overall corr...   0                    [OK]</span><br><span class="line">docker.io   docker.io/nerc/minio                     Minio container <span class="keyword">for</span> use <span class="keyword">in</span> the datalab pro...   0                    [OK]</span><br><span class="line">docker.io   docker.io/opsmx11/minio                  Minio <span class="keyword">for</span> Openshift                             0                    [OK]</span><br><span class="line">docker.io   docker.io/rwsdockercf/minio-resource                                                     0                    </span><br><span class="line">docker.io   docker.io/sourcegraph/minio                                                              0                    </span><br><span class="line">docker.io   docker.io/tobilg/minio-dcos              minio on DC/OS                                  0                    [OK]</span><br><span class="line">docker.io   docker.io/topdockercat/minio-unraid      Minio is an Amazon S3 compatible object st...   0                    [OK]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull minio/minio</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/minio/minio ... </span><br><span class="line">latest: Pulling from docker.io/minio/minio</span><br><span class="line">158b4527561f: Pull complete </span><br><span class="line">a3ba00ce78fe: Pull complete </span><br><span class="line">e5fb44c2ce95: Pull complete </span><br><span class="line">48b3a348e261: Pull complete </span><br><span class="line">0b9bd949e073: Pull complete </span><br><span class="line">9dedf020615e: Pull complete </span><br><span class="line">16b0ed86109a: Pull complete </span><br><span class="line">Digest: sha256:9daf9c4b2be5b19b8bf40d3cc9a6026b94d9b31582deb7365914b27c09e28573</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> docker.io/minio/minio:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">[root@localhost data]<span class="comment"># docker run -d -p 9000:9000 \</span></span><br><span class="line">-p 9001:9001 \</span><br><span class="line">--name minio \</span><br><span class="line">-e <span class="string">&quot;MINIO_ROOT_USER=admin&quot;</span>  \</span><br><span class="line">-e <span class="string">&quot;MINIO_ROOT_PASSWORD=admin123456&quot;</span>  \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /data/software/minio:/data \</span><br><span class="line">minio/minio server /data --console-address <span class="string">&quot;:9001&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行中容器</span></span><br><span class="line">[root@localhost data]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                  PORTS                              NAMES</span><br><span class="line">52b942eb04db        minio/minio         <span class="string">&quot;/usr/bin/docker-e...&quot;</span>   3 seconds ago       Up Less than a second   0.0.0.0:9000-9001-&gt;9000-9001/tcp   minio</span><br></pre></td></tr></table></figure>

<p>-d 后台运行，-p 暴露端口，–name 容器名称，-e 设置系统变量，–restart&#x3D;always 自动启动镜像，-v 挂载文件，data 指定目录存放文件<br>9000 为数据通讯接口，9001 为管理后台接口<br>admin admin123456，用户名和密码<br>&#x2F;data&#x2F;software&#x2F;minio，本地挂载目录</p>
<h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9000-9001/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>访问：<a href="http://192.168.1.102:9001/">http://192.168.1.102:9001</a></p>
<p><img data-src="/../../../../upload/2021/08/image-89356ebcdd9d4903a910a33a7f0aee6a.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/08/image-f1e6bb7edfea46e5b478d389caabce4e.png" alt="image.png"></p>
<h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><ul>
<li><p>Unable to initialize backend: mkdir &#x2F;data&#x2F;.minio.sys: permission denied<br>解决方案：修改 &#x2F;etc&#x2F;sysconfig&#x2F;selinux，将 SELINUX 的值改为 permissive</p>
</li>
<li><p>Access key length should be at least 3, and secret key length at least 8 characters<br>解决方案：设置新的密钥长度</p>
</li>
</ul>
]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Minio</tag>
      </tags>
  </entry>
  <entry>
    <title>数据同步-Logstash</title>
    <url>/2021/08/05/000523.html</url>
    <content><![CDATA[<blockquote>
<p>删除数据不会同步到 es 中，设置软删除即可，<a href="https://www.elastic.co/cn/blog/how-to-keep-elasticsearch-synchronized-with-a-relational-database-using-logstash">参考</a></p>
</blockquote>
<span id="more"></span>

<h4 id="sql-文件"><a href="#sql-文件" class="headerlink" title="sql 文件"></a>sql 文件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE es_db;</span><br><span class="line"></span><br><span class="line">USE es_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> es_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `es_table` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `client_name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `modification_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `insertion_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_id` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure>

<h4 id="在-config-下添加-sync-mysql-conf"><a href="#在-config-下添加-sync-mysql-conf" class="headerlink" title="在 config 下添加 sync_mysql.conf"></a>在 config 下添加 sync_mysql.conf</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  jdbc &#123;</span><br><span class="line">    jdbc_driver_library =&gt; &quot;D:\repository\mysql\mysql-connector-java\8.0.13\mysql-connector-java-8.0.13.jar&quot;</span><br><span class="line">    jdbc_driver_class =&gt; &quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">    jdbc_connection_string =&gt; &quot;jdbc:mysql://127.0.0.1:3306/es_db?serverTimezone=Asia/Shanghai&quot;</span><br><span class="line">    jdbc_user =&gt; root</span><br><span class="line">    jdbc_password =&gt; root</span><br><span class="line">    jdbc_paging_enabled =&gt; true</span><br><span class="line">    jdbc_page_size =&gt; 10000</span><br><span class="line">    tracking_column =&gt; &quot;modification_time&quot;</span><br><span class="line">    use_column_value =&gt; true</span><br><span class="line">    tracking_column_type =&gt; &quot;timestamp&quot;</span><br><span class="line">    schedule =&gt; &quot;*/5 * * * * *&quot;</span><br><span class="line">    statement =&gt; &quot;SELECT * FROM es_table WHERE modification_time &gt;= :sql_last_value&quot;</span><br><span class="line">    last_run_metadata_path =&gt; &quot;D:\logstash-7.12.0\config\sync_mysql_last_time.txt&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class="line">        index =&gt; &quot;es_db_index&quot;</span><br><span class="line">        document_type =&gt; &quot;_doc&quot;</span><br><span class="line">        document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启动服务并测试"><a href="#启动服务并测试" class="headerlink" title="启动服务并测试"></a>启动服务并测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logstash -f ../config/sync_mysql.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> es_table ( id, client_name ) <span class="keyword">VALUES</span> ( <span class="number">10</span>, <span class="string">&#x27;陈三&#x27;</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> es_table <span class="keyword">SET</span> client_name <span class="operator">=</span> <span class="string">&#x27;陈四&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>数据同步</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合ELK实现日志采集</title>
    <url>/2021/08/14/181033.html</url>
    <content><![CDATA[<blockquote>
<p>SpringBoot整合ELK实现日志采集<br>  kibana 配置中文，kibana.yml 中添加 i18n.locale: “zh-CN”</p>
</blockquote>
<span id="more"></span>

<h4 id="SpringBoot-配置"><a href="#SpringBoot-配置" class="headerlink" title="SpringBoot 配置"></a>SpringBoot 配置</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="logback-配置"><a href="#logback-配置" class="headerlink" title="logback 配置"></a>logback 配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用默认日志配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用默认的控制台日志输出实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;doublemintDefault&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志文件保存路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;catalina.home:-.&#125;/logs&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--LogStash 访问 host--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">name</span>=<span class="string">&quot;LOG_STASH_HOST&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logstash.host&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;localhost&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DEBUG 日志输出到 LogStash--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOG_STASH_DEBUG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOG_STASH_HOST&#125;:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>Asia/Shanghai<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--自定义日志输出格式--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        &quot;project&quot;: &quot;doublemint&quot;,</span><br><span class="line">                        &quot;level&quot;: &quot;%level&quot;,</span><br><span class="line">                        &quot;service&quot;: &quot;$&#123;APP_NAME:-&#125;&quot;,</span><br><span class="line">                        &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;,</span><br><span class="line">                        &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="line">                        &quot;class&quot;: &quot;%logger&quot;,</span><br><span class="line">                        &quot;message&quot;: &quot;%message&quot;,</span><br><span class="line">                        &quot;stack_trace&quot;: &quot;%exception&#123;20&#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当有多个 LogStash 服务时，设置访问策略为轮询--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">connectionTTL</span>&gt;</span>5 minutes<span class="tag">&lt;/<span class="name">connectionTTL</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--ERROR 日志输出到 LogStash--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOG_STASH_ERROR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOG_STASH_HOST&#125;:4561<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>Asia/Shanghai<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--自定义日志输出格式--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        &quot;project&quot;: &quot;doublemint&quot;,</span><br><span class="line">                        &quot;level&quot;: &quot;%level&quot;,</span><br><span class="line">                        &quot;service&quot;: &quot;$&#123;APP_NAME:-&#125;&quot;,</span><br><span class="line">                        &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;,</span><br><span class="line">                        &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="line">                        &quot;class&quot;: &quot;%logger&quot;,</span><br><span class="line">                        &quot;message&quot;: &quot;%message&quot;,</span><br><span class="line">                        &quot;stack_trace&quot;: &quot;%exception&#123;20&#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当有多个 LogStash 服务时，设置访问策略为轮询--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">connectionTTL</span>&gt;</span>5 minutes<span class="tag">&lt;/<span class="name">connectionTTL</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--业务日志输出到 LogStash--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOG_STASH_BUSINESS&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOG_STASH_HOST&#125;:4562<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>Asia/Shanghai<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--自定义日志输出格式--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        &quot;project&quot;: &quot;doublemint&quot;,</span><br><span class="line">                        &quot;level&quot;: &quot;%level&quot;,</span><br><span class="line">                        &quot;service&quot;: &quot;$&#123;APP_NAME:-&#125;&quot;,</span><br><span class="line">                        &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;,</span><br><span class="line">                        &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="line">                        &quot;class&quot;: &quot;%logger&quot;,</span><br><span class="line">                        &quot;message&quot;: &quot;%message&quot;,</span><br><span class="line">                        &quot;stack_trace&quot;: &quot;%exception&#123;20&#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当有多个 LogStash 服务时，设置访问策略为轮询--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">connectionTTL</span>&gt;</span>5 minutes<span class="tag">&lt;/<span class="name">connectionTTL</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--接口访问记录日志输出到 LogStash--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOG_STASH_RECORD&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOG_STASH_HOST&#125;:4563<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>Asia/Shanghai<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--自定义日志输出格式--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        &quot;project&quot;: &quot;doublemint&quot;,</span><br><span class="line">                        &quot;level&quot;: &quot;%level&quot;,</span><br><span class="line">                        &quot;service&quot;: &quot;$&#123;APP_NAME:-&#125;&quot;,</span><br><span class="line">                        &quot;class&quot;: &quot;%logger&quot;,</span><br><span class="line">                        &quot;message&quot;: &quot;%message&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当有多个 LogStash 服务时，设置访问策略为轮询--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">connectionTTL</span>&gt;</span>5 minutes<span class="tag">&lt;/<span class="name">connectionTTL</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制框架输出日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.slf4j&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;springfox&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;io.swagger&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.hibernate.validator&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.alibaba.nacos.client.naming&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOG_STASH_DEBUG&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOG_STASH_ERROR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;ink.ckx.doublemint.common.aspect.WebLogAspect&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOG_STASH_RECORD&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;ink.ckx.doublemint&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOG_STASH_BUSINESS&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="请求响应日志记录"><a href="#请求响应日志记录" class="headerlink" title="请求响应日志记录"></a>请求响应日志记录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebLogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * ink.ckx.doublemint.*.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">webLog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;webLog()&quot;, returning = &quot;ret&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(Object ret)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 获取当前请求对象</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">        <span class="comment">// 记录请求信息（通过 Logstash 传入 Elasticsearch）</span></span><br><span class="line">        <span class="type">WebLog</span> <span class="variable">webLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebLog</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) signature;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> methodSignature.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(ApiOperation.class)) &#123;</span><br><span class="line">            <span class="type">ApiOperation</span> <span class="variable">log</span> <span class="operator">=</span> method.getAnnotation(ApiOperation.class);</span><br><span class="line">            webLog.setDescription(log.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlStr</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line">        webLog.setBasePath(StrUtil.removeSuffix(urlStr, URLUtil.url(urlStr).getPath()));</span><br><span class="line">        webLog.setIp(request.getRemoteUser());</span><br><span class="line">        webLog.setMethod(request.getMethod());</span><br><span class="line">        webLog.setParameter(getParameter(method, joinPoint.getArgs()));</span><br><span class="line">        webLog.setResult(result);</span><br><span class="line">        webLog.setSpendTime((<span class="type">int</span>) (endTime - startTime));</span><br><span class="line">        webLog.setStartTime(startTime);</span><br><span class="line">        webLog.setUri(request.getRequestURI());</span><br><span class="line">        webLog.setUrl(request.getRequestURL().toString());</span><br><span class="line">        Map&lt;String, Object&gt; logMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        logMap.put(<span class="string">&quot;url&quot;</span>, webLog.getUrl());</span><br><span class="line">        logMap.put(<span class="string">&quot;method&quot;</span>, webLog.getMethod());</span><br><span class="line">        logMap.put(<span class="string">&quot;parameter&quot;</span>, webLog.getParameter());</span><br><span class="line">        logMap.put(<span class="string">&quot;spendTime&quot;</span>, webLog.getSpendTime());</span><br><span class="line">        logMap.put(<span class="string">&quot;description&quot;</span>, webLog.getDescription());</span><br><span class="line">        log.info(Markers.appendEntries(logMap), JSONUtil.parse(webLog).toString());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据方法和传入的参数获取请求参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">getParameter</span><span class="params">(Method method, Object[] args)</span> &#123;</span><br><span class="line">        List&lt;Object&gt; argList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Parameter[] parameters = method.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 将 RequestBody 注解修饰的参数作为请求参数</span></span><br><span class="line">            <span class="type">RequestBody</span> <span class="variable">requestBody</span> <span class="operator">=</span> parameters[i].getAnnotation(RequestBody.class);</span><br><span class="line">            <span class="keyword">if</span> (requestBody != <span class="literal">null</span>) &#123;</span><br><span class="line">                argList.add(args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将 RequestParam 注解修饰的参数作为请求参数</span></span><br><span class="line">            <span class="type">RequestParam</span> <span class="variable">requestParam</span> <span class="operator">=</span> parameters[i].getAnnotation(RequestParam.class);</span><br><span class="line">            <span class="keyword">if</span> (requestParam != <span class="literal">null</span>) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> parameters[i].getName();</span><br><span class="line">                <span class="keyword">if</span> (!StrUtil.isEmpty(requestParam.value())) &#123;</span><br><span class="line">                    key = requestParam.value();</span><br><span class="line">                &#125;</span><br><span class="line">                map.put(key, args[i]);</span><br><span class="line">                argList.add(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (argList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argList.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> argList.get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> argList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Logstash-配置（logstash-conf）"><a href="#Logstash-配置（logstash-conf）" class="headerlink" title="Logstash 配置（logstash.conf）"></a>Logstash 配置（logstash.conf）</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 4560</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;debug&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 4561</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;error&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 4562</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;business&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 4563</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;record&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter&#123;</span><br><span class="line">  if [type] == &quot;record&quot; &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      remove_field =&gt; &quot;port&quot;</span><br><span class="line">      remove_field =&gt; &quot;host&quot;</span><br><span class="line">      remove_field =&gt; &quot;@version&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    json &#123;</span><br><span class="line">      source =&gt; &quot;message&quot;</span><br><span class="line">      remove_field =&gt; [&quot;message&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class="line">    action =&gt; &quot;index&quot;</span><br><span class="line">    codec =&gt; json</span><br><span class="line">    index =&gt; &quot;doublemint-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    template_name =&gt; &quot;doublemint&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li>启动 ELK 环境并打开 kibana 界面</li>
<li>启动你的项目，随意访问几个接口，然后打开 kibana 界面的索引管理，会出现这几个索引</li>
</ol>
<p><img data-src="/../../../../upload/2021/08/image-9089959cbe94454897fe2fbedb79d6cf.png" alt="image.png"></p>
<ol start="3">
<li>新创建几个索引模式</li>
</ol>
<p><img data-src="/../../../../upload/2021/08/image-c49f30fb396c4c37a7ee63c7833718fb.png" alt="image.png"></p>
<ol start="4">
<li>打开 Analytics -&gt; Discover，显示如下界面后就可以愉快的玩耍了</li>
</ol>
<p><img data-src="/../../../../upload/2021/08/image-0df8865672d541ff853c66f26d7dbafd.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>日志采集</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务解决方案-Seata</title>
    <url>/2021/08/25/195945.html</url>
    <content><![CDATA[<blockquote>
<p>源码：<a href="https://github.com/chenkaixin12121/study/tree/master/seata">https://github.com/chenkaixin12121/study/tree/master/seata</a></p>
</blockquote>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="center">技术</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Seata</td>
<td align="center">1.4.2</td>
</tr>
<tr>
<td align="center">Nacos</td>
<td align="center">1.4.2</td>
</tr>
<tr>
<td align="center">SpringCloud</td>
<td align="center">Hoxton.SR9</td>
</tr>
<tr>
<td align="center">SpringSloud  Alibaba</td>
<td align="center">Alibaba 2.2.6.RELEASE</td>
</tr>
</tbody></table>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol>
<li>下载：<a href="https://github.com/seata/seata/releases/tag/v1.4.2">https://github.com/seata/seata/releases/tag/v1.4.2</a></li>
<li>在 conf 目录下修改 registry.conf</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line">  nacos &#123;</span><br><span class="line">    application = &quot;seata-server&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8848&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">config &#123;</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">    dataId = &quot;seataServer.properties&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启动 seata，在 nacos 服务管理中查询到 seata-server 即可</li>
</ol>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li>创建两个服务 seata-order 与 seata-storage，执行如下 sql</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建 order库、业务表、undo_log表</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE seata_order;</span><br><span class="line">USE seata_order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `order_tbl`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_tbl` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `commodity_code` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `count` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  `money` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log`</span><br><span class="line">(</span><br><span class="line">  `id`            <span class="type">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `branch_id`     <span class="type">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid`           <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `context`       <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rollback_info` LONGBLOB     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_status`    <span class="type">INT</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_created`   DATETIME     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_modified`  DATETIME     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ext`           <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`, `branch_id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 storage库、业务表、undo_log表</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE seata_storage;</span><br><span class="line">USE seata_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `storage_tbl`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `storage_tbl` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `commodity_code` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `count` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY (`commodity_code`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log`</span><br><span class="line">(</span><br><span class="line">  `id`            <span class="type">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `branch_id`     <span class="type">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid`           <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `context`       <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rollback_info` LONGBLOB     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_status`    <span class="type">INT</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_created`   DATETIME     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_modified`  DATETIME     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ext`           <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`, `branch_id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 初始化库存模拟数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> seata_storage.storage_tbl (id, commodity_code, count) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;product-1&#x27;</span>, <span class="number">9999999</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> seata_storage.storage_tbl (id, commodity_code, count) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;product-2&#x27;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>seata-order 的 application.yml 添加如下配置，seata-storage 服务自行修改即可</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application-id</span>: <span class="string">order-service</span></span><br><span class="line">  <span class="attr">tx-service-group</span>: <span class="string">order-service-seata-group</span></span><br><span class="line">  <span class="attr">service</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">vgroup-mapping</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">order-service-seata-group</span>: <span class="string">default</span></span><br><span class="line">    <span class="attr">grouplist</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">default</span>: <span class="string">127.0.0.1:8091</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li><p>分布式事务成功，模拟正常下单，扣库存<br>  <a href="http://localhost:9091/order/placeOrder/commit">http://localhost:9091/order/placeOrder/commit</a></p>
</li>
<li><p>分布式事务失败，模拟下单成功，扣库存失败，最终同时回滚<br>  <a href="http://localhost:9091/order/placeOrder/rollback">http://localhost:9091/order/placeOrder/rollback</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Seata</tag>
        <tag>分布式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>数据同步-Canal</title>
    <url>/2021/08/26/221154.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要演示了 Canal 全量和增量的从 MySQL 同步数据到 ElasticSearch</p>
</blockquote>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="center">技术</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">canal</td>
<td align="center">1.1.5</td>
</tr>
<tr>
<td align="center">MySQL</td>
<td align="center">8.0.12</td>
</tr>
<tr>
<td align="center">ELK</td>
<td align="center">7.12.0</td>
</tr>
</tbody></table>
<h4 id="配置-mysql"><a href="#配置-mysql" class="headerlink" title="配置 mysql"></a>配置 mysql</h4><ol>
<li>设置 MySQL 的 biglog</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br><span class="line">binlog-format=ROW</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重启服务后查询是否已设置成功</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%binlog_format%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建用户并授权</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;canalpwd&#x27;</span>;  </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>新建数据库和表，生成数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE canal_sync_db;</span><br><span class="line">USE canal_sync_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `canal_sync_order` (</span><br><span class="line">  `id` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="type">decimal</span>(<span class="number">16</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0.00&#x27;</span>,</span><br><span class="line">  `receiver_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `receiver_phone` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_order ( <span class="keyword">IN</span> count <span class="type">INT</span> ) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> xing <span class="type">VARCHAR</span> ( <span class="number">2056</span> ) <span class="keyword">DEFAULT</span> <span class="string">&#x27;赵钱孙李周郑王冯陈楮卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚谢喻柏水窦章云苏潘葛奚范彭郎鲁韦昌马苗凤花方俞任袁柳酆鲍史唐费廉岑薛雷贺倪汤滕殷罗毕郝邬安常乐于时傅皮齐康伍余元卜顾孟平黄和穆萧尹姚邵湛汪祁毛禹狄米贝明臧计伏成戴谈宋茅庞熊纪舒屈项祝董梁杜阮蓝闽席季麻强贾路娄危江童颜郭梅盛林刁锺徐丘骆高夏蔡田樊胡凌霍虞万支柯昝管卢莫经裘缪干解应宗丁宣贲邓郁单杭洪包诸左石崔吉钮龚程嵇邢滑裴陆荣翁&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> ming <span class="type">VARCHAR</span> ( <span class="number">2056</span> ) <span class="keyword">DEFAULT</span> <span class="string">&#x27;嘉懿煜城懿轩烨伟苑博伟泽熠彤鸿煊博涛烨霖烨华煜祺智宸正豪昊然明杰诚立轩立辉峻熙弘文熠彤鸿煊烨霖哲瀚鑫鹏致远俊驰雨泽烨磊晟睿天佑文昊修洁黎昕远航旭尧鸿涛伟祺轩越泽浩宇瑾瑜皓轩擎苍擎宇志泽睿渊楷瑞轩弘文哲瀚雨泽鑫磊梦琪忆之桃慕青问兰尔岚元香初夏沛菡傲珊曼文乐菱痴珊恨玉惜文香寒新柔语蓉海安夜蓉涵柏水桃醉蓝春儿语琴从彤傲晴语兰又菱碧彤元霜怜梦紫寒妙彤曼易南莲紫翠雨寒易烟如萱若南寻真晓亦向珊慕灵以蕊寻雁映易雪柳孤岚笑霜海云凝天沛珊寒云冰旋宛儿绿真盼儿晓霜碧凡夏菡曼香若烟半梦雅绿冰蓝灵槐平安书翠翠风香巧代云梦曼幼翠友巧听寒梦柏醉易访旋亦玉凌萱访卉怀亦笑蓝春翠靖柏夜蕾冰夏梦松书雪乐枫念薇靖雁寻春恨山从寒忆香觅波静曼凡旋以亦念露芷蕾千兰新波代真新蕾雁玉冷卉紫山千琴恨天傲芙盼山怀蝶冰兰山柏翠萱乐丹翠柔谷山之瑶冰露尔珍谷雪乐萱涵菡海莲傲蕾青槐冬儿易梦惜雪宛海之柔夏青亦瑶妙菡春竹修杰伟诚建辉晋鹏天磊绍辉泽洋明轩健柏煊昊强伟宸博超君浩子骞明辉鹏涛炎彬鹤轩越彬风华靖琪明诚高格光华国源宇晗昱涵润翰飞翰海昊乾浩博和安弘博鸿朗华奥华灿嘉慕坚秉建明金鑫锦程瑾瑜鹏经赋景同靖琪君昊俊明季同开济凯安康成乐语力勤良哲理群茂彦敏博明达朋义彭泽鹏举濮存溥心璞瑜浦泽奇邃祥荣轩&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> I_xing <span class="type">INT</span> <span class="keyword">DEFAULT</span> LENGTH( xing ) <span class="operator">/</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> I_ming <span class="type">INT</span> <span class="keyword">DEFAULT</span> LENGTH( ming ) <span class="operator">/</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> receiver_name_str <span class="type">VARCHAR</span> ( <span class="number">2056</span> ) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">DECLARE</span> head <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;000,156,136,176&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> content <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0123456789&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> phone <span class="type">CHAR</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> ctime DATETIME <span class="keyword">DEFAULT</span> now();</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;</span> count DO</span><br><span class="line">        <span class="keyword">SET</span> receiver_name_str <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">SET</span> receiver_name_str <span class="operator">=</span> CONCAT( receiver_name_str, <span class="built_in">substring</span>( xing, <span class="built_in">floor</span>( <span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> I_xing ), <span class="number">1</span> ));</span><br><span class="line">        <span class="keyword">SET</span> receiver_name_str <span class="operator">=</span> CONCAT( receiver_name_str, <span class="built_in">substring</span>( ming, <span class="built_in">floor</span>( <span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> I_ming ), <span class="number">1</span> ));</span><br><span class="line">        IF RAND() <span class="operator">&gt;</span> <span class="number">0.400</span> <span class="keyword">THEN</span> </span><br><span class="line">            <span class="keyword">SET</span> receiver_name_str <span class="operator">=</span> CONCAT( receiver_name_str, <span class="built_in">substring</span>( ming, <span class="built_in">floor</span>( <span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> I_ming ), <span class="number">1</span> ));</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">SET</span> phone <span class="operator">=</span> CONCAT( <span class="string">&#x27;1&#x27;</span>, <span class="built_in">CEILING</span>( RAND()<span class="operator">*</span> <span class="number">9000000000</span><span class="operator">+</span><span class="number">1000000000</span> ));</span><br><span class="line">        <span class="keyword">SET</span> ctime <span class="operator">=</span> DATE_ADD( now(), <span class="type">INTERVAL</span> <span class="operator">-</span>( <span class="keyword">SELECT</span> ROUND(( RAND() <span class="operator">*</span> <span class="number">240</span> ))) <span class="keyword">HOUR</span> );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> canal_sync_order ( order_no, money, receiver_name, receiver_phone, create_time ) <span class="keyword">VALUES</span> ( MD5( RAND()), <span class="built_in">FLOOR</span>( RAND() <span class="operator">*</span> <span class="number">10001</span> ), receiver_name_str, phone, ctime );</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> insert_order(<span class="number">100000</span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看表是否已经有 10w 条数据</li>
</ol>
<h4 id="配置-es"><a href="#配置-es" class="headerlink" title="配置 es"></a>配置 es</h4><ol>
<li>启动 es 和 kibana 后创建索引</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PUT /canal_sync_order</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;order_no&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;money&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;receiver_name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;receiver_phone&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;create_time&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/../../../../upload/2021/08/image-15063c4dfb384902a0b25ed2aca64bf0.png" alt="image.png"></p>
<ol start="2">
<li>创建索引模式 canal_sync_*</li>
</ol>
<p><img data-src="/../../../../upload/2021/08/image-bef1c44d1cd740669aa361b045b568d8.png" alt="image.png"></p>
<h4 id="配置-canal"><a href="#配置-canal" class="headerlink" title="配置 canal"></a>配置 canal</h4><ol>
<li>下载：<a href="https://github.com/alibaba/canal/releases/tag/canal-1.1.5">https://github.com/alibaba/canal/releases/tag/canal-1.1.5</a></li>
<li>修改 canal.deployer-1.1.5&#x2F;conf&#x2F;example&#x2F;instance.properties</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">canal.instance.master.address</span>=<span class="string">127.0.0.1:3306</span></span><br><span class="line"><span class="attr">canal.instance.dbUsername</span>=<span class="string">canal</span></span><br><span class="line"><span class="attr">canal.instance.dbPassword</span>=<span class="string">canalpwd</span></span><br><span class="line"><span class="attr">canal.instance.filter.regex</span>=<span class="string">.*\\..*</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改 canal.adapter-1.1.5&#x2F;conf&#x2F;application.yml</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span></span><br><span class="line"><span class="attr">canal.conf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">tcp</span> <span class="comment">#tcp kafka rocketMQ rabbitMQ</span></span><br><span class="line">  <span class="attr">flatMessage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zookeeperHosts:</span></span><br><span class="line">  <span class="attr">syncBatchSize:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">timeout:</span></span><br><span class="line">  <span class="attr">accessKey:</span></span><br><span class="line">  <span class="attr">secretKey:</span></span><br><span class="line">  <span class="attr">consumerProperties:</span></span><br><span class="line">    <span class="attr">canal.tcp.server.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:11111</span></span><br><span class="line">    <span class="attr">canal.tcp.zookeeper.hosts:</span></span><br><span class="line">    <span class="attr">canal.tcp.batch.size:</span> <span class="number">500</span></span><br><span class="line">    <span class="attr">canal.tcp.username:</span></span><br><span class="line">    <span class="attr">canal.tcp.password:</span></span><br><span class="line">  <span class="attr">srcDataSources:</span></span><br><span class="line">    <span class="attr">defaultDS:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/canal_sync_db?useUnicode=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">canal</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">canalpwd</span></span><br><span class="line">  <span class="attr">canalAdapters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">instance:</span> <span class="string">example</span> <span class="comment"># canal instance Name or mq topic name</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">groupId:</span> <span class="string">g1</span></span><br><span class="line">      <span class="attr">outerAdapters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logger</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">es7</span></span><br><span class="line">        <span class="attr">hosts:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9300</span> <span class="comment"># 127.0.0.1:9200 for rest mode</span></span><br><span class="line">        <span class="attr">properties:</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="string">transport</span> <span class="comment"># or rest</span></span><br><span class="line">          <span class="comment"># security.auth: test:123456 #  only used for rest mode</span></span><br><span class="line">          <span class="attr">cluster.name:</span> <span class="string">elasticsearch</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在 canal.adapter-1.1.5&#x2F;conf&#x2F;es7 目录下新建 sync_order.yml</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dataSourceKey:</span> <span class="string">defaultDS</span></span><br><span class="line"><span class="attr">destination:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">groupId:</span> <span class="string">g1</span></span><br><span class="line"><span class="attr">esMapping:</span></span><br><span class="line">  <span class="attr">_index:</span> <span class="string">canal_sync_order</span></span><br><span class="line">  <span class="attr">_id:</span> <span class="string">_id</span></span><br><span class="line">  <span class="attr">sql:</span> <span class="string">&quot;SELECT</span></span><br><span class="line"><span class="string">          a.id AS _id,</span></span><br><span class="line"><span class="string">          a.order_no,</span></span><br><span class="line"><span class="string">          a.money,</span></span><br><span class="line"><span class="string">          a.receiver_name,</span></span><br><span class="line"><span class="string">          a.receiver_phone,</span></span><br><span class="line"><span class="string">          a.create_time </span></span><br><span class="line"><span class="string">        FROM</span></span><br><span class="line"><span class="string">          canal_sync_order a&quot;</span></span><br><span class="line">  <span class="attr">etlCondition:</span> <span class="string">&quot;where a.create_time &gt;= &#123;&#125;&quot;</span></span><br><span class="line">  <span class="attr">commitBatch:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>启动 canal.deployer 和 canal.adapter</li>
<li>查询 canal.adapter 的日志，可以看到已经有数据同步了</li>
</ol>
<p><img data-src="/../../../../upload/2021/08/image-102c74281e0e4bf1896f3772cc3098e5.png" alt="image.png"></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li>插入数据，查看数据可以打开 kibana -&gt; Analytics -&gt; Discover</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `canal_sync_order` ( `order_no`, `money`, `receiver_name`, `receiver_phone` ) <span class="keyword">VALUES</span> ( <span class="string">&#x27;test213&#x27;</span>, <span class="number">5017.00</span>, <span class="string">&#x27;陈开开&#x27;</span>, <span class="string">&#x27;18312345678&#x27;</span> );</span><br></pre></td></tr></table></figure>
<p><img data-src="/../../../../upload/2021/08/image-8cfa3d886b1849f999d4e5880b4717b9.png" alt="image.png"><br><img data-src="/../../../../upload/2021/08/image-340fce423cbe43c283811b4fd8340822.png" alt="image.png"></p>
<ol start="2">
<li>修改及删除数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `canal_sync_order` <span class="keyword">SET</span> `receiver_name` <span class="operator">=</span> <span class="string">&#x27;陈一&#x27;</span>, `create_time` <span class="operator">=</span> now() <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">100003</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `canal_sync_order` <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">100003</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>全量数据同步测试</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">curl -X POST  http://localhost:8081/etl/es7/sync_order.yml</span><br><span class="line"></span><br><span class="line">&#123;&quot;succeeded&quot;:true,&quot;resultMessage&quot;:&quot;导入ES 数据：100000 条&quot;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><ul>
<li>c.a.o.canal.adapter.launcher.loader.CanalAdapterLoader - Load canal adapter: es7 failed java.lang.RuntimeException: java.lang.RuntimeException: java.lang.ClassCastException: com.alibaba.druid.pool.DruidDataSource cannot be cast to com.alibaba.druid.pool.DruidDataSource<br>原因：这是因为 escore 模块 与 common 模块的 jar 包冲突所导致的<br>解决方案：<ol>
<li>下载源码：<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a></li>
<li>修改 client-adapter -&gt; escore -&gt; pom.xml 的 druid 作用域  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>重新打包，将 es7x 模块的 client-adapter.es7x-1.1.5-jar-with-dependencies.jar 放到我们的 canal.adapter-1.1.5&#x2F;plugin 目录下，覆盖原文件</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>数据同步</tag>
        <tag>Canal</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式链路追踪-SkyWalking</title>
    <url>/2021/08/28/214020.html</url>
    <content><![CDATA[<blockquote>
<p>分布式链路追踪-SkyWalking</p>
</blockquote>
<span id="more"></span>

<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><table>
<thead>
<tr>
<th align="center">技术</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ElasticSearch</td>
<td align="center">7.12.0</td>
</tr>
<tr>
<td align="center">Skywalking</td>
<td align="center">8.7.0</td>
</tr>
</tbody></table>
<h4 id="配置-SkyWalking"><a href="#配置-SkyWalking" class="headerlink" title="配置 SkyWalking"></a>配置 SkyWalking</h4><ol>
<li><a href="https://archive.apache.org/dist/skywalking/8.7.0/apache-skywalking-apm-es7-8.7.0.tar.gz">下载</a></li>
<li>修改管理平台配置（webapp&#x2F;webapp.yml）</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8828</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">oap-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://oap-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/graphql/**</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">simple:</span></span><br><span class="line">          <span class="attr">instances:</span></span><br><span class="line">            <span class="attr">oap-service:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">uri:</span> <span class="string">http://127.0.0.1:12800</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改收集器配置（config&#x2F;application.yml）</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_STORAGE:elasticsearch7&#125;</span></span><br><span class="line">  <span class="attr">elasticsearch7:</span></span><br><span class="line">    <span class="attr">nameSpace:</span> <span class="string">$&#123;SW_NAMESPACE:&quot;elasticsearch&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动 es 和 skywalking，可以看到 Skywalking-Webapp 和 Skywalking-Collector 已经在运行了</li>
<li>打开 <a href="http://localhost:8828/">http://localhost:8828</a> 看到如下界面即可，当然，你现在应该是没有数据显示的</li>
</ol>
<p><img data-src="/../../../../upload/2021/08/image-18cfcb9e0d1e4664abe3d4fc93963bd0.png" alt="image.png"></p>
<h4 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h4><ol>
<li>修改 JVM 启动参数（每个服务都需要进行这项配置）</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-javaagent:D:\apache-skywalking-apm-bin-es7\agent\skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=systemService</span><br><span class="line">-Dskywalking.plugin.jdbc.trace_sql_parameters=true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>javaagent：探针所在的位置<br>这里的配置是为了覆盖 agent&#x2F;config&#x2F;agent.config<br>service_name：管理平台页面中看到的服务名称<br>trace_sql_parameters：输出 sql 参数<br>backend_service：收集器服务的地址，默认 127.0.0.1:11800</p>
</blockquote>
<p><img data-src="/../../../../upload/2021/08/image-6cb1c1f816fc4266ba0eb9804313b4ac.png" alt="image.png"></p>
<ol start="2">
<li>启动服务，随意访问几个接口，打开管理平台界面，已经有数据显示了</li>
</ol>
<p><img data-src="/../../../../upload/2021/08/image-39edc3f72d3b48afbce494b2b025385f.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/08/image-f1b6d748657a46fa9274c7f019b3ac22.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-12_23-46-52-fc1db0602e704bd4be6a365b7daddb07.png" alt="image.png"></p>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><h5 id="监控-SpringCloud-Gateway"><a href="#监控-SpringCloud-Gateway" class="headerlink" title="监控 SpringCloud Gateway"></a>监控 SpringCloud Gateway</h5><p>将 agent&#x2F;optional-plugins 下的 apm-spring-cloud-gateway-3.x-plugin-8.7.0.jar 和 apm-spring-webflux-5.x-plugin-8.7.0.jar 放到 agent&#x2F;plugins 后重启服务即可</p>
<h5 id="监控-Spring-Bean"><a href="#监控-Spring-Bean" class="headerlink" title="监控 Spring Bean"></a>监控 Spring Bean</h5><p>将 agent&#x2F;optional-plugins&#x2F;apm-spring-annotation-plugin-8.7.0.jar 放到 agent&#x2F;plugins 后重启服务即可</p>
<h5 id="监控任意代码"><a href="#监控任意代码" class="headerlink" title="监控任意代码"></a>监控任意代码</h5><ol>
<li>将 agent&#x2F;optional-plugins&#x2F;apm-customize-enhance-plugin-8.7.0.jar 放到 agent&#x2F;plugins 目录下</li>
<li>在 agent 目录下创建文件 enhance.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enhanced</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">class_name</span>=<span class="string">&quot;com.github.pagehelper.page.pageMethod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">method</span> <span class="attr">method</span>=<span class="string">&quot;startPage(int.class,int.class)&quot;</span> <span class="attr">operation_name</span>=<span class="string">&quot;/pageHelper&quot;</span> <span class="attr">static</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">operation_name_suffix</span>&gt;</span>arg[0]<span class="tag">&lt;/<span class="name">operation_name_suffix</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">operation_name_suffix</span>&gt;</span>arg[1]<span class="tag">&lt;/<span class="name">operation_name_suffix</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tag</span> <span class="attr">key</span>=<span class="string">&quot;tag_1&quot;</span>&gt;</span>arg[0]<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">log</span> <span class="attr">key</span>=<span class="string">&quot;log_1&quot;</span>&gt;</span>arg[0]<span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">enhanced</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改 agent\config\agent.config 文件，plugin.customize.enhance_file&#x3D;D:\apache-skywalking-apm-bin-es7\agent\enhance.xml</li>
</ol>
<h4 id="告警"><a href="#告警" class="headerlink" title="告警"></a>告警</h4><ol>
<li>修改 D:\apache-skywalking-apm-bin-es7\config\alarm-settings.yml</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">    <span class="attr">service_response_time_rule:</span></span><br><span class="line">      <span class="attr">metrics-name:</span> <span class="string">service_resp_time</span></span><br><span class="line">      <span class="attr">threshold:</span> <span class="number">1000</span></span><br><span class="line">      <span class="attr">op:</span> <span class="string">&quot;&gt;&quot;</span></span><br><span class="line">      <span class="attr">period:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">count:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">服务:&#123;&#125;最近2分钟以内，最近1分钟的响应超过了1s</span></span><br><span class="line"><span class="attr">webhooks:</span></span><br><span class="line">    <span class="comment"># 告警通知地址</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://127.0.0.1/notify/</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>告警信息示例</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scopeId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SERVICE&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;serviceA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id0&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id1&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ruleName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;service_response_time_rule&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alarmMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;服务:systemService最近2分钟以内，最近1分钟的响应超过了1s&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;startTime&quot;</span><span class="punctuation">:</span> <span class="number">1636808799000</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h4 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h4><ol>
<li>修改 D:\apache-skywalking-apm-bin-es7\config\application.yml 后重启 Skywalking</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">configuration:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="comment"># Nacos Server Host</span></span><br><span class="line">    <span class="attr">serverAddr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># Nacos Server Port</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8848</span></span><br><span class="line">    <span class="comment"># Nacos Configuration Group</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">skywalking</span></span><br><span class="line">    <span class="comment"># Nacos Configuration namespace</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">public</span></span><br><span class="line">    <span class="comment"># Unit seconds, sync period. Default fetch every 60 seconds.</span></span><br><span class="line">    <span class="attr">period:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment"># Nacos auth username</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="comment"># Nacos auth accessKey</span></span><br><span class="line">    <span class="comment"># accessKey: $&#123;SW_CONFIG_NACOS_ACCESSKEY:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="comment"># secretKey: $&#123;SW_CONFIG_NACOS_SECRETKEY:&quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 nacos 中添加 Skywalking 相关配置</li>
</ol>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-13_21-19-37-ed187d67af4948e693232b97a722b89c.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>SkyWalking</tag>
        <tag>分布式链路追踪</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务解决方案-RocketMQ</title>
    <url>/2021/09/03/232838.html</url>
    <content><![CDATA[<blockquote>
<p>项目地址：<a href="https://github.com/chenkaixin12121/study/tree/master/rocketmq">https://github.com/chenkaixin12121/study/tree/master/rocketmq</a></p>
</blockquote>
<span id="more"></span>

<p><img data-src="/../../../../upload/2021/09/image-2dc1a86ddd56411895433f2708d9400b.png" alt="image.png"></p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="订单服务发送事务消息"><a href="#订单服务发送事务消息" class="headerlink" title="订单服务发送事务消息"></a>订单服务发送事务消息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> Order.builder()</span><br><span class="line">                .userId(<span class="string">&quot;10&quot;</span>)</span><br><span class="line">                .commodityCode(<span class="string">&quot;product-1&quot;</span>)</span><br><span class="line">                .count(<span class="number">1</span>)</span><br><span class="line">                .money(<span class="number">60</span>)</span><br><span class="line">                .build();</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;commodityCode&quot;</span>, order.getCommodityCode());</span><br><span class="line">        map.put(<span class="string">&quot;count&quot;</span>, order.getCount());</span><br><span class="line">        <span class="type">TransactionSendResult</span> <span class="variable">transactionSendResult</span> <span class="operator">=</span> rocketMQTemplate.sendMessageInTransaction(</span><br><span class="line">                <span class="string">&quot;txTopic:txTag&quot;</span>,</span><br><span class="line">                MessageBuilder.withPayload(map)</span><br><span class="line">                        .setHeader(RocketMQHeaders.TRANSACTION_ID, UUID.randomUUID().toString())</span><br><span class="line">                        .build(),</span><br><span class="line">                order);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送事务消息成功：&quot;</span> + transactionSendResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="订单服务接收事务消息"><a href="#订单服务接收事务消息" class="headerlink" title="订单服务接收事务消息"></a>订单服务接收事务消息</h4><p>接收消息后，执行本地事务，本地事务成功，则提交事务，否则回滚事务，如长时间无法收到事务消息状态的变更，则调用事务状态回查进行提交或回滚，所以我们在本地事务中需要记录事务执行日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RocketMQTransactionListener</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTxListener</span> <span class="keyword">implements</span> <span class="title class_">RocketMQLocalTransactionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderRepository orderRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionLogRepository transactionLogRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RocketMQLocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;收到创建订单事务消息，msg：&#123;&#125;，arg：&#123;&#125;&quot;</span>, msg, arg);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> (Order) arg;</span><br><span class="line"></span><br><span class="line">        <span class="type">MessageHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> msg.getHeaders();</span><br><span class="line">        <span class="type">String</span> <span class="variable">transactionId</span> <span class="operator">=</span> (String) headers.get(RocketMQHeaders.TRANSACTION_ID);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">TransactionLog</span> <span class="variable">transactionLog</span> <span class="operator">=</span> TransactionLog.builder()</span><br><span class="line">                    .transactionId(transactionId)</span><br><span class="line">                    .log(<span class="string">&quot;创建订单事务消息&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="built_in">this</span>.saveOrder(order, transactionLog);</span><br><span class="line">            log.info(<span class="string">&quot;创建订单事务提交：&#123;&#125;&quot;</span>, transactionId);</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建订单事务回滚：&#123;&#125;&quot;</span>, transactionId);</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.ROLLBACK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RocketMQLocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="type">MessageHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> msg.getHeaders();</span><br><span class="line">        <span class="type">String</span> <span class="variable">transactionId</span> <span class="operator">=</span> (String) headers.get(RocketMQHeaders.TRANSACTION_ID);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">resultCount</span> <span class="operator">=</span> transactionLogRepository.countByTransactionId(transactionId);</span><br><span class="line">        <span class="keyword">if</span> (resultCount == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;创建订单回查事务回滚：&#123;&#125;&quot;</span>, transactionId);</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.ROLLBACK;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;创建订单回查事务提交：&#123;&#125;&quot;</span>, transactionId);</span><br><span class="line">        <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrder</span><span class="params">(Order order, TransactionLog transactionLog)</span> &#123;</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">        transactionLogRepository.save(transactionLog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="库存服务收到扣减库存消息"><a href="#库存服务收到扣减库存消息" class="headerlink" title="库存服务收到扣减库存消息"></a>库存服务收到扣减库存消息</h4><p>库存服务收到扣减库存消息，如果本地事务执行失败，则进行重试（因为追求的是最终一致性），重试达一定次数后失败消息入库，由人工进行处理，这里也需要判断消息是否重复消费</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;txTopic&quot;, selectorExpression = &quot;txTag&quot;, consumerGroup = &quot;tx-consumer-group&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeductionStorageListener</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;MessageExt&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StorageRepository storageRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(MessageExt message)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">        log.info(<span class="string">&quot;收到扣减库存消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> message.getMsgId();</span><br><span class="line">        <span class="keyword">if</span> (stringRedisTemplate.opsForSet().isMember(<span class="string">&quot;msgId&quot;</span>, msgId)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;msgId：&#123;&#125;，消息不能重复消费&quot;</span>, msgId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Storage</span> <span class="variable">storage</span> <span class="operator">=</span> JSONUtil.toBean(msg, Storage.class);</span><br><span class="line"><span class="comment">//            int i = 1/0;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Storage</span> <span class="variable">selectStorage</span> <span class="operator">=</span> storageRepository.findByCommodityCode(storage.getCommodityCode());</span><br><span class="line">            selectStorage.setCount(selectStorage.getCount() - storage.getCount());</span><br><span class="line">            storageRepository.save(selectStorage);</span><br><span class="line"></span><br><span class="line">            stringRedisTemplate.opsForSet().add(<span class="string">&quot;msgId&quot;</span>, msgId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (message.getReconsumeTimes() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;扣减库存消息消费失败，进行第 &#123;&#125; 次重试&quot;</span>, message.getReconsumeTimes() + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;扣减库存消息已达最大重试次数&quot;</span>);</span><br><span class="line">                <span class="comment">// TODO 失败消息入库</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li>测试成功执行，<a href="http://localhost:8088/order/save">http://localhost:8088/order/save</a></li>
<li>测试事务状态回查，启动两个服务，在事务状态提交时打断点，并强制杀死订单服务的进程（不要使用IDEA进行关闭服务），重启订单服务一分钟后，打印日志“创建订单回查事务提交”</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr 8088</span><br><span class="line">taskkill /f /pid 11240</span><br></pre></td></tr></table></figure>

<p><img data-src="/../../../../upload/2021/09/image-be42465e5e854d89927856600f67ac0e.png" alt="image.png"></p>
<ol start="3">
<li>测试扣减库存消息的重试，去除 DeductionStorageListener 的注释即可</li>
<li>测试消息重复消费，打开 rocketmq-dashboard：<a href="https://github.com/apache/rocketmq-dashboard">https://github.com/apache/rocketmq-dashboard</a> ，根据消息主题找到消息后重新发送</li>
</ol>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
        <tag>分布式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurityOAuth2自定义异常</title>
    <url>/2021/09/09/203427.html</url>
    <content><![CDATA[<blockquote>
<p>在使用 SpringSecurityOAuth2 中，用户名或密码失败可以使用 InvalidGrantException 来捕获，账户禁用等异常可以使用 InternalAuthenticationServiceException 来捕获，但是客户端认证失败（无效的凭据）无法使用全局异常处理器来捕获，因为是发生在 filter ，此时还没有到 DispatcherServlet 请求处理流程上，我们可以查看源码进行分析，找到对应的解决方案</p>
</blockquote>
<span id="more"></span>

<h4 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h4><p>客户端的认证处理顺序是 ClientCredentialsTokenEndpointFilter - OAuth2AuthenticationEntryPoint - AbstractOAuth2SecurityExceptionHandler#doHandle，可以看到 result 就是返回的结果。</p>
<p><img data-src="/../../../../upload/2021/09/image-4d753c487a374fab9f062c2ee3985bde.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/09/image-be1913fc85734115863c0e077e51f196.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/09/image-ee9003cc5d084128a85109ea8b47e14f.png" alt="image.png"></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>既然已经知道认证失败异常是通过 OAuth2AuthenticationEntryPoint 来得到响应结果的，所以我们可以重写 ClientCredentialsTokenEndpointFilter 并使用自定义的 OAuth2AuthenticationEntryPoint 进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oauth2ServerConfig</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常响应数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationEntryPoint <span class="title function_">authenticationEntryPoint</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (request, response, e) -&gt; &#123;</span><br><span class="line">            log.error(<span class="string">&quot;无效凭据：&quot;</span>, e);</span><br><span class="line">            response.setStatus(HttpStatus.OK.value());</span><br><span class="line">            response.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">            response.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">            response.setHeader(HttpHeaders.CACHE_CONTROL, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(StandardCharsets.UTF_8.name());</span><br><span class="line">            <span class="type">ServerResponse</span> <span class="variable">serverResponse</span> <span class="operator">=</span> ServerResponse.createByError(ResultEnum.INVALID_CLIENT);</span><br><span class="line">            response.getWriter().print(JSONUtil.toJson(serverResponse));</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置自定义filter</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> security</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> &#123;</span><br><span class="line">        <span class="type">CustomClientCredentialsTokenEndpointFilter</span> <span class="variable">endpointFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomClientCredentialsTokenEndpointFilter</span>(security);</span><br><span class="line">        endpointFilter.afterPropertiesSet();</span><br><span class="line">        endpointFilter.setAuthenticationEntryPoint(authenticationEntryPoint());</span><br><span class="line"></span><br><span class="line">        security.addTokenEndpointAuthenticationFilter(endpointFilter);</span><br><span class="line">        security.authenticationEntryPoint(authenticationEntryPoint())</span><br><span class="line">                .tokenKeyAccess(<span class="string">&quot;isAuthenticated()&quot;</span>)</span><br><span class="line">                .checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义filter，处理错误的凭据，用于统一异常信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenkaixin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/9/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomClientCredentialsTokenEndpointFilter</span> <span class="keyword">extends</span> <span class="title class_">ClientCredentialsTokenEndpointFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthorizationServerSecurityConfigurer configurer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomClientCredentialsTokenEndpointFilter</span><span class="params">(AuthorizationServerSecurityConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configurer = configurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthenticationEntryPoint</span><span class="params">(AuthenticationEntryPoint authenticationEntryPoint)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setAuthenticationEntryPoint(<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.authenticationEntryPoint = authenticationEntryPoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationManager <span class="title function_">getAuthenticationManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configurer.and().getSharedObject(AuthenticationManager.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">        setAuthenticationFailureHandler((request, response, exception) -&gt; authenticationEntryPoint.commence(request, response, exception));</span><br><span class="line">        setAuthenticationSuccessHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>原来的返回结果为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;invalid_client&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error_description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad client credentials&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>现在的返回结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1060</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无效凭据&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>正则学习</title>
    <url>/2021/09/09/113715.html</url>
    <content><![CDATA[<blockquote>
<p>正则学习</p>
</blockquote>
<span id="more"></span>

<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\</td>
<td align="center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配字母或数字或下划线</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配任意的空白符</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">匹配数字</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">匹配任意非数字的字符</td>
</tr>
<tr>
<td align="center">[abc] or [a-c]</td>
<td align="center">匹配括号内的任意字符</td>
</tr>
<tr>
<td align="center">[^abc] or [^a-c]</td>
<td align="center">匹配除了括号内的字符以外的任意字符</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">匹配一个换页符</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">匹配一个换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">匹配一个回车符</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">匹配一个制表符</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">匹配一个垂直制表符</td>
</tr>
</tbody></table>
<h5 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h5><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">重复零次或更多次</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">重复一次或更多次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">重复零次或一次</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">重复n次</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td align="center">重复n次或更多次</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center">重复n到m次</td>
</tr>
</tbody></table>
<h5 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h5><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\b</td>
<td align="center">匹配单词的开始或结束</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配字符串的开始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">匹配字符串的结束</td>
</tr>
</tbody></table>
<h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td align="center">忽略大小写</td>
</tr>
<tr>
<td align="center">g</td>
<td align="center">全局匹配，查找所有的匹配项</td>
</tr>
<tr>
<td align="center">m</td>
<td align="center">多行匹配，使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">默认情况下的圆点 . 是匹配除换行符 \n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \n</td>
</tr>
</tbody></table>
<h5 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h5><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\</td>
<td align="center">转义符</td>
</tr>
<tr>
<td align="center">(), (?:), (?&#x3D;), []</td>
<td align="center">圆括号和方括号</td>
</tr>
<tr>
<td align="center">*, +, ?, {n}, {n,}, {n,m}</td>
<td align="center">限定符</td>
</tr>
<tr>
<td align="center">^, $, \任何元字符及任何字符</td>
<td align="center">定位点和序列（即：位置和顺序）</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">替换，”或”操作，字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”</td>
</tr>
</tbody></table>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="匹配版本号"><a href="#匹配版本号" class="headerlink" title="匹配版本号"></a>匹配版本号</h5><p><code>^\d+(.\d+)&#123;2&#125;$</code></p>
<h5 id="匹配中文"><a href="#匹配中文" class="headerlink" title="匹配中文"></a>匹配中文</h5><p><code>^[\u4e00-\u9fa5]$</code></p>
<h5 id="匹配图片链接"><a href="#匹配图片链接" class="headerlink" title="匹配图片链接"></a>匹配图片链接</h5><p><code>^(http|https)://(.+/)+.+(.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$</code></p>
<h5 id="匹配手机号"><a href="#匹配手机号" class="headerlink" title="匹配手机号"></a>匹配手机号</h5><p><code>^1(?:(?:3[\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[189]))\d&#123;8&#125;$</code></p>
<h5 id="匹配身份证号"><a href="#匹配身份证号" class="headerlink" title="匹配身份证号"></a>匹配身份证号</h5><p><code>^[1-9]\d&#123;5&#125;(?:18|19|20)\d&#123;2&#125;(?:0[1-9]|10|11|12)(?:0[1-9]|[1-2]\d|30|31)\d&#123;3&#125;[\dXx]$</code></p>
<h5 id="匹配邮箱"><a href="#匹配邮箱" class="headerlink" title="匹配邮箱"></a>匹配邮箱</h5><p><code>^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$</code></p>
<h5 id="匹配Mac地址"><a href="#匹配Mac地址" class="headerlink" title="匹配Mac地址"></a>匹配Mac地址</h5><p><code>[0-9a-fA-F]&#123;2&#125;(:[0-9a-fA-F]&#123;2&#125;)&#123;5&#125;</code></p>
<h5 id="匹配指定文本"><a href="#匹配指定文本" class="headerlink" title="匹配指定文本"></a>匹配指定文本</h5><p>### 1.<br>### 1.1<br>### 1.3.4</p>
<p><code>^###\s(\d+.)&#123;1,2&#125;(\d+|)$</code></p>
<h5 id="匹配并替换指定文本"><a href="#匹配并替换指定文本" class="headerlink" title="匹配并替换指定文本"></a>匹配并替换指定文本</h5><p><img data-src="/../../../../upload/2023/12/Snipaste_2023-12-11_18-24-26.png" alt="image.png"></p>
<p><code>(\w*\.?\w*(\(\))&#123;0,&#125;)\s?==(\s\w*\.?\w*(\(\))&#123;0,&#125;)</code><br><code>StrUtil.equals($1,$3)</code></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>MongoDB时间字段比较</title>
    <url>/2021/09/20/202133.html</url>
    <content><![CDATA[<blockquote>
<p>MongoDB 时间字段比较</p>
</blockquote>
<span id="more"></span>

<p>在实际开发中可能会有这种需求，查询 A 时间大于 B 时间的所有记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_no <span class="keyword">FROM</span> order_info <span class="keyword">WHERE</span> time1 <span class="operator">&gt;</span> time2</span><br></pre></td></tr></table></figure>

<p>在 mysql 中，我们使用上面的 sql 即可，但 mongo 中不支持这种语法，我们可以使用其他的办法，如使用 $where 操作符</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.orderInfo.find(&#123;</span><br><span class="line">    $where: &quot;this.time1 &gt; this.time2&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>不过，使用这种方法是不会用到索引的，所以查询效率很慢，所以需要一种更高效的方法，使用聚合操作</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">db.orderInfo.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;$project&quot;: &#123;</span><br><span class="line">            &quot;time1&quot;: 1,</span><br><span class="line">            &quot;time2&quot;: 1,</span><br><span class="line">            &quot;diff&quot;: &#123;</span><br><span class="line">                &quot;$subtract&quot;: [&quot;$time1&quot;, &quot;$time2&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;$match&quot;: &#123;</span><br><span class="line">            &quot;diff&quot;: &#123;</span><br><span class="line">                &quot;$gt&quot;: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>先计算 diff 的值，为 time1 - time2 的毫秒数，match 阶段筛选出 diff &gt; 0 的所有记录</p>
<p>在程序中使用 mongoTemplate 查询</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span><br><span class="line">        Aggregation.project(&quot;time1&quot;, &quot;time2&quot;).andExpression(&quot;time1 - time2&quot;).as(&quot;diff&quot;),</span><br><span class="line">        Aggregation.match(Criteria.where(&quot;diff&quot;).gt(0))</span><br><span class="line">);</span><br><span class="line">List&lt;OrderInfo&gt; resultList = mongoTemplate.aggregate(aggregation, OrderInfo.class).getMappedResults();</span><br><span class="line">System.out.println(resultList);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM内存结构</title>
    <url>/2021/10/08/201738.html</url>
    <content><![CDATA[<blockquote>
<p>JVM内存结构</p>
</blockquote>
<span id="more"></span>

<p>内存是非常重要的系统资源，是硬盘和 CPU 的中间仓库及桥梁，承载着操作系统和应用程序的实时运行，JVM 内存结构规定了 java 在运行过程中内存申请、分配、管理的策略，保证了 JVM 的高效稳定运行，不同的 JVM 对于内存的划分方式和管理机制存在着部分差异</p>
<p><img data-src="/../../../../upload/2021/11/up-6d8ce51d2963355c8d8cb86962b08cd7d12-ec27f2ce0a9c4cc0bcb5059590944d49.png" alt="image.png"></p>
<p>上图是 JVM 整体架构，中间部分就是 java 虚拟机定义的各种运行时数据区域</p>
<h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><p>java 虚拟机栈（Java Virtual Machine Stacks），早期也叫 java 栈，每个线程在创建的时候都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次 java 方法调用，是线程私有的，生命周期和线程一致</p>
<p>作用：主导 java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回</p>
<p>特点：</p>
<ul>
<li>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器</li>
<li>JVM 直接对虚拟机栈的操作只有两个：每个方法执行，伴随着入栈（进栈&#x2F;压栈），方法执行结束出栈</li>
<li>栈不存在垃圾回收问题</li>
</ul>
<p>可能出现的异常：</p>
<p>java 虚拟机规范允许 java 虚拟机栈的大小是动态的或者是固定不变的   </p>
<ul>
<li>如果采用固定大小的 java 虚拟机栈，那每个线程的 java 虚拟机栈容量可以在线程创建的时候独立选定，如果线程请求分配的栈容量超过 java 虚拟机栈允许的最大容量，java 虚拟机将会抛出一个 StackOverflowError 异常</li>
<li>如果 java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 java 虚拟机将会抛出一个 OutOfMemoryError 异常</li>
</ul>
<p>可以通过参数 -Xss 来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度</p>
<h5 id="栈的存储单位"><a href="#栈的存储单位" class="headerlink" title="栈的存储单位"></a>栈的存储单位</h5><ul>
<li>每个线程都有自己的栈，栈中的数据都是以栈帧的格式存在</li>
<li>在这个线程上正在执行的每个方法都各自有对应的一个栈帧</li>
<li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</li>
</ul>
<h5 id="栈的运行原理"><a href="#栈的运行原理" class="headerlink" title="栈的运行原理"></a>栈的运行原理</h5><ul>
<li>JVM 直接对 java 栈的操作只有两个，对栈帧的压栈和出栈，遵循“先进后出&#x2F;后进先出”原则 </li>
<li>在一个活动线程中，一个时间点上，只会有一个活动的栈帧，即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈帧（Current Frame），与当前栈帧对应的方法就是当前方法（Current Method），定义这个方法的类就是当前类（Current Class）</li>
<li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作</li>
<li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，称为新的当前栈帧 </li>
<li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个线程的栈帧 </li>
<li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧</li>
<li>java 方法有两种返回函数的方式，一种是正常的函数返回，使用 return 指令，另一种是抛出异常，不管用哪种方式，都会导致栈帧被弹出</li>
</ul>
<h5 id="栈帧的内部结构"><a href="#栈帧的内部结构" class="headerlink" title="栈帧的内部结构"></a>栈帧的内部结构</h5><ul>
<li>局部变量表（Local Variables）</li>
<li>操作数栈（Operand Stack）(或称为表达式栈)</li>
<li>动态链接（Dynamic Linking）：指向运行时常量池的方法引用</li>
<li>方法返回地址（Return Address）：方法正常退出或异常退出的地址</li>
<li>一些附加信息</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/image-b29fd55537cc48c591df6f6d9127a1fa.png" alt="image.png"></p>
<h6 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h6><ul>
<li>局部变量表也被称为局部变量数组或者本地变量表</li>
<li>是一组变量值存储空间，主要用于存储方法参数和定义在方法体内的局部变量，包括编译器可知的各种 java 虚拟机基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此相关的位置）和 returnAddress 类型（指向了一条字节码指令的地址，已被异常表取代）</li>
<li>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题</li>
<li>局部变量表所需要的容量大小是编译期确定下来的，并保存在方法的 Code 属性的 maximum local variables 数据项中，在方法运行期间是不会改变局部变量表的大小的</li>
<li>方法嵌套调用的次数由栈的大小决定，一般来说，栈越大，方法嵌套调用次数越多，对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求，进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少，局部变量表中的变量只在当前方法调用中有效，在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程，当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁</li>
<li>参数值的存放总是在局部变量数组的 index0 开始，到数组长度 -1 的索引结束</li>
</ul>
<p>槽（Slot）：</p>
<ul>
<li>局部变量表最基本的存储单元是 Slot（变量槽）</li>
<li>在局部变量表中，32 位以内的类型只占用一个 Slot（包括 returnAddress 类型），64 位的类型（long 和 double）占用两个连续的 Slot <ul>
<li>byte、short、char 在存储前被转换为 int，boolean 也被转换为 int，0 表示 false，非 0 表示 true</li>
<li>long 和 double 则占据两个 Slot</li>
</ul>
</li>
<li>JVM 会为局部变量表中的每一个 Slot 都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值，索引值的范围从 0 开始到局部变量表最大的 Slot 数量</li>
<li>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个 Slot 上</li>
<li>如果需要访问局部变量表中一个 64bit 的局部变量值时，只需要使用前一个索引即可（比如：访问 long 或 double 类型变量，不允许采用任何方式单独访问其中的某一个 Slot）</li>
<li>如果当前帧是由构造方法或实例方法创建的，那么该对象引用 this 将会存放在 index 为 0 的 Slot 处，其余的参数按照参数表顺序继续排列（这里就引出一个问题：静态方法中为什么不可以引用 this，就是因为 this 变量不存在于当前方法的局部变量表中）</li>
<li>栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的</li>
</ul>
<h6 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h6><ul>
<li>每个独立的栈帧中除了包含局部变量表之外，还包含一个后进先出（Last-In-First-Out）的操作数栈，也可以称为表达式栈（Expression Stack） </li>
<li>操作数栈，在方法执行过程中，根据字节码指令，往操作数栈中写入数据或提取数据，即入栈（push）、出栈（pop） </li>
<li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈，使用它们后再把结果压入栈，比如，执行复制、交换、求和等操作</li>
<li>操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</li>
<li>操作数栈就是 JVM 执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，此时这个方法的操作数栈是空的 </li>
<li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的 Code 属性的 max_stack 数据项中</li>
<li>栈中的任何一个元素都可以是任意的 java 数据类型<ul>
<li>32bit 的类型占用一个栈单位深度</li>
<li>64bit 的类型占用两个栈单位深度</li>
</ul>
</li>
<li>操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈和出栈操作来完成一次数据访问 </li>
<li>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新 PC 寄存器中下一条需要执行的字节码指令 </li>
<li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证 </li>
<li>另外，我们说 java 虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈</li>
</ul>
<p>栈顶缓存（Top-of-stack-Cashing）:</p>
<ul>
<li>HotSpot 的执行引擎采用的并非是基于寄存器的架构，但这并不代表 HotSpot VM 的实现并没有间接利用到寄存器资源，寄存器是物理 CPU 中的组成部分之一，它同时也是 CPU 中非常重要的高速存储资源，一般来说，寄存器的读&#x2F;写速度非常迅速，甚至可以比内存的读&#x2F;写速度快上几十倍不止，不过寄存器资源却非常有限，不同平台下的 CPU 寄存器数量是不同和不规律的，寄存器主要用于缓存本地机器指令、数值和下一条需要被执行的指令地址等数据</li>
<li>基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读&#x2F;写次数，由于操作数是存储在内存中的，因此频繁的执行内存读&#x2F;写操作必然会影响执行速度，为了解决这个问题，HotSpot JVM 设计者们提出了栈顶缓存技术，将栈顶元素全部缓存在物理 CPU 的寄存器中，以此降低对内存的读&#x2F;写次数，提升执行引擎的执行效率</li>
</ul>
<h6 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h6><p>指向运行时常量池的方法引用</p>
<ul>
<li>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用，包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接（Dynamic Linking）</li>
<li>在 java 源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在 Class 文件的常量池中，比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/image-8307b672a03d4a92bc175ab6163b4b90.png" alt="image.png"></p>
<p>JVM 是如何执行方法调用的</p>
<p>方法调用不同于方法执行，方法调用阶段的唯一任务就是确定被调用方法的版本（即调用哪一个方法），暂时还不涉及方法内部的具体运行过程，Class 文件的编译过程中不包括传统编译器中的连接步骤，一切方法调用在 Class文件里面存储的都是符号引用，而不是方法在实际运行时内存布局中的入口地址（直接引用），也就是需要在类加载阶段，甚至到运行期才能确定目标方法的直接引用</p>
<p>在 JVM 中，将符号引用转换为调用方法的直接引用与方法的绑定机制有关</p>
<ul>
<li>静态链接：当一个字节码文件被装载进 JVM 内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时，这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接</li>
<li>动态链接：如果被调用的方法在编译期无法被确定下来，也就是说，只能在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接</li>
</ul>
<p>对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding），绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次</p>
<ul>
<li>早期绑定：早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用</li>
<li>晚期绑定：如果被调用的方法在编译器无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式就被称为晚期绑定</li>
</ul>
<p>虚方法和非虚方法</p>
<ul>
<li>如果方法在编译器就确定了具体的调用版本，这个版本在运行时是不可变的，这样的方法称为非虚方法，比如静态方法、私有方法、final 方法、实例构造器、父类方法都是非虚方法 </li>
<li>其他方法称为虚方法</li>
</ul>
<p>虚方法表</p>
<ul>
<li>在面向对象编程中，会频繁的使用到动态分派，如果每次动态分派都要重新在类的方法元数据中搜索合适的目标有可能会影响到执行效率，为了提高性能，JVM 采用在类的方法区建立一个虚方法表（Virtual Method Table），使用索引表来代替查找，非虚方法不会出现在表中</li>
<li>每个类中都有一个虚方法表，表中存放着各个方法的实际入口</li>
<li>虚方法表会在类加载的连接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM 会把该类的方法表也初始化完毕</li>
</ul>
<h6 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h6><p>用来存放调用该方法的 PC 寄存器的值</p>
<p>一个方法的结束，有两种方式</p>
<ul>
<li>正常执行完成</li>
<li>出现未处理的异常，非正常退出</li>
</ul>
<p>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置，方法正常退出时，调用者的 PC 计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址，而通过异常退出的，返回地址是要通过异常表来确定的，栈帧中一般不会保存这部分信息</p>
<p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p>
<ul>
<li>执行引擎遇到任意一个方法返回的字节码指令，会有返回值传递给上层的方法调用者，简称正常完成出口<br>一个方法的正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定<br>在字节码指令中，返回指令包含 ireturn（当返回值是 boolean、byte、char、short 和 int 类型时使用）、lreturn、freturn、dreturn 以及 areturn，另外还有一个 return 指令供声明为 void 的方法、实例初始化方法、类和接口的初始化方法使用</li>
<li>在方法执行的过程中遇到了异常，并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出，简称异常完成出口<br>方法执行过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码</li>
</ul>
<p>本质上，方法的退出就是当前栈帧出栈的过程，此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去</p>
<p>正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值</p>
<h6 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h6><p>栈帧中还允许携带与 java 虚拟机实现相关的一些附加信息，例如，对程序调试提供支持的信息，但这些信息取决于具体的虚拟机实现</p>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>简单的讲，一个 Native Method 就是一个 java 调用非 java 代码的接口，我们知道的 Unsafe 类就有很多本地方法</p>
<h5 id="为什么要使用本地方法"><a href="#为什么要使用本地方法" class="headerlink" title="为什么要使用本地方法"></a>为什么要使用本地方法</h5><ul>
<li>与 java 环境外交互：有时 java 应用需要与 java 外面的环境交互，这就是本地方法存在的原因</li>
<li>与操作系统交互：JVM 支持 java 语言本身和运行时库，但是有时仍需要依赖一些底层系统的支持，通过本地方法，我们可以实现用 java 与实现了 jre 的底层系统交互， JVM 的一些部分就是 C 语言写的</li>
<li>Sun’s Java：Sun 的解释器就是 C 实现的，这使得它能像一些普通的 C 一样与外部交互，jre 大部分都是用 java 实现的，它也通过一些本地方法与外界交互，比如，类 java.lang.Thread 的 setPriority() 的方法是用 java 实现的，但它实现调用的是该类的本地方法 setPrioruty()，该方法是 C 实现的，并被植入 JVM 内部</li>
</ul>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>程序计数寄存器（Program Counter Register），Register 的命名源于 CPU 的寄存器，寄存器存储指令相关的线程信息，CPU 只有把数据装载到寄存器才能够运行</p>
<p>这里，并非是广义上所指的物理寄存器，叫程序计数器（或PC计数器或指令计数器）会更加贴切，并且也不容易引起一些不必要的误会，JVM 中的 PC 寄存器是对物理 PC 寄存器的一种抽象模拟</p>
<p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器</p>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>PC 寄存器用来存储指向下一条指令的地址，即将要执行的指令代码，由执行引擎读取下一条指令，</p>
<p>分析：进入 class 文件所在目录，执行 javap -v xx.class 反解析（或者通过 IDEA 插件 Jclasslib 直接查看），可以看到当前类对应的 Code 区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等信息</p>
<h5 id="使用-PC-寄存器存储字节码指令地址有什么用"><a href="#使用-PC-寄存器存储字节码指令地址有什么用" class="headerlink" title="使用 PC 寄存器存储字节码指令地址有什么用"></a>使用 PC 寄存器存储字节码指令地址有什么用</h5><p>因为 CPU 需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行，JVM 的字节码解释器就需要通过改变 PC 寄存器的值来明确下一条应该执行什么样的字节码指令</p>
<h5 id="PC-寄存器为什么会被设定为线程私有的"><a href="#PC-寄存器为什么会被设定为线程私有的" class="headerlink" title="PC 寄存器为什么会被设定为线程私有的"></a>PC 寄存器为什么会被设定为线程私有的</h5><p>多线程在一个特定的时间段内只会执行其中某一个线程方法，CPU 会不停的做任务切换，这样必然会导致经常中断或恢复，为了能够准确的记录各个线程正在执行的当前字节码指令地址，所以为每个线程都分配了一个 PC 寄存器，每个线程都独立计算，不会互相影响</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul>
<li>它是一块很小的内存空间，几乎可以忽略不计，也是运行速度最快的存储区域 </li>
<li>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致</li>
<li>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法，如果当前线程正在执行的是 java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）</li>
<li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</li>
<li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</li>
<li>它是唯一一个在 JVM 规范中没有规定任何 OutOfMemoryError 情况的区域</li>
</ul>
<h4 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h4><h5 id="内存划分"><a href="#内存划分" class="headerlink" title="内存划分"></a>内存划分</h5><p>对于大多数应用，java 堆是 java 虚拟机管理的内存中最大的一块，被所有线程共享，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数据都在这里分配内存</p>
<p>为了进行高效的垃圾回收，虚拟机把堆内存逻辑上划分成三块区域（分代的唯一理由就是优化 GC 性能）：</p>
<ul>
<li>新生代（年轻代）：新对象和没达到一定年龄的对象都在新生代</li>
<li>老年代（养老区）：被长时间使用的对象，老年代的内存空间应该要比年轻代更大</li>
<li>元空间（JDK8 之前叫永久代）：像一些方法中的操作临时对象等，JDK8 之前是占用 JVM 内存，JDK8 之后直接使用物理内存</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/image-f73e3ecec3e440269e84ab71abe8f69b.png" alt="image.png"></p>
<p>java 虚拟机规范规定，java 堆可以是处于物理上不连续的内存空间中，只要逻辑上是连续的即可，像磁盘空间一样，实现时，既可以是固定大小，也可以是可扩展的，主流虚拟机都是可扩展的（通过 -Xmx 和 -Xms 控制），如果堆中没有完成实例分配，并且堆无法再扩展时，就会抛出 OutOfMemoryError 异常</p>
<h6 id="年轻代（Young-Generation）"><a href="#年轻代（Young-Generation）" class="headerlink" title="年轻代（Young Generation）"></a>年轻代（Young Generation）</h6><p>年轻代是所有新对象创建的地方，在年轻代执行的垃圾收集被称为 Minor GC，年轻代默认被分为一个 Eden 和两个 Survivor，默认比例是 8:1:1</p>
<ul>
<li>新对象先放在 Eden 区，此区有大小限制</li>
<li>当 Eden 区的空间已经满了或放不下了，程序又需要创建对象，会触发 Minor GC</li>
<li>然后将 Eden 区的存活对象移动到 From Survivor 区</li>
<li>之后创建的对象会继续分配在 Eden 区，当 Eden 区又满了或放不下了，这时候将会把 Eden 区和 From Survivor 区的存活对象移动到 To Survivor 区</li>
<li>回收 Eden 区和 From 区的所有内存，然后反转 From Survivor 和 To Survivor 的功能</li>
<li>经历过默认 15 次垃圾回收的对象将会放到老年代</li>
</ul>
<p>空间分配担保：</p>
<p>在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的，如果不成立，则虚拟机会查看 HandlerPromotionFailure（true，false）是否允许担保失败，如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次 Minor GC，尽管这次 Minor GC 是有风险的，如果小于，或者 HandlerPromotionFailure 为 false，那么这次 Minor GC 将升级为 Full GC</p>
<h6 id="老年代（Old-Generation）"><a href="#老年代（Old-Generation）" class="headerlink" title="老年代（Old Generation）"></a>老年代（Old Generation）</h6><p>老年代主要存放大对象或者生命周期较长的对象，老年代的垃圾收集称为 Major GC，通常需要更长的时间</p>
<p>大对象直接进入老年代（大对象是指需要大量连续内存空间的对象），这样做的目的是避免在 Eden 区和两个 Survivor 区之间发生大量的内存拷贝</p>
<p>年轻代如何进入到老年代：</p>
<ul>
<li>Minor GC 时发现存活的对象在 To Survivor 区中存不下，那么把存活的对象存入老年代</li>
<li>如果对象较大，则直接进入老年代，通过 -XX:PretenureSizeThreshold 设置</li>
<li>长期存活的对象将进入老年代，默认是 15，通过 -XX:MaxTenuringThreshold 来设置</li>
<li>动态对象年龄判定，如果在 Survivor 空间中相同年龄所有对象的大小总和大于 Survivor 空间的一半，那么年龄大于等于该年龄的对象就会被移动到老年代</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/image-e3cdc70cf8734cbdabae985ab933780a.png" alt="image.png"></p>
<h6 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h6><p>不管是 JDK8 之前的永久代，还是 JDK8 及以后的元空间，都可以看作是 java 虚拟机规范中方法区的实现</p>
<p>虽然 java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与 java 堆区分开</p>
<p>所以元空间放在后边的方法区再说</p>
<h5 id="设置堆内存的参数"><a href="#设置堆内存的参数" class="headerlink" title="设置堆内存的参数"></a>设置堆内存的参数</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-Xmx # 设置最大可用堆内存</span><br><span class="line">-Xms # 设置初始堆大小</span><br><span class="line">-Xmn # 设置年轻代堆大小</span><br><span class="line">-Xss # 设置每个线程的堆栈大小</span><br><span class="line">-XX:NewSize # 设置年轻代最小空间大小</span><br><span class="line">-XX:MaxNewSize # 设置年轻代最大空间大小</span><br><span class="line">-XX:PermSize # 设置永久代最小空间大小</span><br><span class="line">-XX:MaxPermSize # 设置永久代最大空间大小</span><br><span class="line">-XX:NewRatio # 设置年轻代与老年代的比值，如设置为 4 ，则年轻代与老年代所占比值为 1:4，年轻代占整个堆栈的 1/5</span><br><span class="line">-XX:SurvivorRatio # 设置年轻代中 Eden 区与 Survivor 区的大小比值，如设置为 4，则两个 Survivor 区与一个 Eden 区的比值为 2:4，一个 Survivor 区占整个年轻代的 1/6</span><br></pre></td></tr></table></figure>

<p>如果堆的内存大小超过 -Xmx 设定的最大内存， 就会抛出 OutOfMemoryError 异常</p>
<p>我们通常会将 -Xmx 和 -Xms 两个参数配置为相同的值，其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小，从而提高性能</p>
<ul>
<li>默认情况下，初始堆内存大小为：电脑内存大小 &#x2F; 64</li>
<li>默认情况下，最大堆内存大小为：电脑内存大小 &#x2F; 4</li>
</ul>
<p>可以通过代码获取到我们的设置值，当然也可以模拟 OOM：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">  // 返回 JVM 堆大小</span><br><span class="line">  long initMemory = Runtime.getRuntime().totalMemory() / 1024 /1024;</span><br><span class="line">  // 返回 JVM 堆的最大内存</span><br><span class="line">  long maxMemory = Runtime.getRuntime().maxMemory() / 1024 /1024;</span><br><span class="line"></span><br><span class="line">  System.out.println(&quot;-Xms : &quot; + initMemory + &quot;M&quot;);</span><br><span class="line">  System.out.println(&quot;-Xmx : &quot; + maxMemory + &quot;M&quot;);</span><br><span class="line"></span><br><span class="line">  System.out.println(&quot;系统内存大小：&quot; + initMemory * 64 / 1024 + &quot;G&quot;);</span><br><span class="line">  System.out.println(&quot;系统内存大小：&quot; + maxMemory * 4 / 1024 + &quot;G&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="查看堆内存分配"><a href="#查看堆内存分配" class="headerlink" title="查看堆内存分配"></a>查看堆内存分配</h6><ul>
<li>在默认不配置 JVM 堆内存大小的情况下，JVM 根据默认值来配置当前内存大小</li>
<li>默认情况下新生代和老年代的比例是 1:2，可以通过 –XX:NewRatio 来配置<ul>
<li>新生代中的 Eden : From Survivor : To Survivor 的比例是 8:1:1，可以通过 -XX:SurvivorRatio 来配置</li>
</ul>
</li>
<li>若在 JDK7 中开启了 -XX:+UseAdaptiveSizePolicy，JVM 会动态调整 JVM 堆中各个区域的大小以及进入老年代的年龄<ul>
<li>此时 –XX:NewRatio 和 -XX:SurvivorRatio  将会失效，而 JDK8 是默认开启 -XX:+UseAdaptiveSizePolicy</li>
<li>在 JDK8 中，不要随意关闭 -XX:+UseAdaptiveSizePolicy，除非对堆内存的划分有明确的规划</li>
</ul>
</li>
</ul>
<p>每次 GC 后都会重新计算 Eden、From Survivor、To Survivor 的大小<br>计算依据是 GC 过程中统计的 GC 时间、吞吐量、内存占用量</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version | grep HeapSize</span><br><span class="line">    uintx ErgoHeapSizeLimit                         = 0                                   &#123;product&#125;</span><br><span class="line">    uintx HeapSizePerGCThread                       = 87241520                            &#123;product&#125;</span><br><span class="line">    uintx InitialHeapSize                          := 134217728                           &#123;product&#125;</span><br><span class="line">    uintx LargePageHeapSizeThreshold                = 134217728                           &#123;product&#125;</span><br><span class="line">    uintx MaxHeapSize                              := 2147483648                          &#123;product&#125;</span><br><span class="line">java version &quot;1.8.0_211&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_211-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jmap -heap 进程号</span><br></pre></td></tr></table></figure>

<h5 id="垃圾回收简介"><a href="#垃圾回收简介" class="headerlink" title="垃圾回收简介"></a>垃圾回收简介</h5><p>JVM 在进行 GC 时，并非每次都对堆内存（新生代、老年代、方法区）区域一起回收的，大部分时候回收的都是指新生代</p>
<p>针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大类：部分收集（Partial GC），整堆收集（Full  GC）</p>
<ul>
<li>部分收集：不是完整收集整个堆的垃圾收集，其中又分为：<ul>
<li>新生代收集（Minor GC&#x2F;Young GC）：只是新生代的垃圾收集</li>
<li>老年代收集（Major GC&#x2F;Old GC）：只是老年代的垃圾收集<ul>
<li>目前，只有 CMS GC 会有单独收集老年代的行为</li>
<li>很多时候 Major GC 会和 Full GC  混合使用，需要具体分辨是老年代回收还是整堆回收</li>
</ul>
</li>
<li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集<ul>
<li>目前只有 G1 GC 会有这种行为</li>
</ul>
</li>
</ul>
</li>
<li>整堆收集（Full GC）：收集整个堆和方法区的垃圾</li>
</ul>
<h6 id="Full-GC-的触发条件"><a href="#Full-GC-的触发条件" class="headerlink" title="Full GC 的触发条件"></a>Full GC 的触发条件</h6><ul>
<li>老年代空间不足</li>
<li>方法区空间不足</li>
<li>要晋升到老年代的的对象所占用的空间大于老年代的剩余空间</li>
<li>显示调用 System.gc()<ul>
<li>建议垃圾回收器执行垃圾回收，但是不必然执行</li>
<li>-XX:+DisableExplicitGC 参数，忽略掉 System.gc() 的调用</li>
</ul>
</li>
</ul>
<h5 id="TLAB"><a href="#TLAB" class="headerlink" title="TLAB"></a>TLAB</h5><p>什么是 TLAB （Thread Local Allocation Buffer）?</p>
<ul>
<li>从内存模型而不是垃圾回收的角度，对 Eden 区域继续进行划分，JVM 为每个线程分配了一个私有缓存区域，它包含在 Eden 空间内</li>
<li>多线程同时分配内存时，使用 TLAB 可以避免一系列的非线程安全问题，同时还能提升内存分配的吞吐量，因此我们可以将这种内存分配方式称为快速分配策略</li>
<li>OpenJDK 衍生出来的 JVM 大都提供了 TLAB 设计</li>
</ul>
<h6 id="为什么要有-TLAB"><a href="#为什么要有-TLAB" class="headerlink" title="为什么要有 TLAB ?"></a>为什么要有 TLAB ?</h6><ul>
<li>堆区是线程共享的，任何线程都可以访问到堆区中的共享数据</li>
<li>由于对象实例的创建在 JVM 中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</li>
<li>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度</li>
</ul>
<p>尽管不是所有的对象实例都能够在 TLAB 中成功分配内存，但 JVM 确实是将 TLAB 作为内存分配的首选</p>
<p>在程序中，可以通过 -XX:UseTLAB 设置是否开启 TLAB 空间</p>
<p>默认情况下，TLAB 空间的内存非常小，仅占有整个 Eden 空间的 1%，我们可以通过 -XX:TLABWasteTargetPercent 设置 TLAB 空间所占用 Eden 空间的百分比大小</p>
<p>一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在 Eden 空间中分配内存</p>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><ul>
<li>方法区（Method Area）与堆一样，是所有线程共享的内存区域，虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与堆区分开</li>
<li>运行时常量池（Runtime Constant Pool）是方法区的一部分，Class 文件中除了有类的版本&#x2F;字段&#x2F;方法&#x2F;接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将类在加载后进入方法区的运行时常量池中存放，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的是 String.intern()方法，受方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常</li>
<li>方法区的大小和堆空间一样，可以选择固定大小也可选择可扩展，方法区的大小决定了系统可以放多少个类，如果系统类太多，导致方法区溢出，虚拟机同样会抛出内存溢出错误</li>
<li>JVM 关闭后方法区即被释放</li>
</ul>
<h5 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h5><p>方法区用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等，</p>
<h6 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h6><p>对每个加载的类型（类 class、接口 interface、枚举 enum、注解 annotation），JVM 必须在方法区中存储以下类型信息</p>
<ul>
<li>这个类型的完整有效名称（全名&#x3D;包名.类名）</li>
<li>这个类型直接父类的完整有效名（对于 interface或是 java.lang.Object，都没有父类）</li>
<li>这个类型的修饰符（public、abstract、final 的某个子集）</li>
<li>这个类型直接接口的一个有序列表</li>
</ul>
<h6 id="域（Field）信息"><a href="#域（Field）信息" class="headerlink" title="域（Field）信息"></a>域（Field）信息</h6><ul>
<li>JVM 必须在方法区中保存类型的所有域的相关信息以及域的声明顺序</li>
<li>域的相关信息包括：域名称、域类型、域修饰符（public、private、protected、static、final、volatile、transient 的某个子集</li>
</ul>
<h6 id="方法（Method）信息"><a href="#方法（Method）信息" class="headerlink" title="方法（Method）信息"></a>方法（Method）信息</h6><p>JVM 必须保存所有方法的</p>
<ul>
<li>方法名称</li>
<li>方法的返回类型</li>
<li>方法参数的数量和类型</li>
<li>方法的修饰符（public、private、protected、static、final、synchronized、native、abstract 的一个子集） 方法的字符码（bytecodes）、操作数栈、局部变量表及大小（abstract 和 native 方法除外）</li>
<li>异常表（abstract 和 native 方法除外）<ul>
<li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li>
</ul>
</li>
</ul>
<h6 id="栈、堆、方法区的交互关系"><a href="#栈、堆、方法区的交互关系" class="headerlink" title="栈、堆、方法区的交互关系"></a>栈、堆、方法区的交互关系</h6><p><img data-src="/../../../../upload/2021/12/image-029d13727a7c4d159b84030dd495c209.png" alt="image.png"></p>
<h5 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p>运行时常量池（Runtime Constant Pool）是方法区的一部分，理解运行时常量池的话，我们先来说说字节码文件（Class 文件）中的常量池（常量池表）</p>
<h6 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h6><p>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述信息外，还包含一项信息那就是常量池表（Constant Pool Table），包含各种字面量和对类型、域和方法的符号引用</p>
<h6 id="为什么需要常量池"><a href="#为什么需要常量池" class="headerlink" title="为什么需要常量池"></a>为什么需要常量池</h6><p>一个 Java 源文件中的类、接口，编译后产生一个字节码文件，而 Java 中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用，在动态链接的时候用到的就是运行时常量池</p>
<h6 id="运行时常量池-1"><a href="#运行时常量池-1" class="headerlink" title="运行时常量池"></a>运行时常量池</h6><ul>
<li>在加载类和结构到虚拟机后，就会创建对应的运行时常量池</li>
<li>常量池表（Constant Pool Table）是 Class 文件的一部分，用于存储编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中</li>
<li>JVM 为每个已加载的类型（类或接口）都维护一个常量池，池中的数据项像数组项一样，是通过索引访问的 </li>
<li>运行时常量池中包含各种不同的常量，包括编译器就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或字段引用，此时不再是常量池中的符号地址了，这里换为真实地址<ul>
<li>运行时常量池，相对于 Class 文件常量池的另一个重要特征是：动态性，Java 语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String 类的 intern() 方法就是这样的</li>
</ul>
</li>
<li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛出 OutOfMemoryError 异常</li>
</ul>
<h5 id="方法区在-JDK-中的演进细节"><a href="#方法区在-JDK-中的演进细节" class="headerlink" title="方法区在 JDK 中的演进细节"></a>方法区在 JDK 中的演进细节</h5><p>只有 HotSpot 才有永久代的概念</p>
<table>
<thead>
<tr>
<th align="center">版本</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">jdk6及之前</td>
<td align="center">有永久代，静态变量存放在永久代上</td>
</tr>
<tr>
<td align="center">jdk7</td>
<td align="center">有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中</td>
</tr>
<tr>
<td align="center">jdk8及之后</td>
<td align="center">取消永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型</title>
    <url>/2021/10/08/220207.html</url>
    <content><![CDATA[<blockquote>
<p>Java内存模型</p>
</blockquote>
<span id="more"></span>

<h4 id="什么是-JMM"><a href="#什么是-JMM" class="headerlink" title="什么是 JMM"></a>什么是 JMM</h4><p>Java 内存模型（Java Memory Model）简称 JMM，本身是一种抽象的概念并不真实存在，它仅仅描述的是一组约定或规范，通过这组规范定义了程序中（尤其是多线程）各个变量的读写访问方式并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见，关键技术点都是围绕多线程的原子性、可见性和有序性展开的</p>
<h5 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h5><ul>
<li>通过 JMM 来实现线程和主内存之间的抽象关系</li>
<li>屏蔽各个硬件平台和操作系统的内存访问差异以实现让 java 程序在各种平台下都能达到一致的内存访问效果</li>
</ul>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><h5 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h5><p>是指当一个线程修改了某一个共享变量的值，其他线程是否能够立即知道该变更，JMM 规定了所有的变量都存储在主内存中</p>
<p><img data-src="/../../../../upload/2021/12/image-8aa12c6ead1d4c43a374f7ea6a202d79.png" alt="image.png"></p>
<p>java 中普通的共享变量不保证可见性，因为数据修改被写入内存的时机是不确定的，多线程并发下很可能出现“脏读”，所以每个线程都有自己的工作内存，线程自己的工作内存中保存了该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取、赋值等）都必须在线程自己的工作内存中进行，而不能够直接读写主内存中的变量，不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-08-27-0189f188d209405387c149c1479baec5.png" alt="image.png"></p>
<h6 id="如果没有可见性"><a href="#如果没有可见性" class="headerlink" title="如果没有可见性"></a>如果没有可见性</h6><ul>
<li>主内存中有变量 x，初始值为 0</li>
<li>线程 A 要将 x 加 1，先将 x 拷贝到自己的私有内存中，然后更新 x 的值</li>
<li>线程 A 将更新后的 x 值回刷到主内存的时间是不固定的</li>
<li>刚好在线程 A 没有回刷 x 到主内存时，线程 B 同样从主内存中读取 x，此时为 0，和线程 A 一样的操作，最后期盼的 x&#x3D;2 就会变成 x&#x3D;1</li>
</ul>
<h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5><p>指一个操作是不可中断的，即多线程环境下，操作不能被其他线程干扰</p>
<h5 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h5><p>对于一个线程的执行代码而言，我们总是习惯性认为代码的执行总是从上到下，有序执行，但为了提供性能，编译器和处理器通常会对指令序列进行重新排序，指令重排可以保证串行语义一致，但没有义务保证多线程间的语义也一致，即可能产生“脏读”，简单说，两行以上不相干的代码在执行的时候有可能先执行的不是第一条，不见得是从上到下顺序执行，执行顺序会被优化</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-11-03-339d3b3f960649bb9146ae099826ba86.png" alt="image.png"></p>
<p>单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致，处理器在进行重排序时必须要考虑指令之间的数据依赖性，多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测</p>
<h6 id="数据依赖性示例"><a href="#数据依赖性示例" class="headerlink" title="数据依赖性示例"></a>数据依赖性示例</h6><p>以下代码中语句四不可能重排后变成第一个</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">public void test() &#123;</span><br><span class="line">    int x = 11; // 语句1</span><br><span class="line">    int y = 12; // 语句2</span><br><span class="line">    x = x + 5;  // 语句3</span><br><span class="line">    y = x * x;  // 语句4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JMM-规范下，多线程对变量的读写过程"><a href="#JMM-规范下，多线程对变量的读写过程" class="headerlink" title="JMM 规范下，多线程对变量的读写过程"></a>JMM 规范下，多线程对变量的读写过程</h4><p>由于 JVM 运行程序的实体是线程，而每个线程创建时 JVM 都会为其创建一个工作内存（有些地方称为栈空间（，工作内存是每个线程的私有数据区域，而 Java 内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作(读取赋值等)必须在工作内存中进行，首先要将变量从主内存拷贝到的线程自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，不能直接操作主内存中的变量，各个线程中的工作内存中存储着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间的通信(传值)必须通过主内存来完成，其简要访问过程如下图：</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-22-47-e5ca8c2bcc8843ee9a95dcd86babfa9f.png" alt="image.png"></p>
<p>JMM 定义了线程和主内存之间的抽象关系：</p>
<ul>
<li>线程之间的共享变量存储在主内存中（从硬件角度来说就是内存条）</li>
<li>每个线程都有一个私有的本地工作内存，本地工作内存中存储了该线程用来读&#x2F;写共享变量的副本（从硬件角度来说就是CPU的缓存，比如寄存器、L1、L2、L3缓存等）</li>
</ul>
<p>总结：</p>
<ul>
<li>我们定义的所有共享变量都储存在物理主内存中</li>
<li>每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本（主内存中该变量的一份拷贝）</li>
<li>线程对共享变量所有的操作都必须先在线程自己的工作内存中进行后写回主内存，不能直接从主内存中读写（不能越级）</li>
<li>不同线程之间也无法直接访问其他线程的工作内存中的变量，线程间变量值的传递需要通过主内存来进行（同级不能相互访问）</li>
</ul>
<h4 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h4><p>在 JMM 中，如果一个操作执行的结果需要对另一个操作可见性或者代码重排序，那么这两个操作之间必须存在 happens-before 关系</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">x</span> <span class="operator">=</span> <span class="number">5</span><span class="comment">; // 线程A执行</span></span><br><span class="line"><span class="attribute">y</span> <span class="operator">=</span> x<span class="comment">; // 线程B执行</span></span><br><span class="line">       // 上述称之为：写后读</span><br></pre></td></tr></table></figure>
<p>问题：y 是否等于 5 呢</p>
<ul>
<li>如果线程 A 的操作（x&#x3D;5）happens-before（先行发生）线程 B 的操作（y&#x3D;x），那么可以确定线程 B 执行后 y&#x3D;5 一定成立</li>
<li>如果他们不存在 happens-before 原则，那么 y&#x3D;5 不一定成立</li>
</ul>
<p>这就是 happens-before 原则的威力，包含可见性和有序性的约束</p>
<h5 id="先行发生原则说明"><a href="#先行发生原则说明" class="headerlink" title="先行发生原则说明"></a>先行发生原则说明</h5><p>如果 Java 内存模型中所有的有序性都仅靠 volatile 和 synchronized 来完成，那么有很多操作都将会变得非常啰嗦，但是我们在编写 Java 并发代码的时候并没有察觉到这一点</p>
<p>我们没有时时、处处、次次，添加 volatile 和 synchronized 来完成程序，这是因为 Java 语言中 JMM 原则下，有一个“先行发生”(Happens-Before)的原则限制和规矩</p>
<p>这个原则非常重要：它是判断数据是否存在竞争，线程是否安全的非常有用的手段，依赖这个原则，我们可以通过几条简单规则一揽子解决并发环境下两个操作之间是否可能存在冲突的所有问题，而不需要陷入 Java 内存模型苦涩难懂的底层编译原理之中</p>
<h5 id="happens-before-总原则"><a href="#happens-before-总原则" class="headerlink" title="happens-before 总原则"></a>happens-before 总原则</h5><ul>
<li>如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前</li>
<li>两个操作之间存在 happens-before 关系，并不意味着一定要按照 happens-before 原则制定的顺序来执行，如果重排序之后的执行结果与按照 happens-before 关系来执行的结果一致，那么这种重排序并不非法</li>
</ul>
<h5 id="happens-before-8条原则"><a href="#happens-before-8条原则" class="headerlink" title="happens-before 8条原则"></a>happens-before 8条原则</h5><ul>
<li>次序规则<ul>
<li>一个线程内，按照代码顺序，写在前面的操作先行发生于写在后面的操作，前一个操作的结果可以被后续的操作获取，讲白点就是前面一个操作把变量 x 赋值为 1，那后面一个操作肯定能知道 x 已经变成了 1</li>
</ul>
</li>
<li>锁定规则<ul>
<li>一个 unLock 操作先行发生于后面（这里的“后面”是指时间上的先后）对同一个锁的 lock 操作</li>
</ul>
</li>
<li>volatile 变量规则<ul>
<li>对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作，前面的写对后面的读是可见的，这里的“后面”同样是指时间上的先后</li>
</ul>
</li>
<li>传递规则<ul>
<li>如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作 C</li>
</ul>
</li>
<li>线程启动规则<ul>
<li>Thread 对象的 start() 方法先行发生于此线程的每一个动作</li>
</ul>
</li>
<li>线程中断规则<ul>
<li>对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li>
<li>可以通过 Thread.interrupted() 检测到是否发生中断</li>
</ul>
</li>
<li>线程终止规则<ul>
<li>线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过 Thread::join() 方法是否结束、Thread::isAlive() 的返回值等手段检测线程是否已经终止执行</li>
</ul>
</li>
<li>对象终结规则<ul>
<li>一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize() 方法的开始，就是说对象没有完成初始化之前，是不能调用 finalized() 方法的</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM参数类型</title>
    <url>/2021/10/16/150548.html</url>
    <content><![CDATA[<blockquote>
<p>JVM参数类型</p>
</blockquote>
<span id="more"></span>

<h4 id="标准选项"><a href="#标准选项" class="headerlink" title="标准选项"></a>标准选项</h4><p>使用 java -help 查看支持的选项</p>
<ul>
<li>-server </li>
<li>-client</li>
<li>-version </li>
<li>-showversion</li>
<li>-cp </li>
<li>-classpath</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost software]<span class="comment"># java -version</span></span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_302&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_302-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.302-b08, mixed mode)</span><br></pre></td></tr></table></figure>

<h4 id="附加选项"><a href="#附加选项" class="headerlink" title="附加选项"></a>附加选项</h4><p>使用 java -X 查看支持的选项</p>
<ul>
<li>-Xint：解释执行模式</li>
<li>-Xcomp：JVM 优先以编译模式运行，不能编译的，以解释模式运行</li>
<li>-Xmixed：混合模式，JVM 自己来决定是否编译成本地代码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost software]<span class="comment"># java -Xcomp -version</span></span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_302&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_302-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.302-b08, compiled mode)</span><br></pre></td></tr></table></figure>

<h4 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a>高级选项</h4><p>使用 java -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMoptions -XX:+PrintFlagsInitial 查看支持的选项，或使用 jhsdb clhsdb –pid 进程号 查看</p>
<ul>
<li>&#x3D; 表示默认值，:&#x3D; 被用户或者JVM 修改后的值</li>
<li>Boolean 类型：-XX:[+-]<name> 表示启用或禁用 name 属性</li>
<li>非 Boolean 类型：-XX:<name>&#x3D;<value> 表示 name 属性的值是 vlaue</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-XX:+PrintFlagsInitial：打印初始参数</span><br><span class="line">-XX:+PrintFlagsFinal：打印最终参数</span><br><span class="line">-XX:+UnlockExperimentalVMOptions：解锁实验参数</span><br><span class="line">-XX:+UnlockDiagnosticVMOptions：解锁诊断参数</span><br><span class="line">-XX:+PrintCommandLineFlags：打印命令行参数</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost software]<span class="comment"># java -XX:+PrintFlagsFinal -version</span></span><br><span class="line">[Global flags]</span><br><span class="line">     intx ActiveProcessorCount                      = -1                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePausePolicy                   = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyCollectionCostMargin    = 50                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyInitializingSteps       = 20                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyOutputInterval          = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyWeight                  = 10                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeThroughPutPolicy              = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveTimeWeight                        = 25                                  &#123;product&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java监控调优工具</title>
    <url>/2021/10/16/135252.html</url>
    <content><![CDATA[<blockquote>
<p>Java监控调优工具</p>
</blockquote>
<span id="more"></span>

<h4 id="监控类工具"><a href="#监控类工具" class="headerlink" title="监控类工具"></a>监控类工具</h4><h5 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h5><p>查看运行中的 JVM 进程信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost software]<span class="comment"># jps -lvm</span></span><br><span class="line">1548 sun.tools.jps.Jps -lvm -Dapplication.home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.302.b08-0.el7_9.x86_64 -Xms8m</span><br><span class="line">1501 monitor_tuning-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-q</td>
<td align="center">只显示进程号</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="center">显示应用 main class 的完整包名或应用的 JAR 文件的完整路径名</td>
</tr>
<tr>
<td align="center">-m</td>
<td align="center">显示传递给 main 方法的参数</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">显示传递给 JVM 的参数</td>
</tr>
<tr>
<td align="center">-V</td>
<td align="center">禁止输出类名，JAR 文件名和传递给 main 方法的参数，仅显示本地 JVM 标识符的列表</td>
</tr>
<tr>
<td align="center">hostid</td>
<td align="center">想要查看的主机的标识符，例：jps -l rmi:&#x2F;&#x2F;remote.comain:1231</td>
</tr>
</tbody></table>
<h5 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h5><p>监控 JVM 统计信息，查看内存使用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印 gc 信息，每隔 1 秒一次，打印 5 次</span></span><br><span class="line">[root@localhost software]<span class="comment"># jstat -gc 1501 1000 5</span></span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">4608.0 4608.0  0.0    0.0   131072.0 120180.4  19968.0     7128.5   21296.0 20357.1 2688.0 2439.5      8    0.105   1      0.045    0.150</span><br><span class="line">4608.0 4608.0  0.0    0.0   131072.0 120180.4  19968.0     7128.5   21296.0 20357.1 2688.0 2439.5      8    0.105   1      0.045    0.150</span><br><span class="line">4608.0 4608.0  0.0    0.0   131072.0 120180.4  19968.0     7128.5   21296.0 20357.1 2688.0 2439.5      8    0.105   1      0.045    0.150</span><br><span class="line">4608.0 4608.0  0.0    0.0   131072.0 120180.4  19968.0     7128.5   21296.0 20357.1 2688.0 2439.5      8    0.105   1      0.045    0.150</span><br><span class="line">4608.0 4608.0  0.0    0.0   131072.0 120180.4  19968.0     7128.5   21296.0 20357.1 2688.0 2439.5      8    0.105   1      0.045    0.150</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-class</td>
<td align="center">显示有关类加载器行为的统计信息</td>
</tr>
<tr>
<td align="center">-compiler</td>
<td align="center">显示有关 Java HotSpot VM Just-in-Time 编译器行为的统计信息</td>
</tr>
<tr>
<td align="center">-gc</td>
<td align="center">显示有关垃圾收集堆行为的统计信息</td>
</tr>
<tr>
<td align="center">-gccapacity</td>
<td align="center">显示各代容量和对应空间的统计信息</td>
</tr>
<tr>
<td align="center">-gccause</td>
<td align="center">显示有关垃圾收集统计信息的摘要，以及最近和当前(适用时)垃圾收集事件的原因</td>
</tr>
<tr>
<td align="center">-gcnew</td>
<td align="center">显示新生代行为的统计信息</td>
</tr>
<tr>
<td align="center">-gcnewcapacity</td>
<td align="center">显示有关新生代大小及其对应空间的统计信息</td>
</tr>
<tr>
<td align="center">-gcold</td>
<td align="center">显示有关老年代行为的统计信息和元空间统计信息</td>
</tr>
<tr>
<td align="center">-gcoldcapacity</td>
<td align="center">显示老年代大小的统计信息</td>
</tr>
<tr>
<td align="center">-gcmetacapacity</td>
<td align="center">显示有关元空间大小的统计信息</td>
</tr>
<tr>
<td align="center">-gcutil</td>
<td align="center">显示有关垃圾收集统计信息的摘要</td>
</tr>
<tr>
<td align="center">-printcompilation</td>
<td align="center">显示 Java HotSpot VM 编译方法统计信息</td>
</tr>
</tbody></table>
<h4 id="故障排查工具"><a href="#故障排查工具" class="headerlink" title="故障排查工具"></a>故障排查工具</h4><h5 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h5><p>查看和调整 JVM 参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出当前 JVM 进程的全部参数和系统属性</span></span><br><span class="line">[root@localhost software]<span class="comment"># jinfo 1501</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已经被赋过值的参数</span></span><br><span class="line">[root@localhost software]<span class="comment"># jinfo -flags 1501</span></span><br><span class="line">Attaching to process ID 1501, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.302-b08</span><br><span class="line">Non-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=31457280 -XX:MaxHeapSize=478150656 -XX:MaxNewSize=159383552 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=10485760 -XX:OldSize=20971520 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC </span><br><span class="line">Command line: </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看对应名称的参数</span></span><br><span class="line">[root@localhost software]<span class="comment"># jinfo -flag MaxHeapSize 1501</span></span><br><span class="line">-XX:MaxHeapSize=478150656</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启或者关闭对应名称的参数</span></span><br><span class="line">[root@localhost software]<span class="comment"># jinfo -flag +HeapDumpOnOutOfMemoryError 1501</span></span><br><span class="line">-XX:-PrintGC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改指定参数的值（有一些参数不允许动态修改，如最大堆内存），使用 java -XX:+PrintFlagsInitial | grep manageable 查看可动态修改的参数</span></span><br><span class="line">[root@localhost software]<span class="comment"># jinfo -flag HeapDumpPath=/data/software 1501</span></span><br></pre></td></tr></table></figure>

<h5 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h5><p>查看对象内存映射或堆内存详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程的内存映像信息</span></span><br><span class="line">[root@localhost software]<span class="comment"># jmap 1501</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看堆的详细信息</span></span><br><span class="line">[root@localhost software]<span class="comment"># jmap -heap 1501</span></span><br><span class="line"></span><br><span class="line">* 导出堆快照文件</span><br><span class="line">[root@localhost software]<span class="comment"># jmap -dump:format=b,file=1501_heap.hprof 1501</span></span><br><span class="line"></span><br><span class="line">* 查看等待回收的对象信息</span><br><span class="line">[root@localhost software]<span class="comment"># jmap -finalizerinfo 1501</span></span><br><span class="line">Attaching to process ID 1501, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.302-b08</span><br><span class="line">Number of objects pending <span class="keyword">for</span> finalization: 0</span><br><span class="line"></span><br><span class="line">* 查看堆中对象的统计信息</span><br><span class="line">[root@localhost software]<span class="comment"># jmap -histo:live 1501</span></span><br><span class="line"></span><br><span class="line">* 查看类加载器信息</span><br><span class="line">[root@localhost software]<span class="comment"># jmap -clstats 1501</span></span><br></pre></td></tr></table></figure>

<h5 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h5><p>查看线程堆栈信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost software]<span class="comment"># jstack 1501</span></span><br><span class="line">[root@localhost software]<span class="comment"># jstack 1501 &gt; 1501_stack.txt</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-l</td>
<td align="center">显示有关锁的额外信息</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="center">显示线程的额外信息</td>
</tr>
</tbody></table>
<h5 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h5><p>用来分析 jmap 生成的堆 Dump，使用 VisualVM 替代</p>
<h5 id="jcmd"><a href="#jcmd" class="headerlink" title="jcmd"></a>jcmd</h5><p>向正在运行的 JVM 发送诊断命令请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可以使用的命令</span></span><br><span class="line">[root@localhost software]<span class="comment"># jcmd 1501 help</span></span><br><span class="line">1501:</span><br><span class="line">The following commands are available:</span><br><span class="line">VM.unlock_commercial_features</span><br><span class="line">JFR.configure</span><br><span class="line">JFR.stop</span><br><span class="line">JFR.start</span><br><span class="line">JFR.dump</span><br><span class="line">JFR.check</span><br><span class="line">VM.native_memory</span><br><span class="line">ManagementAgent.stop</span><br><span class="line">ManagementAgent.start_local</span><br><span class="line">ManagementAgent.start</span><br><span class="line">VM.classloader_stats</span><br><span class="line">GC.rotate_log</span><br><span class="line">Thread.<span class="built_in">print</span></span><br><span class="line">GC.class_stats</span><br><span class="line">GC.class_histogram</span><br><span class="line">GC.heap_dump</span><br><span class="line">GC.finalizer_info</span><br><span class="line">GC.heap_info</span><br><span class="line">GC.run_finalization</span><br><span class="line">GC.run</span><br><span class="line">VM.<span class="built_in">uptime</span></span><br><span class="line">VM.dynlibs</span><br><span class="line">VM.flags</span><br><span class="line">VM.system_properties</span><br><span class="line">VM.command_line</span><br><span class="line">VM.version</span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出线程堆栈信息</span></span><br><span class="line">jcmd 1501 Thread.<span class="built_in">print</span> &gt; 1501_thread.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出堆内存信息</span></span><br><span class="line">[root@localhost software]<span class="comment"># jcmd 1501 GC.heap_dump 1501_heap_dump.txt</span></span><br><span class="line">1501:</span><br><span class="line">Heap dump file created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有运行中的 JVM 进程信息</span></span><br><span class="line">[root@localhost software]<span class="comment"># jcmd -l</span></span><br><span class="line">1948 sun.tools.jcmd.JCmd -l</span><br><span class="line">1501 monitor_tuning-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<h4 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h4><h5 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h5><h5 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h5><h5 id="jmc"><a href="#jmc" class="headerlink" title="jmc"></a>jmc</h5><h5 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h5><h5 id="JITWatch"><a href="#JITWatch" class="headerlink" title="JITWatch"></a>JITWatch</h5>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM类加载机制</title>
    <url>/2021/10/18/184553.html</url>
    <content><![CDATA[<blockquote>
<p>JVM类加载机制</p>
</blockquote>
<span id="more"></span>

<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-29-44-5f7d3cf87c474c32a8fac4486458ee7c.png" alt="image.png"></p>
<h4 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h4><p>类加载的过程包括了加载、验证、准备、解析、初始化五个阶段，在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，某些情况下可以在初始化阶段之后开始解析，这是为了支持 java 语言的运行时绑定（也称为动态绑定或晚期绑定），另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段</p>
<h5 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h5><blockquote>
<p>它是 java 将字节码数据从不同的数据源读取到 JVM 中，并映射为 JVM 认可的数据结构（Class 对象），这里的数据源可能是各种各样的形态，如 jar 文件、class 文件，甚至是网络数据源等；如果输入数据不是 ClassFile 的结构，则会抛出 ClassFormatError<br>加载阶段是用户参与的阶段，我们可以自定义类加载器，去实现自己的类加载过程</p>
</blockquote>
<ul>
<li>通过类的全限定名来读取类的二进制字节流</li>
<li>把类的二进制流转为方法区数据结构，并存放到方法区</li>
<li>在堆中产生 java.lang.Class 对象，作为方法区数据的访问入口</li>
</ul>
<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><blockquote>
<p>验证 class 文件是否符合规范，并且不会危害虚拟机自身的安全，可使用 -Xverify:none 关闭验证以缩短虚拟机类加载的时间</p>
</blockquote>
<ul>
<li>文件格式验证<ul>
<li>是否以 0xCAFEBABE 开头</li>
<li>版本号是否合理</li>
</ul>
</li>
<li>无数据验证<ul>
<li>是否有父类</li>
<li>是否继承了 final 类（final 类不能被继承，如果继承了就说明有问题）</li>
<li>非抽象类实现了所有抽象方法</li>
</ul>
</li>
<li>字节码验证<ul>
<li>运行检查</li>
<li>栈数据类型和操作码操作参数吻合（比如栈空间只有 2 字节，但其实却需要大于 2 字节，此时就认为这个字节码有问题）</li>
<li>跳转指令是不是指向了合理位置</li>
</ul>
</li>
<li>符号引用验证<ul>
<li>常量池中描述类是否存在</li>
<li>访问的方法或字段是否存在且有足够的权限</li>
</ul>
</li>
</ul>
<h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><blockquote>
<p>创建类或接口中的静态变量，并初始化静态变量的初始值。但这里的“初始化”和下面的显式初始化阶段是有区别的，侧重点在于分配所需要的内存空间，不会去执行更进一步的 JVM 指令</p>
</blockquote>
<p>final static 修饰的变量（不涉及方法调用）：直接赋值为用户定义的值，比如 private final static int value &#x3D; 123，直接赋值 123<br>如果是 private static int value &#x3D; 123，则该阶段的值依然是 0</p>
<h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><blockquote>
<p>将类、接口、字段和方法的符号引用转为直接引用</p>
</blockquote>
<ul>
<li>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到了内存中</li>
<li>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定已经存在于内存之中了</li>
</ul>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><blockquote>
<p>真正去执行类初始化的代码逻辑，包括静态字段赋值的动作，以及执行类定义中的静态初始化块内的逻辑，编译器在编译阶段就会把这部分逻辑整理好，父类型的初始化逻辑优先于当前类型的逻辑</p>
</blockquote>
<ul>
<li>执行 <clinit> 方法，<clinit> 方法由编译器自动收集类里面的所有静态变量的赋值动作及静态语句块合并而成，也叫类构造器方法<ul>
<li>初始化的顺序和源文件中的顺序一致</li>
<li>子类的 <clinit> 被调用前，会先调用父类的 <clinit></li>
<li>JVM 会保证 <clinit> 方法的线程安全性</li>
</ul>
</li>
<li>初始化时，如果实例化一个新对象，会调用 <init> 方法对实例变量进行初始化，并执行对应的构造方法内的代码</li>
</ul>
<h4 id="类初始化的时机"><a href="#类初始化的时机" class="headerlink" title="类初始化的时机"></a>类初始化的时机</h4><ul>
<li>当创建一个类的实例时，比如使用 new 关键字，或者通过反射、克隆、反序列化</li>
<li>当调用类的静态方法时，即当使用了字节码 invokestatic 指令</li>
<li>当使用类、接口的静态字段时（final 修饰特殊考虑），比如，使用 getstatic 或者 putstatic 指令</li>
<li>当使用 java.lang.reflect 包中的方法反射类的方法时，比如：Class.forName(“ckx.inkjava.Test”)</li>
<li>当初始化子类时，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化</li>
<li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，该接口要在其之前被初始化</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类） ，虚拟机会先初始化这个主类</li>
<li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类（涉及解析 REF_getStatic、REF_putStatic、REF_invokeStatic 方法句柄对应的类）</li>
</ul>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-36-09-b90435d3b8d741fe9b66d083b4f22e80.png" alt="image.png"></p>
<p>类加载器是 JVM 执行类加载机制的前提</p>
<p>ClassLoader 是 java 的核心组件，所有的 Class 都是由 ClassLoader 进行加载的，ClassLoader 负责通过各种方式将 Class 信息的二进制数据流读入 JVM 内部，转换为一个与目标类对应的 java.1ang.Class 对象实例，然后交给 java 虚拟机进行链接、初始化等操作</p>
<p>因此， ClassLoader 在整个装载阶段，只能影响到类的加载，而无法通过 ClassLoader 去改变类的链接和初始化行为，至于它是否可以运行，则由 Execution Engine 决定</p>
<p>类加载器通常由 JVM 提供，JVM 提供的这些类加载器通常被称为系统类加载器，除此之外，还可以通过继承 ClassLoader 来创建自己的类加载器</p>
<p>注意: 这里父类加载器并不是通过继承关系来实现的，而是采用组合实现的（在下层加载器中包含着上层加载器的引用）</p>
<h5 id="类的加载分类"><a href="#类的加载分类" class="headerlink" title="类的加载分类"></a>类的加载分类</h5><p>class 文件的显式加载与隐式加载的方式是指 JVM 加载 class 文件到内存的方式</p>
<ul>
<li>显式加载：指的是在代码中通过调用 ClassLoader 加载 class 对象，如直接使用 Class.forName(name) 或 this.getClass().getClassLoader().loadClass() 加载 class 对象</li>
<li>隐式加载：则是不直接在代码中调用 ClassLoader 的方法加载 class 对象，而是通过虚拟机自动加载到内存中，如在加载某个类的 class 文件时，该类的 class 文件中引用了另外一个类的对象，此时额外引用的类将通过 JVM 自动加载到内存中</li>
</ul>
<h5 id="启动类加载器（Bootstrap-ClassLoader）"><a href="#启动类加载器（Bootstrap-ClassLoader）" class="headerlink" title="启动类加载器（Bootstrap ClassLoader）"></a>启动类加载器（Bootstrap ClassLoader）</h5><p>用来加载 java 的核心类，是由 C++ 实现的，并不继承自 java.lang.ClassLoader，无法被 java 程序直接引用，主要负责加载 jre&#x2F;lib&#x2F;rt.jar 里所有的 class，或被 -Xbootclasspath 参数指定的路径中能被 JVM 识别的类库</p>
<h5 id="扩展类加载器（Extension-ClassLoader）"><a href="#扩展类加载器（Extension-ClassLoader）" class="headerlink" title="扩展类加载器（Extension ClassLoader）"></a>扩展类加载器（Extension ClassLoader）</h5><p>该加载器由 sun.misc.Launcher$ExtClassLoader 实现，它负责加载 jre 的扩展目录，lib&#x2F;ext 或者由 java.ext.dirs 系统变量指定的路径中的所有类库，开发者可以直接使用扩展类加载器</p>
<h5 id="应用程序类加载器（Application-ClassLoader）"><a href="#应用程序类加载器（Application-ClassLoader）" class="headerlink" title="应用程序类加载器（Application ClassLoader）"></a>应用程序类加载器（Application ClassLoader）</h5><p>该类加载器由 sun.misc.Launcher$AppClassLoader 来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器</p>
<h5 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h5><p>如果以上三种类加载器不满足使用的时候，我们可以使用自定义类加载器，继承 java.lang.ClassLoader 类，重写 findClass() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不想打破双亲委派模型，那么只需要重写 findClass 方法即可</span></span><br><span class="line">    <span class="comment">// 如果想打破双亲委派模型，那么就重写整个 loadClass 方法</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classData = loadClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 直接生成 class 对象</span></span><br><span class="line">        <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadClassData(String className) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> root + File.separatorChar + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">             <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rootDir</span> <span class="operator">=</span> <span class="string">&quot;D:\\project\\study\\src\\main\\java&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserClassLoader</span> <span class="variable">loader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserClassLoader</span>(rootDir);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> loader1.findClass(<span class="string">&quot;ink.ckx.test.User&quot;</span>);</span><br><span class="line">        System.out.println(clazz1.getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="type">UserClassLoader</span> <span class="variable">loader2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserClassLoader</span>(rootDir);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> loader2.findClass(<span class="string">&quot;ink.ckx.test.User&quot;</span>);</span><br><span class="line">        System.out.println(clazz2.getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;ink.ckx.test.User&quot;</span>);</span><br><span class="line">        System.out.println(clazz3.getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clazz1 与 clazz2 对应了不同的类模板结构</span></span><br><span class="line">        System.out.println(clazz1 == clazz2);</span><br><span class="line">        System.out.println(clazz1.getClassLoader().getParent() == clazz3.getClassLoader());</span><br><span class="line">        System.out.println(clazz2.getClassLoader().getParent() == clazz3.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h4><h5 id="全盘负责"><a href="#全盘负责" class="headerlink" title="全盘负责"></a>全盘负责</h5><p>当一个类加载器负责加载某个 Class 时，该 Class 所依赖的和引用的其他 Class 也将由该类加载器负责载入，除非指定使用另外一个类加载器来载入</p>
<h5 id="父类委托"><a href="#父类委托" class="headerlink" title="父类委托"></a>父类委托</h5><p>先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</p>
<h5 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h5><p>缓存机制将会保证所有加载过的 Class 都会被缓存，当程序中需要使用某个 Class 时，类加载器先从缓存区寻找该 Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成 Class 对象，存入缓存区，这就是为什么修改了 Class 后，必须重启 JVM，程序的修改才会生效</p>
<h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><p>当类加载器试图加载某个类型的时候，除非父加载器找不到相应类型，否则尽量将这个任务代理给当前加载器的父加载器去做。使用委派模型的目的是避免重复加载 java 类型</p>
<p>加载过程：</p>
<ul>
<li>当 AppClassLoader 加载一个 class 时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器 ExtClassLoader 去完成</li>
<li>当 ExtClassLoader 加载一个 class 时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给 BootStrapClassLoader 去完成，如果 BootStrapClassLoader 加载失败（例如在 $java_HOME&#x2F;jre&#x2F;lib 里未查找到该 class），则会使用 ExtClassLoader 来尝试加载</li>
<li>若 ExtClassLoader 也加载失败，则会使用 AppClassLoader 来加载，如果 AppClassLoader 也加载失败，则会报出异常 ClassNotFoundException</li>
</ul>
<p>优势：</p>
<ul>
<li>系统类防止内存中出现多份同样的字节码</li>
<li>保证 java 程序安全稳定运行</li>
</ul>
<p>不适合使用双亲委派的场景：</p>
<ul>
<li>我们希望一个 JVM 能够同时加载某类的不同版本，那么双亲委派就不合适了，需要的是在不同范围内（例如模块）单独加载</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM垃圾回收机制</title>
    <url>/2021/10/20/234728.html</url>
    <content><![CDATA[<blockquote>
<p>JVM 垃圾回收机制</p>
</blockquote>
<span id="more"></span>

<h4 id="判断对象是否可被回收"><a href="#判断对象是否可被回收" class="headerlink" title="判断对象是否可被回收"></a>判断对象是否可被回收</h4><h5 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h5><p>通过对象的引用计数器来判断该对象是否被引用，因为会存在循环引用问题，所以 JVM 不使用</p>
<h5 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h5><p>通过根对象（GC Roots）作为起始点进行搜索，走过的路径被称为引用链（Reference Chain），如果某个对象到根对象没有引用链相连时，就认为这个对象是不可达的，可以回收</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-40-19-d00183f873e54337a6c28a6589d3b4a9.png" alt="image.png"></p>
<p>GC Roots 包含的对象</p>
<ul>
<li>虚拟机栈（栈帧的本地变量表）中引用的对象</li>
<li>方法区中类静态变量引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈 JNI（即 Native 方法）引用的对象</li>
</ul>
<p>注意：一个对象即使不可达，也不一定会被回收</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-45-39-67ccd29aa83246b597a8573eba7d147f.png" alt="image.png"></p>
<h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><p>如 Object obj &#x3D; new Object() 的引用<br>只要强引用在，永远不会回收被引用的对象</p>
<h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>如 SoftReference<String> sr &#x3D; new SoftReference&lt;&gt;(“hello”)<br>是用来描述一些有用但非必需的对象<br>软引用关联的对象，只有在内存不足的时候才会回收</p>
<h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>如 WeakReference<String> sr &#x3D; new WeakReference&lt;&gt;(“hello”)<br>弱引用也是用来描述非必需对象的<br>无论内存是否充足，都会回收被弱引用关联的对象</p>
<h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h5><p>如 ReferenceQueue<String> queue &#x3D; new ReferenceQueue&lt;&gt;();<br>PhantomReference<String> pr &#x3D; new PhantomReference&lt;&gt;(hello”, queue);</p>
<p>不影响对象的生命周期，如果一个对象只有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收<br>虚引用主要用来跟踪対象被垃圾回收器回收的活动，必须和引用队列（ReferenceQueue）配合使用<br>当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内之前，把这个虚引用加入到与之关联的引用队列中<br>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收<br>如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存回收之前采取必要的行动 </p>
<h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><h5 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h5><ul>
<li>介绍：算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收</li>
<li>优点：实现简单</li>
<li>缺点：标记和清除两个过程的效率都不高，会产生碎片，碎片太多会导致提前 GC</li>
</ul>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-14_22-38-43-f3a30d428a544e9081972b3daad70f0e.png" alt="image.png"></p>
<h5 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h5><ul>
<li>介绍：标记过程仍然与标记清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存</li>
<li>优点：没有了内存碎片</li>
<li>缺点：整理内存比较耗时</li>
</ul>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-14_22-42-22-130c263e5e1a47e08d6b6b441a994f0a.png" alt="image.png"></p>
<h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><ul>
<li>介绍：它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉</li>
<li>优点：实现简单，运行高效，无碎片</li>
<li>缺点：空间利用率低，只能使用一半的空间</li>
</ul>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-14_22-46-33-91f03256ce694445ba7c1f32cb0c9bfc.png" alt="image.png"></p>
<h5 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h5><ul>
<li>介绍：根据对象的存活周期，把内存分成多个区域，不同区域使用不同的垃圾回收算法回收对象</li>
<li>优点：更有效的清除不再使用的对象，提升了垃圾回收的效率</li>
<li>调优原则<ul>
<li>合理设置 Survivor 区域的大小，避免内存浪费</li>
<li>让 GC 尽量发生在新生代，尽量减少 Full GC 的发生</li>
</ul>
</li>
</ul>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-15_20-19-04-68d77e7f87a14de9ae6e69cf333ffcef.png" alt="image.png"></p>
<h4 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h4><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-15_20-46-34-bb27bda5548f468695621285fa40896d.png" alt="image.png"></p>
<h5 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h5><ul>
<li>STW（Stop The World）：也叫全局停顿，发生 STW 时 Java 代码停止运行，native 代码继续运行，但不能与 JVM 进行交互原因，原因多半是由于垃圾回收导致，也可能由 Dump 线程、死锁检查、Dump 堆等导致，可能导致服务停止，没有响应；主从切换，危害生产环境</li>
<li>并行收集：多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态，适合科学计算、后台处理等弱交互场景</li>
<li>并发收集：用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），垃圾收集线程在执行的时候不会停顿用户程序的运行，适合对响应时间有要求的场景，比如 Web</li>
<li>吞吐量：CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，公式：运行用户代码时间 &#x2F; (运行用户代码时间 + 垃圾收集时间)</li>
<li>停顿时间：垃圾收集器做垃圾回收中断应用执行的时间，-XX:MaxGCPauseMillis</li>
</ul>
<h5 id="新生代收集器"><a href="#新生代收集器" class="headerlink" title="新生代收集器"></a>新生代收集器</h5><h6 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h6><p>串行收集器，采用复制算法<br>适用场景：单核机器和客户端应用程序，应用以 -client 模式运行时，默认使用的就是 Serial<br>特点：</p>
<ul>
<li>单线程，简单高效</li>
<li>收集过程全程 STW</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-51-11-60cb2d5f5d8a4b828c7280cdf31c4059.png" alt="image.png"></p>
<h6 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h6><p>Serial 收集器的多线程版本，除了使用多线程以外，其他和 Serial 收集器一样，包括：JVM 参数，STW 的表现和垃圾回收算法<br>适用场景：主要用来和 CMS 收集器配合使用<br>特点：</p>
<ul>
<li>多线程</li>
<li>可使用 -XX:ParallelGCThreads 设置垃圾收集的线程数</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-54-48-08058a629fce45a6bf69b46f5de021b8.png" alt="image.png"></p>
<h6 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h6><p>也叫吞吐量优先收集器，采用的也是复制算法，也是并行的多线程收集器<br>适用场景：注重吞吐量的场景<br>特点：</p>
<ul>
<li>可以达到一个可控制的吞吐量，使用 -XX:MaxGCPauseMillis 来尽力控制最大的垃圾收集停顿时间</li>
<li>使用 -XX：GCTimeRatio 来设置吞吐量的大小，取值 0-100，系统花费不超过 1&#x2F;(1+n) 的时间用于垃圾收集</li>
<li>自适应 GC 策略：使用 -XX:+UseAdptiveSizePolicy 打开自适应策略后，无需手动设置新生代的大小（-Xmn）、Eden 与 Survivor 区的比例（-XX:SurvivorRatio）等参数，虚拟机会自动根据系统的运行状况收集性能监控信息，动态地调整这些参数，从而达到最优的停顿时间以及最高的吞吐量</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_22-57-39-1f00375b829d41039ec0221f18502b63.png" alt="image.png"></p>
<h5 id="老年代收集器"><a href="#老年代收集器" class="headerlink" title="老年代收集器"></a>老年代收集器</h5><h6 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h6><p>Serial 收集器的老年代版本，采用标记-整理算法<br>适用场景：可以和 Serial&#x2F;ParNew&#x2F;Parallel Scavenge 这三个新生代的垃圾收集器配合使用，当使用 CMS 收集器出现故障的时候，会用 Servial Old 作为后备</p>
<h6 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h6><p>Parallel Scavenge 收集器的老年代版本，采用标记-整理算法<br>适用场景：关注吞吐量的场景</p>
<h6 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h6><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-15_21-46-09-254c387604b949ef8de6ca52a1d17d15.png" alt="image.png"></p>
<p>适用场景：希望系统停顿时间短，响应速度快的场景，比如各种服务器应用程序</p>
<p>优点：</p>
<ul>
<li>Stop The World 的时间比较短</li>
<li>大多过程并发执行</li>
</ul>
<p>缺点：</p>
<ul>
<li>CPU资源比较敏感<ul>
<li>并发阶段可能导致应用吞吐量的降低</li>
</ul>
</li>
<li>无法处理浮动垃圾</li>
<li>不能等到老年代几乎满了才开始收集<ul>
<li>预留的内存不够-&gt; Concurrent Mode Failure -&gt; Serial Old 作为后备</li>
</ul>
</li>
<li>可使用 CMSInitiatingOccupancyFraction 设置老年代占比达到多少就触发垃圾收集，默认 68%</li>
<li>内存碎片<ul>
<li>标记-清除导致碎片的产生</li>
<li>UseCMSCompactAtFullCollection：在完成 Full GC 后是否要进行内存碎片整理，默认开启</li>
<li>CMSFulIGCsBeforeCompaction：进行几次 Full GC 后就进行一次内存碎片整理，默认 0</li>
</ul>
</li>
</ul>
<h6 id="CMS-执行过程"><a href="#CMS-执行过程" class="headerlink" title="CMS 执行过程"></a>CMS 执行过程</h6><ul>
<li>初始标记<ul>
<li>标记 GC Roots 能直接关联到的对象</li>
<li>Stop The World</li>
</ul>
</li>
<li>并发标记<ul>
<li>找出所有 GC Roots 能直接关联到的对象</li>
<li>并发执行，没有 Stop The World</li>
</ul>
</li>
<li>并发预清理（略）<ul>
<li>重新标记那些在并发标记阶段，引用被更新的对象，从而减少后面重新标记阶段的工作量</li>
<li>并发执行，没有 Stop The World</li>
<li>可使用 -XX:-CMSPrecleaningEnabled 关闭并发预清理阶段，默认打开</li>
</ul>
</li>
<li>并发可中止的预清理阶段（略）<ul>
<li>和并发预清理做的事情一样，并发执行，无 Stop The World</li>
<li>当 Eden 的使用量大于 CMSScheduleRemarkEdenSizeThreshold的阈值（默认 2M）时，才会执行该阶段</li>
<li>主要作用：允许我们能够控制预清理阶段的结束时机，比如扫描多长时间（CMSMaxAbortablePrecleanTime 默认 5秒）或者 Eden 区使用占比达到一定阈值（CMSScheduleRemarkEdenPenetration 默认 50%）就结束本阶段</li>
</ul>
</li>
<li>重新标记<ul>
<li>修正并发标记期间，因为用户程序继续运行，导致标记发生变动的那些对象的标记</li>
<li>一般来说，重新标记花费的时间会比初始标记阶段长一些，但比并发标记的时间短</li>
</ul>
</li>
<li>并发清除<ul>
<li>基于标记结果，清除掉要清除前面标记出来的垃圾</li>
<li>并发执行，没有 Stop The World</li>
</ul>
</li>
<li>并发重置<ul>
<li>清理本次 CMS GC 的上下文信息，为下一次 GC 做准备</li>
</ul>
</li>
</ul>
<h5 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h5><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-15_22-24-12-4ee0c28491534e0b9bd94f6ae47eaf62.png" alt="image.png"></p>
<p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离，Region 的大小是一致的，数值是在 1M 到 32M 字节之间的一个 2 的幂值数，JVM 会尽量划分 2048 个左右、同等大小的 Region，通过参数 -XX:G1HeapRegionSize 指定 Region 的大小</p>
<p>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收，这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能，通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region</p>
<p>G1 会将超过 Region 50% 大小的对象（在应用中，通常是 byte 或 char 数组）归类为 Humongous 对象，并放置在相应的 region 中。逻辑上，Humongous region 算是老年代的一部分，因为复制这样的大对象是很昂贵的操作，并不适合新生代 GC 的复制算法</p>
<p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region，通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描</p>
<p>适用场景</p>
<ul>
<li>占用内存较大的应用（6G 以上）</li>
<li>替换 CMS 垃圾收集器</li>
</ul>
<p>特点</p>
<ul>
<li>可以作用在整个堆</li>
<li>可控的停顿，MaxGCPauseMillis&#x3D;200</li>
<li>无内存碎片</li>
</ul>
<h6 id="垃圾收集机制"><a href="#垃圾收集机制" class="headerlink" title="垃圾收集机制"></a>垃圾收集机制</h6><ul>
<li><p>Young GC<br>所有 Eden Region 都满了的时候，就会触发 Young GC<br>伊甸园里面的对象会转移到 Survivor Region 里面去<br>原先 Survivor Region 中的对象转移到新的 Survivor Region 中，或者晋升到 Old Region<br>空闲 Region 会被放入空闲列表中，等待下次被使用</p>
</li>
<li><p>Mixed GC<br>老年代大小占整个堆的百分比达到一定阈值（可用 -XX:InitiatingHeapOccupancyPercent 指定，默认 45%），就触发<br>Mixed GC 会回收所有 Young Region，同时回收部分 Old Region</p>
</li>
<li><p>Full GC<br>复制对象内存不够，或者无法分配足够内存（比如巨型对象没有足够的连续分区分配）时，会触发 Full GC，Full GC 模式下，使用 Serial Old 模式</p>
</li>
</ul>
<h6 id="Mixed-GC-执行过程"><a href="#Mixed-GC-执行过程" class="headerlink" title="Mixed GC 执行过程"></a>Mixed GC 执行过程</h6><ul>
<li>初始标记<ul>
<li>标记 GC Roots 能直接关联到的对象</li>
<li>和 CMS 类似，存在 Stop The World</li>
</ul>
</li>
<li>并发标记<ul>
<li>同 CMS 的并发标记</li>
<li>并发执行，没有 Stop The World</li>
</ul>
</li>
<li>最终标记<ul>
<li>修正在并发标记期间引起的变动</li>
<li>存在Stop The World</li>
</ul>
</li>
<li>筛选回收<ul>
<li>对各个 Region 的回收价值和成本进行排序</li>
<li>根据用户所期望的停顿时间（MaxGCPauseMillis）来制定回收计划，并选择一些 Region 回收</li>
<li>回收过程<ul>
<li>选择一系列 Region 构成一个回收集</li>
<li>把决定回收的 Region 中的存活对象复制到空的Region中</li>
<li>删除掉需回收的 Region -&gt; 无内存碎片</li>
<li>存在 Stop The World</li>
</ul>
</li>
</ul>
</li>
</ul>
<h6 id="如何减少-Full-GC"><a href="#如何减少-Full-GC" class="headerlink" title="如何减少 Full GC"></a>如何减少 Full GC</h6><ul>
<li>增加预留内存（增大 -XX:G1ReservePercent，默认为堆的 10%）</li>
<li>更早地回收垃圾（减少 -XX:InitiatingHeapOccupancyPercent，老年代达到该值就触发 Mixed GC，默认 45%）</li>
<li>增加并发阶段使用的线程数（增大 -XX:ConcGCThreads）</li>
</ul>
<h5 id="是否需要切换到-G1"><a href="#是否需要切换到-G1" class="headerlink" title="是否需要切换到 G1"></a>是否需要切换到 G1</h5><ul>
<li>50% 以上的堆被存活对象占用</li>
<li>对象分配和晋升的速度变化非常大</li>
<li>垃圾回收时间特别长，超过了 1 秒</li>
<li>如果内存 &lt;&#x3D; 6G，建议用CMS，如果内存 &gt; 6G，考虑使用 G1</li>
</ul>
<h5 id="如何选择垃圾收集器"><a href="#如何选择垃圾收集器" class="headerlink" title="如何选择垃圾收集器"></a>如何选择垃圾收集器</h5><ul>
<li>优先调整堆的大小让服务器自己来选择</li>
<li>如果内存小于 100M，使用串行收集器</li>
<li>如果是单核，并且没有停顿时间的要求，串行或者 JVM 自己选</li>
<li>如果允许停顿时间超过 1 秒，选择并行或者 JVM 自己选</li>
<li>如果响应时间最重要，并且不能超过 1 秒，使用并发收集器</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx相关配置</title>
    <url>/2021/10/27/201356.html</url>
    <content><![CDATA[<blockquote>
<p>Nginx 相关配置</p>
</blockquote>
<span id="more"></span>

<h4 id="修改默认用户"><a href="#修改默认用户" class="headerlink" title="修改默认用户"></a>修改默认用户</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">修改 nginx.conf 中 `user nginx;`，默认用户为 nobody</span><br><span class="line">构建 nginx 时添加参数 `--user=nginx --group=nginx`</span><br></pre></td></tr></table></figure>

<h4 id="修改工作进程"><a href="#修改工作进程" class="headerlink" title="修改工作进程"></a>修改工作进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作进程数，一般是 CPU 核心数，设置成 auto 也可</span></span><br><span class="line">worker_processes 4;</span><br><span class="line"><span class="comment"># 工作进程的最大打开文件限制，太小会出现 `Too many open files`，此参数受系统文件的最大打开数限制，通过 `cat /proc/sys/fs/file-max` 查看，使用 `ulimit -n` 修改文件系统最大打开数</span></span><br><span class="line">worker_rlimit_nofile 10240; </span><br><span class="line">event &#123;</span><br><span class="line">    <span class="comment"># 每个工作进程对应的连接数</span></span><br><span class="line">    worker_connections 1024; </span><br><span class="line">    <span class="comment"># 使用 epoll 的 I/O 多路复用模型</span></span><br><span class="line">    use epoll; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   <span class="comment"># 与浏览器的长连接时间</span></span><br><span class="line">   keepalived_timeout 65; </span><br><span class="line"></span><br><span class="line">   upstream server_pool &#123;</span><br><span class="line">      server localhost:8080 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">      server localhost:8081 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">      <span class="comment"># 与服务器的长连接数</span></span><br><span class="line">      keepalive 300;</span><br><span class="line">   &#125;</span><br><span class="line">   location / &#123;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">      proxy_pass http://server_pool/;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="高效传输"><a href="#高效传输" class="headerlink" title="高效传输"></a>高效传输</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 减少文件在应用和内核之间拷贝</span></span><br><span class="line">sendfile on;</span><br><span class="line"><span class="comment"># 当数据包达到一定大小再发送</span></span><br><span class="line">tcp_nopush on; </span><br></pre></td></tr></table></figure>

<h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   <span class="comment"># 开启压缩</span></span><br><span class="line">   gzip on; </span><br><span class="line">   <span class="comment"># 压缩的 http 协议版本</span></span><br><span class="line">   gzip_http version 1.1; </span><br><span class="line">   <span class="comment"># 压缩级别，1-9，级别越大 CPU 使用越高</span></span><br><span class="line">   gzip_comp_level 6; </span><br><span class="line">   <span class="comment"># 限制最小压缩，小于 1k 文件不会压缩</span></span><br><span class="line">   gzip_min_length 1k;</span><br><span class="line">   <span class="comment"># gzip 申请内存的大小，按块大小的倍数申请内存空间</span></span><br><span class="line">   gzip_buffers 4 16k; </span><br><span class="line">   <span class="comment"># IE6 及以下版本不启用bvbvzip</span></span><br><span class="line">   gzip <span class="built_in">disable</span> <span class="string">&quot;MSIE [1-6]\.&quot;</span>; </span><br><span class="line">   <span class="comment"># 需要压缩的类型</span></span><br><span class="line">   gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/javascript application/json;</span><br><span class="line">   <span class="comment"># 启用应答头 Vary: Accept-Encoding</span></span><br><span class="line">   gzip_vary on;</span><br><span class="line">   gzip_proxied any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   location ~* \.(ico|jpe?g|gif|png|bmp|swf|flv)$ &#123;</span><br><span class="line">      <span class="comment"># 过期时间</span></span><br><span class="line">      expires 12h;</span><br><span class="line">      <span class="comment"># expires @22h30m;</span></span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">     location ~* \.(gif|jpg|png|swf|flv)$ &#123;</span><br><span class="line">        root /data/www/images/;</span><br><span class="line">        valid_referers *.ckx.ink;   </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">           <span class="built_in">return</span> 404;</span><br><span class="line">        &#125;  </span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    <span class="comment"># 允许跨域请求的域，* 代表所有</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> *;</span><br><span class="line">    <span class="comment"># 允许带上 cookie 请求</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    <span class="comment"># 允许请求的方法，比如 GET/POST/PUT/DELETE</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> *;</span><br><span class="line">    <span class="comment"># 允许请求的 header</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> *;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="location-匹配规则"><a href="#location-匹配规则" class="headerlink" title="location 匹配规则"></a>location 匹配规则</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">空格：默认匹配，普通匹配</span><br><span class="line">=：精确匹配</span><br><span class="line">~*：匹配正则表达式，不区分大小写</span><br><span class="line">~：匹配正则表达式，区分大小写</span><br><span class="line">^~：以某个字符路径开头</span><br></pre></td></tr></table></figure>

<h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><p>安装 ssl 模块：http_ssl_module</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    <span class="comment">#SSL 访问端口号为 443</span></span><br><span class="line">    listen 443 ssl; </span><br><span class="line">    <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">    server_name ckx.ink; </span><br><span class="line">    <span class="comment">#证书文件名称</span></span><br><span class="line">    ssl_certificate /etc/tencentssl/1_ckx.ink_bundle.crt;</span><br><span class="line">    <span class="comment">#私钥文件名称</span></span><br><span class="line">    ssl_certificate_key /etc/tencentssl/2_ckx.ink.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    <span class="comment">#请按照以下协议配置</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; </span><br><span class="line">    <span class="comment">#请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    <span class="comment">#HSTS</span></span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=31536000&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx+Keepalived实现双机主备和双主热备</title>
    <url>/2021/11/07/195703.html</url>
    <content><![CDATA[<blockquote>
<p>Nginx+Keepalived实现双机主备和双主热备</p>
</blockquote>
<span id="more"></span>

<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><h5 id="两台服务器"><a href="#两台服务器" class="headerlink" title="两台服务器"></a>两台服务器</h5><p>192.168.1.104<br>192.168.1.105<br>192.168.1.110  VIP<br>192.168.1.111  VIP</p>
<blockquote>
<p>开启 112 端口，此为 Keepalived 通信端口</p>
</blockquote>
<h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line">tar -zxvf nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>

<h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建临时目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /var/temp/nginx -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到nginx目录后执行此命令，为了创建makefile文件</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--with-http_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译并安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置软链接</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/nginx/conf/ /etc/nginx</span><br></pre></td></tr></table></figure>

<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx</span><br><span class="line">sbin/nginx</span><br></pre></td></tr></table></figure>

<h5 id="修改两个-Nginx-的-index-html"><a href="#修改两个-Nginx-的-index-html" class="headerlink" title="修改两个 Nginx 的 index.html"></a>修改两个 Nginx 的 index.html</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vim html/index.html</span><br><span class="line">将 h1 标签下 Welcome to nginx! 后添加当前主机的 ip，主要为了和另外一台机器做区分</span><br><span class="line">sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<h5 id="访问-Nginx"><a href="#访问-Nginx" class="headerlink" title="访问 Nginx"></a>访问 Nginx</h5><p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-07_22-59-10-0324ed8c358346069e4d9eefb70697de.png" alt="image.png"><br><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-07_23-05-12-c0c1ab6e51d540bcb044d8641e371114.png" alt="image.png"></p>
<h4 id="安装-Keepalived"><a href="#安装-Keepalived" class="headerlink" title="安装 Keepalived"></a>安装 Keepalived</h4><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.keepalived.org/software/keepalived-2.2.4.tar.gz</span><br><span class="line">tar -zxvf keepalived-2.2.4.tar.gz</span><br></pre></td></tr></table></figure>

<h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> keepalived-2.2.4</span><br><span class="line">./configure --prefix=/usr/local/keepalived --sysconf=/etc</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h5 id="将-Keepalived-设为服务"><a href="#将-Keepalived-设为服务" class="headerlink" title="将 Keepalived 设为服务"></a>将 Keepalived 设为服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/software/keepalived-2.2.4/keepalived/etc</span><br><span class="line"><span class="built_in">cp</span> init.d/keepalived /etc/init.d/</span><br><span class="line"><span class="built_in">cp</span> sysconfig/keepalived /etc/sysconfig/</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure>

<h4 id="双机主备"><a href="#双机主备" class="headerlink" title="双机主备"></a>双机主备</h4><h5 id="修改配置文件（主）"><a href="#修改配置文件（主）" class="headerlink" title="修改配置文件（主）"></a>修改配置文件（主）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment"># 路由id：当前安装keepalived节点主机的标识符，全局唯一</span></span><br><span class="line">   router_id keep_104</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment"># 表示的状态，当前的104为Nginx主节点，MASTER/BACKUP</span></span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="comment"># 当前实例绑定的网卡</span></span><br><span class="line">    interface ens33</span><br><span class="line">    <span class="comment"># 保证主备节点一致</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment"># 优先级/权重，谁的优先级高，在MASTER挂掉之后，就会成为MASTER</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment"># 主备之间同步检查的时间间隔，默认1秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment"># 认证授权的密码，防止非法节点的进入</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.110</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost keepalived]<span class="comment"># ip addr # 可以看到，我们的 VIP 已经设置成功</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:3a:50:37 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.104/24 brd 192.168.1.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 7148sec preferred_lft 7148sec</span><br><span class="line">    inet 192.168.1.110/32 scope global ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::6734:7460:379a:910f/64 scope <span class="built_in">link</span> noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:4e:e6:fa:e4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:4eff:fee6:fae4/64 scope <span class="built_in">link</span> </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h5 id="修改配置文件（备）"><a href="#修改配置文件（备）" class="headerlink" title="修改配置文件（备）"></a>修改配置文件（备）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment"># 路由id：当前安装keepalived节点主机的标识符，全局唯一</span></span><br><span class="line">   router_id keep_105</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment"># 表示的状态，当前的104为Nginx主节点，MASTER/BACKUP</span></span><br><span class="line">    state BACKUP</span><br><span class="line">    <span class="comment"># 当前实例绑定的网卡</span></span><br><span class="line">    interface ens33</span><br><span class="line">    <span class="comment"># 保证主备节点一致</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment"># 优先级/权重，谁的优先级高，在MASTER挂掉之后，就会成为MASTER</span></span><br><span class="line">    priority 80</span><br><span class="line">    <span class="comment"># 主备之间同步检查的时间间隔，默认1秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment"># 认证授权的密码，防止非法节点的进入</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 虚拟ip</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.110</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="重启-Keepalived-后进行测试"><a href="#重启-Keepalived-后进行测试" class="headerlink" title="重启 Keepalived 后进行测试"></a>重启 Keepalived 后进行测试</h5><p>访问 VIP，<a href="http://192.168.1.110/">http://192.168.1.110</a></p>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-07_22-59-37-8a35213cf69540f7be677920ea374028.png" alt="image.png"></p>
<p>关闭 104 节点 Keepalived，继续访问 VIP</p>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-07_23-35-45-859f68c0b6b648de8bc9388deb9676d4.png" alt="image.png"></p>
<h5 id="配置-Nginx-自动重启"><a href="#配置-Nginx-自动重启" class="headerlink" title="配置 Nginx 自动重启"></a>配置 Nginx 自动重启</h5><p>在 Keepalived 配置文件加添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vrrp_script check_nginx_alive &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_nginx_alive_or_not.sh&quot;</span></span><br><span class="line">    <span class="comment"># 每隔两秒运行上一行脚本</span></span><br><span class="line">    interval 2 </span><br><span class="line">    <span class="comment"># 如果脚本运行成功，则加权重10</span></span><br><span class="line">    weight 10 </span><br><span class="line">    <span class="comment"># 如果脚本运行失败，则减权重10</span></span><br><span class="line">    <span class="comment"># weight -10 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx_alive <span class="comment"># 追踪 nginx 脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=`ps -C nginx --no-header |<span class="built_in">wc</span> -l`</span><br><span class="line"><span class="comment"># 判断nginx是否宕机，如果宕机了，尝试重启</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    /usr/local/nginx/sbin/nginx</span><br><span class="line">    <span class="comment"># 等待一小会再次检查nginx，如果没有启动成功，则停止keepalived，使其启动备用机</span></span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line">    <span class="keyword">if</span> [ `ps -C nginx --no-header |<span class="built_in">wc</span> -l` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        killall keepalived</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="双主热备"><a href="#双主热备" class="headerlink" title="双主热备"></a>双主热备</h4><h5 id="修改配置文件（104）"><a href="#修改配置文件（104）" class="headerlink" title="修改配置文件（104）"></a>修改配置文件（104）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment"># 路由id：当前安装keepalived节点主机的标识符，全局唯一</span></span><br><span class="line">   router_id keep_104</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx_alive &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_nginx_alive_or_not.sh&quot;</span></span><br><span class="line">    interval 2 <span class="comment"># 每隔两秒运行上一行脚本</span></span><br><span class="line">    weight 10 <span class="comment"># 如果脚本运行成功，则升级权重为10</span></span><br><span class="line">    <span class="comment"># weight -10 # 如果脚本运行失败，则降低权重为-10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment"># 表示的状态，当前的104为Nginx主节点，MASTER/BACKUP</span></span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="comment"># 当前实例绑定的网卡</span></span><br><span class="line">    interface ens33</span><br><span class="line">    <span class="comment"># 保证主备节点一致</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment"># 优先级/权重，谁的优先级高，在MASTER挂掉之后，就会成为MASTER</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment"># 主备之间同步检查的时间间隔，默认1秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment"># 认证授权的密码，防止非法节点的进入</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx_alive <span class="comment"># 追踪 nginx 脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.110</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 80</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.111</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="修改配置文件（105）"><a href="#修改配置文件（105）" class="headerlink" title="修改配置文件（105）"></a>修改配置文件（105）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment"># 路由id：当前安装keepalived节点主机的标识符，全局唯一</span></span><br><span class="line">   router_id keep_105</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx_alive &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_nginx_alive_or_not.sh&quot;</span></span><br><span class="line">    interval 2 <span class="comment"># 每隔两秒运行上一行脚本</span></span><br><span class="line">    weight 10 <span class="comment"># 如果脚本运行成功，则升级权重为10</span></span><br><span class="line">    <span class="comment"># weight -10 # 如果脚本运行失败，则降低权重为-10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment"># 表示的状态，当前的104为Nginx主节点，MASTER/BACKUP</span></span><br><span class="line">    state BACKUP</span><br><span class="line">    <span class="comment"># 当前实例绑定的网卡</span></span><br><span class="line">    interface ens33</span><br><span class="line">    <span class="comment"># 保证主备节点一致</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment"># 优先级/权重，谁的优先级高，在MASTER挂掉之后，就会成为MASTER</span></span><br><span class="line">    priority 80</span><br><span class="line">    <span class="comment"># 主备之间同步检查的时间间隔，默认1秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment"># 认证授权的密码，防止非法节点的进入</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx_alive <span class="comment"># 追踪 nginx 脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 虚拟ip</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.110</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.111</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h5><ul>
<li>nginx: [emerg] mkdir() “&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;client” failed (2: No such file or directory)<br>解决方案：mkdir -p &#x2F;var&#x2F;temp&#x2F;nginx</li>
<li>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)<br>解决方案：检查防火墙，kill 掉 nginx 进程并重新启动</li>
<li>nginx: [emerg] open() “&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid” failed (2: No such file or directory)<br>解决方案：touch &#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid</li>
</ul>
<h5 id="日志文件定时切割"><a href="#日志文件定时切割" class="headerlink" title="日志文件定时切割"></a>日志文件定时切割</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> cut_my_log.sh</span><br><span class="line"><span class="built_in">chmod</span> +x cut_my_log.sh</span><br><span class="line">vim cut_my_log.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">LOG_PATH=<span class="string">&quot;/var/log/nginx/&quot;</span></span><br><span class="line">RECORD_TIME=$(<span class="built_in">date</span> -d <span class="string">&quot;yesterday&quot;</span> +%Y-%m-%d+%H:%M)</span><br><span class="line">PID=/var/run/nginx/nginx.pid</span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$&#123;LOG_PATH&#125;</span>/access.log <span class="variable">$&#123;LOG_PATH&#125;</span>/access.<span class="variable">$&#123;RECORD_TIME&#125;</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$&#123;LOG_PATH&#125;</span>/error.log <span class="variable">$&#123;LOG_PATH&#125;</span>/error.<span class="variable">$&#123;RECORD_TIME&#125;</span>.<span class="built_in">log</span></span><br><span class="line"><span class="comment"># 向Nginx主进程发送信号，用于重新打开日志文件</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 `<span class="built_in">cat</span> <span class="variable">$PID</span>`</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install crontabs</span><br><span class="line"></span><br><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 每天凌晨1点执行</span></span><br><span class="line">0 1 * * * /usr/local/nginx/sbin/cut_my_log.sh</span><br><span class="line"></span><br><span class="line">crontab -l</span><br><span class="line">service crond restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>索引失效问题</title>
    <url>/2021/11/08/205723.html</url>
    <content><![CDATA[<blockquote>
<p>在线上查询异常日志的时候发现一个错误 IOException: Broken pipe，根据日志初步判断是由于慢 sql 所导致连接超时，以下是排查过程</p>
</blockquote>
<span id="more"></span>

<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-08_14-03-46-81d9f24f8e924e628c15e64b8b1b300a.png" alt="image.png"></p>
<h4 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h4><ol>
<li>先看下这条 sql，没有发现问题，使用 explain 分析 sql，没有使用到索引</li>
</ol>
<p><img data-src="/../../../../upload/2021/11/Snipaste_2021-11-08_14-20-44-f6c9a480ca624588a9490d765f01d90b.png" alt="image.png"></p>
<ol start="2">
<li>查看分析结果的 Extra 列，看到 Range checked for each record (index map: 0x10)，查询后发现原因是由于 pi 这张表所使用排序规则是 utf8mb4_general_ci，而 ps 表使用的是 utf8mb4_bin</li>
<li>修改排序规则，可以看到已经使用到了索引</li>
</ol>
<h4 id="索引失效问题总结"><a href="#索引失效问题总结" class="headerlink" title="索引失效问题总结"></a>索引失效问题总结</h4><ul>
<li>使用索引列进行连接，字符集或排序规则不一致</li>
<li>隐式类型转换</li>
<li>使用了左模糊</li>
<li>对索引列进行计算或使用内置函数</li>
<li>组合索引违背最左匹配原则</li>
<li>索引列使用了负向查询（!&#x3D;，&lt;&gt;，!&lt;，!&gt;，not，not in，not like，not exists），可能会导致索引失效</li>
<li>where 语句中包含 or 时，可能会导致索引失效</li>
</ul>
<h4 id="B-Tree-索引"><a href="#B-Tree-索引" class="headerlink" title="B-Tree 索引"></a>B-Tree 索引</h4><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul>
<li>完全匹配：index(name) &#x3D;&gt; where name &#x3D; ‘chenkaixin12121’</li>
<li>范围匹配：index(age) &#x3D;&gt; where age &gt; 18</li>
<li>前缀匹配：index(name) &#x3D;&gt; where name like ‘chen%’</li>
</ul>
<h5 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">index(name,age,sex)</span><br><span class="line"></span><br><span class="line"># 查询条件不包括最左列，无法使用索引</span><br><span class="line">where age = 18 and sex = 1;</span><br><span class="line"># 跳过了索引中的列，则无法完全使用索引，只能使用 name 索引</span><br><span class="line">where name = &#x27;chenkaixin12121&#x27; and sex = 1;</span><br><span class="line"># 查询中有某个列的范围（模糊）查询，则其右边所有列都无法使用索引，只能用到 name,age 索引</span><br><span class="line">where name = &#x27;chenkaixin12121&#x27; and age &gt; 18 and sex = 1;</span><br></pre></td></tr></table></figure>

<h4 id="创建索引的原则"><a href="#创建索引的原则" class="headerlink" title="创建索引的原则"></a>创建索引的原则</h4><h5 id="建议创建索引的场景"><a href="#建议创建索引的场景" class="headerlink" title="建议创建索引的场景"></a>建议创建索引的场景</h5><ul>
<li>select 语句，频繁作为 where 条件的字段</li>
<li>update&#x2F;delete 语句的 where 条件</li>
<li>distinct 所使用的字段</li>
<li>字段的值有唯一性约束</li>
<li>对于多表查询，联接字段应创建索引，且类型务必保持一致</li>
<li>避免隐藏类型转换</li>
</ul>
<h5 id="不建议创建索引的场景"><a href="#不建议创建索引的场景" class="headerlink" title="不建议创建索引的场景"></a>不建议创建索引的场景</h5><ul>
<li>where 子句里用不到的字段</li>
<li>表的记录非常少</li>
<li>有大量重复数据，选择性低，因为索引的选择性越高，查询效率越好，因为可以在查找时过滤更多行</li>
<li>频繁更新的字段，如果创建索引要考虑其索引维护开销</li>
</ul>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>LVS+Nginx+Keepalived高可用集群</title>
    <url>/2021/11/09/222019.html</url>
    <content><![CDATA[<blockquote>
<p>LVS+Nginx+Keepalived高可用集群</p>
</blockquote>
<span id="more"></span>

<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><h5 id="四台服务器"><a href="#四台服务器" class="headerlink" title="四台服务器"></a>四台服务器</h5><p>192.168.1.105<br>192.168.1.104<br>192.168.1.120 VIP<br>192.168.1.103 LVS Master<br>192.168.1.102 LVS Backup</p>
<h5 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h5><p>102 和 103 节点安装 Keepalived，104 和 105 节点安装 Nginx 和 Keepalived，参考：&#x2F;archives&#x2F;nginxkeepalived实现双机主备和双主热备</p>
<h4 id="配置-104-和-105-节点"><a href="#配置-104-和-105-节点" class="headerlink" title="配置 104 和 105 节点"></a>配置 104 和 105 节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts</span><br><span class="line"><span class="built_in">cp</span> ifcfg-lo ifcfg-lo:1</span><br><span class="line"></span><br><span class="line">vim ifcfg-lo:1</span><br><span class="line">DEVICE=lo:1</span><br><span class="line">IPADDR=192.168.1.120</span><br><span class="line">NETMASK=255.255.255.255</span><br><span class="line">NETWORK=127.0.0.0</span><br><span class="line"><span class="comment"># If you&#x27;re having problems with gated making 127.0.0.0/8 a martian,</span></span><br><span class="line"><span class="comment"># you can change this to something else (255.255.255.255, for example)</span></span><br><span class="line">BROADCAST=127.255.255.255</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">NAME=loopback</span><br><span class="line"></span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># configration for lvs</span></span><br><span class="line">net.ipv4.conf.all.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.default.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.lo.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.all.arp_announce = 2</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce = 2</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br><span class="line">route add -host 192.168.1.120 dev lo:1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;route add -host 192.168.1.120 dev lo:1&quot;</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>

<h4 id="配置-103-节点"><a href="#配置-103-节点" class="headerlink" title="配置 103 节点"></a>配置 103 节点</h4><h5 id="安装-ipvsadm-并配置-ip"><a href="#安装-ipvsadm-并配置-ip" class="headerlink" title="安装 ipvsadm 并配置 ip"></a>安装 ipvsadm 并配置 ip</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install ipvsadm</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line"><span class="built_in">cp</span> ifcfg-ens33 ifcfg-ens33:1</span><br><span class="line"></span><br><span class="line">vim ifcfg-ens33:1</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEVICE=ens33:1</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.1.120</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure>

<h5 id="修改-Keepalived-配置文件后重启"><a href="#修改-Keepalived-配置文件后重启" class="headerlink" title="修改 Keepalived 配置文件后重启"></a>修改 Keepalived 配置文件后重启</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_102</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33:1</span><br><span class="line">    virtual_router_id 66</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.120</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.1.120 80 &#123;</span><br><span class="line">    <span class="comment"># 健康检查的时间，单位：秒</span></span><br><span class="line">    delay_loop 6</span><br><span class="line">    <span class="comment"># 配置负载均衡算法，默认是轮询</span></span><br><span class="line">    lb_algo rr</span><br><span class="line">    <span class="comment"># 设置LVS的模式 NAT|TUN|DR</span></span><br><span class="line">    lb_kind DR</span><br><span class="line">    <span class="comment"># 设置会话持久化的时间</span></span><br><span class="line">    persistence_timeout 5</span><br><span class="line">    <span class="comment"># 协议</span></span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 负载均衡的真实服务器，也就是Nginx节点的真实IP地址</span></span><br><span class="line">    real_server 192.168.1.104 80 &#123;</span><br><span class="line">        <span class="comment"># 轮询的默认权重配比设置为1</span></span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment"># 设置健康检测</span></span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            <span class="comment"># 检查的80端口</span></span><br><span class="line">            connect_port 80</span><br><span class="line">            <span class="comment"># 检查的超时时间</span></span><br><span class="line">            connect_timeout 2</span><br><span class="line">            <span class="comment"># 重试次数 2次</span></span><br><span class="line">            nb_get_retry 2</span><br><span class="line">            <span class="comment"># 间隔时间 3秒</span></span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.1.105 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_port 80</span><br><span class="line">            connect_timeout 2</span><br><span class="line">            nb_get_retry 2</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置-102-节点"><a href="#配置-102-节点" class="headerlink" title="配置 102 节点"></a>配置 102 节点</h4><h5 id="安装-ipvsadm"><a href="#安装-ipvsadm" class="headerlink" title="安装 ipvsadm"></a>安装 ipvsadm</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install ipvsadm</span><br></pre></td></tr></table></figure>

<h5 id="修改-Keepalived-配置文件后重启-1"><a href="#修改-Keepalived-配置文件后重启-1" class="headerlink" title="修改 Keepalived 配置文件后重启"></a>修改 Keepalived 配置文件后重启</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id LVS_102</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33:1</span><br><span class="line">    virtual_router_id 66</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.120</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.1.120 80 &#123;</span><br><span class="line">    <span class="comment"># 健康检查的时间，单位：秒</span></span><br><span class="line">    delay_loop 6</span><br><span class="line">    <span class="comment"># 配置负载均衡算法，默认是轮询</span></span><br><span class="line">    lb_algo rr</span><br><span class="line">    <span class="comment"># 设置LVS的模式 NAT|TUN|DR</span></span><br><span class="line">    lb_kind DR</span><br><span class="line">    <span class="comment"># 设置会话持久化的时间</span></span><br><span class="line">    persistence_timeout 5</span><br><span class="line">    <span class="comment"># 协议</span></span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 负载均衡的真实服务器，也就是Nginx节点的真实IP地址</span></span><br><span class="line">    real_server 192.168.1.104 80 &#123;</span><br><span class="line">        <span class="comment"># 轮询的默认权重配比设置为1</span></span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment"># 设置健康检测</span></span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            <span class="comment"># 检查的80端口</span></span><br><span class="line">            connect_port 80</span><br><span class="line">            <span class="comment"># 检查的超时时间</span></span><br><span class="line">            connect_timeout 2</span><br><span class="line">            <span class="comment"># 重试次数 2次</span></span><br><span class="line">            nb_get_retry 2</span><br><span class="line">            <span class="comment"># 间隔时间 3秒</span></span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.1.105 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_port 80</span><br><span class="line">            connect_timeout 2</span><br><span class="line">            nb_get_retry 2</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Keepalived</tag>
        <tag>LVS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL调优</title>
    <url>/2021/11/16/202646.html</url>
    <content><![CDATA[<blockquote>
<p>测试数据：<a href="https://github.com/datacharmer/test_db">https://github.com/datacharmer/test_db</a></p>
</blockquote>
<span id="more"></span>

<h4 id="数据库调优的七个维度"><a href="#数据库调优的七个维度" class="headerlink" title="数据库调优的七个维度"></a>数据库调优的七个维度</h4><p>从上到下，效果越来越差，成本越来越高</p>
<ul>
<li>业务需求<ul>
<li>勇敢的对不合理的需求说不</li>
<li>拨乱反正</li>
</ul>
</li>
<li>系统架构<ul>
<li>做架构设计的时候，应充分考虑业务的实际情况，考虑好数据库的各种选择</li>
</ul>
</li>
<li>SQL 及索引<ul>
<li>根据需求编写良好的 SQL，并去创建足够高效的索引</li>
</ul>
</li>
<li>表结构<ul>
<li>设置良好的结构</li>
</ul>
</li>
<li>数据库参数设置<ul>
<li>设置合理的数据库性能参数</li>
</ul>
</li>
<li>系统配置<ul>
<li>操作系统提供了各种资料使用策略，设置合理的配置，以便数据库充分利用资源</li>
</ul>
</li>
<li>硬件<ul>
<li>选择什么配置的机器</li>
</ul>
</li>
</ul>
<h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">作用</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">log_out_put</td>
<td align="center">日志输出到哪儿，默认 FILE，表示文件，设置成TABLE，则将日志记录到 mysql.slow_log 中，也可设置多种格式，比如 FILE, TABLE</td>
<td align="center">FILE</td>
</tr>
<tr>
<td align="center">long_query_time</td>
<td align="center">执行时间超过这么久才记录到慢查询日志，单位秒，可使用小数表示小于秒的时间</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">log_queries_not_using_indexes</td>
<td align="center">是否要将未使用索引的 SQL 记录到慢查询日志中，此配置会无视 long-query-time 的的配置，生产环境建议关闭，开发环境建议开启</td>
<td align="center">OFF</td>
</tr>
<tr>
<td align="center">log_throttle_queries_not_using_indexes</td>
<td align="center">和 log_queries_not_using_indexes 配合使用，如果 log_queries_not_using_indexes 打开，则该参数将限制每分钟写入的、未使用索引的 SQL 数量</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">min_examined_row_limit</td>
<td align="center">扫描行数至少达到这么多才记录到慢查询日志</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">log_slow_admin_statements</td>
<td align="center">是否要记录管理语句，默认关闭，管理语句包括 ALTER TABLE，ANALYZE TABLE，CHECK TABLE，CREATE INDEX，DROP INDEX，OPTIMIZE TABLE，and REPAIR TAB</td>
<td align="center">ОFF</td>
</tr>
<tr>
<td align="center">slow_query_log_file</td>
<td align="center">指定慢查询日志文件路径</td>
<td align="center">datadir 目录下</td>
</tr>
<tr>
<td align="center">log_slow_slave_statements</td>
<td align="center">该参数在从库上设置，决定是否记录在复制过程中超过 long_query_time 的 SQL，如果 binlog 格式是 row，则该参数无效</td>
<td align="center">OFF</td>
</tr>
<tr>
<td align="center">log_slow_extra</td>
<td align="center">当 log_output&#x3D;FILE 时，是否要记录额外信息（MySQL 8.0.14 开始提供），对 log_output&#x3D;TABLE 的结果无影响</td>
<td align="center">OFF</td>
</tr>
</tbody></table>
<h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><ul>
<li>永久修改，修改配置文件 my.cnf，在 [mysqld] 下添加参数，重启 MySQL</li>
<li>临时修改，例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_output <span class="operator">=</span> <span class="string">&#x27;FILE,TABLE&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time <span class="operator">=</span> <span class="number">0.001</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_queries_not_using_indexes <span class="operator">=</span> <span class="string">&#x27;ON&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：设置 long_query_time 需要断开连接才能生效</p>
</blockquote>
<h5 id="日志存放位置"><a href="#日志存放位置" class="headerlink" title="日志存放位置"></a>日志存放位置</h5><ul>
<li>表：select * from mysql.slow_log;</li>
<li>文件：show variables like ‘%slow_query_log_file%’;</li>
</ul>
<h5 id="分析慢查询日志"><a href="#分析慢查询日志" class="headerlink" title="分析慢查询日志"></a>分析慢查询日志</h5><ul>
<li>mysqldumpslow：mysqldumpslow -s t -t 10 -a DESKTOP-63C43K6-slow.log</li>
<li>pt-query-digest</li>
</ul>
<h4 id="Explain-使用"><a href="#Explain-使用" class="headerlink" title="Explain 使用"></a>Explain 使用</h4><table>
<thead>
<tr>
<th align="center">Column</th>
<th align="center">JSON Name</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">select_id</td>
<td align="center">该语句的唯一标识</td>
</tr>
<tr>
<td align="center">select_type</td>
<td align="center">None</td>
<td align="center">查询类型</td>
</tr>
<tr>
<td align="center">table</td>
<td align="center">table_name</td>
<td align="center">这行数据对应的表名</td>
</tr>
<tr>
<td align="center">partitions</td>
<td align="center">partitions</td>
<td align="center">匹配的分区</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">access_type</td>
<td align="center">连接类型</td>
</tr>
<tr>
<td align="center">possible_keys</td>
<td align="center">possible_keys</td>
<td align="center">可能使用的索引</td>
</tr>
<tr>
<td align="center">key</td>
<td align="center">key</td>
<td align="center">实际使用的索引</td>
</tr>
<tr>
<td align="center">key_len</td>
<td align="center">key_length</td>
<td align="center">索引的长度</td>
</tr>
<tr>
<td align="center">ref</td>
<td align="center">ref</td>
<td align="center">索引的哪一列被引用了</td>
</tr>
<tr>
<td align="center">rows</td>
<td align="center">rows</td>
<td align="center">估计要扫描的行</td>
</tr>
<tr>
<td align="center">filtered</td>
<td align="center">filtered</td>
<td align="center">符合查询条件的数据百分比</td>
</tr>
<tr>
<td align="center">Extra</td>
<td align="center">None</td>
<td align="center">附加信息</td>
</tr>
</tbody></table>
<h5 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h5><table>
<thead>
<tr>
<th align="center">select_type Value</th>
<th align="center">JSON Name</th>
<th align="center">Meaning</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SIMPLE</td>
<td align="center">None</td>
<td align="center">简单查询（未使用 UNION 或子查询）</td>
</tr>
<tr>
<td align="center">PRIMARY</td>
<td align="center">None</td>
<td align="center">嵌套查询时最外层的查询</td>
</tr>
<tr>
<td align="center">UNION</td>
<td align="center">None</td>
<td align="center">UNION 中的第二个或后面的 SELECT 语句</td>
</tr>
<tr>
<td align="center">DEPENDENT UNION</td>
<td align="center">dependent (true)</td>
<td align="center">UNION 中的第二个或后面的 SELECT 语句，取决于外部查询</td>
</tr>
<tr>
<td align="center">UNION RESULT</td>
<td align="center">union_result</td>
<td align="center">UNION 的结果</td>
</tr>
<tr>
<td align="center">SUBQUERY</td>
<td align="center">None</td>
<td align="center">子查询中的第一个 SELECT</td>
</tr>
<tr>
<td align="center">DEPENDENT SUBQUERY</td>
<td align="center">dependent (true)</td>
<td align="center">子查询中的第一个 SELECT，取决于外部查询</td>
</tr>
<tr>
<td align="center">DERIVED</td>
<td align="center">None</td>
<td align="center">用来表示包含在 FROM 子句的子查询中的 SELECT，MySQL 会递归执行并将结果放到一个临时表中，MySQL 内部将其称为是 Derived table（派生表），因为该临时表是从子查询派生出来的</td>
</tr>
<tr>
<td align="center">DEPENDENT DERIVED</td>
<td align="center">dependent (true)</td>
<td align="center">依赖于另一个表的派生表</td>
</tr>
<tr>
<td align="center">MATERIALIZED</td>
<td align="center">materialized_from_subquery</td>
<td align="center">物化子查询</td>
</tr>
<tr>
<td align="center">UNCACHEABLE SUBQUERY</td>
<td align="center">cacheable (false)</td>
<td align="center">子查询，结果无法缓存，必须针对外部查询的每一行重新评估</td>
</tr>
<tr>
<td align="center">UNCACHEABLE UNION</td>
<td align="center">cacheable (false)</td>
<td align="center">UNION 属于UNCACHEABLE SUBQUERY 的第二个或后面的查询</td>
</tr>
</tbody></table>
<h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><p>扫描方式由快到慢</p>
<ul>
<li>sytem：该表只有一行（等于系统表），system 是 const 类型的特殊</li>
<li>const：命中主键和唯一索引，最多返回一条数据，const 查询非常快，因为它只读取一次</li>
<li>eq_ref：当使用了索引的全部组成部分，并且索引是主键或唯一索引才会使用该类型</li>
<li>ref：当满足索引的最左前缀规则，或者命中普通索引时才会发生</li>
<li>fulltext：全文索引</li>
<li>ref_or_null：该类型类似于 ref，但是 MySQL 会额外搜索哪些行包含 NULL，这种类型常见于解析子查询</li>
<li>index_merge：此类型使用了索引合并优化，表示一个查询里面用到了多个索引</li>
<li>unique_subquery：该类型和 eq_ref 类似，但是使用了 IN 查询，且子查询是主键或者唯一索引</li>
<li>index_subquery：和 unique_subquery 类似，只是子查询使用的是非唯一索引</li>
<li>range：只检索给定范围的行</li>
<li>index：与 ALL 的区别是 index 类型只遍历索引树</li>
<li>ALL：遍历全表以找到匹配的行</li>
</ul>
<h4 id="SQL-性能分析"><a href="#SQL-性能分析" class="headerlink" title="SQL 性能分析"></a>SQL 性能分析</h4><ul>
<li>information_schema</li>
</ul>
<p>从 MySQL8.0 开始，这个表已经开始被废弃</p>
<ul>
<li>performance_schema</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看是否开启性能监控</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> performance_schema.setup_actors;</span><br><span class="line"># 开启相关监控项</span><br><span class="line"><span class="keyword">UPDATE</span> performance_schema.setup_instruments <span class="keyword">SET</span> ENABLED <span class="operator">=</span> <span class="string">&#x27;YES&#x27;</span>, TIMED <span class="operator">=</span> <span class="string">&#x27;YES&#x27;</span> <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%statement/%&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> performance_schema.setup_instruments <span class="keyword">SET</span> ENABLED <span class="operator">=</span> <span class="string">&#x27;YES&#x27;</span>, TIMED <span class="operator">=</span> <span class="string">&#x27;YES&#x27;</span> <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%stage/%&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> performance_schema.setup_consumers <span class="keyword">SET</span> ENABLED <span class="operator">=</span> <span class="string">&#x27;YES&#x27;</span> <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%events_statements_%&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> performance_schema.setup_consumers <span class="keyword">SET</span> ENABLED <span class="operator">=</span> <span class="string">&#x27;YES&#x27;</span> <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%events_stages_%&#x27;</span>;</span><br><span class="line"># 要执行的 <span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salaries;</span><br><span class="line"># 获取语句的 EVENT_ID</span><br><span class="line"><span class="keyword">SELECT</span> EVENT_ID, <span class="keyword">TRUNCATE</span> ( TIMER_WAIT <span class="operator">/</span> <span class="number">1000000000000</span>, <span class="number">6</span> ) <span class="keyword">AS</span> Duration, SQL_TEXT <span class="keyword">FROM</span> PERFORMANCE_SCHEMA.events_statements_history_long <span class="keyword">WHERE</span> SQL_TEXT <span class="keyword">LIKE</span> <span class="string">&#x27;%salaries%&#x27;</span></span><br><span class="line"># 性能分析</span><br><span class="line"><span class="keyword">SELECT</span> event_name <span class="keyword">AS</span> Stage, <span class="keyword">TRUNCATE</span> ( TIMER_WAIT <span class="operator">/</span> <span class="number">1000000000000</span>, <span class="number">6</span> ) <span class="keyword">AS</span> Duration <span class="keyword">FROM</span> PERFORMANCE_SCHEMA.events_stages_history_long <span class="keyword">WHERE</span> NESTING_EVENT_ID <span class="operator">=</span> <span class="number">268</span></span><br></pre></td></tr></table></figure>

<h4 id="OPTIMIZER-TRACE"><a href="#OPTIMIZER-TRACE" class="headerlink" title="OPTIMIZER_TRACE"></a>OPTIMIZER_TRACE</h4><h4 id="数据库诊断命令"><a href="#数据库诊断命令" class="headerlink" title="数据库诊断命令"></a>数据库诊断命令</h4><ul>
<li>SHOW PROCESSLIST：查看当前正在运行的进程</li>
<li>SHOW STATUS：查看服务器相关信息</li>
<li>SHOW VARIABLES：查看 MySQL 的变量</li>
<li>SHOW TABLE STATUS：查看表以及视图的状态</li>
<li>SHOW INDEX：查看索引相关信息</li>
<li>SHOW ENGINE：展示有关存储引擎的相关信息</li>
<li>SHOW MASTER STATUS：展示有并 master binlog 文件的相关信息</li>
<li>SHOW SLAVE STATUS：展示 slave 线程的相关信息</li>
<li>SHOW PROCEDURE：查看存储过程</li>
<li>SHOW FUNCTION STATUS：查看函数</li>
<li>SHOW TRIGGERS：查看触发器的基本信息</li>
<li>SHOW WARNINGS：显示最后一个执行的语句所产生的错误、警告和通知</li>
<li>SHOW ERRORS：显示最后一个执行语句所产生的错误</li>
<li>SHOW BINARY LOGS：获取 binlog 文件列表</li>
<li>SHOW BINLOG EVENTS：只查看第一个 binlog 文件的内容</li>
<li>SHOW RELAYLOG EVENTS：查看 relaylog 文件内容</li>
</ul>
<h4 id="JOIN-优化"><a href="#JOIN-优化" class="headerlink" title="JOIN 优化"></a>JOIN 优化</h4><p>外层循环的表是驱动表，内层循环的表是被驱动表</p>
<ul>
<li>小表驱动大表</li>
<li>如果有 where 条件，应当要能够使用索引，并尽可能地减少外尝循环的数据量</li>
<li>join 的字段尽量创建索引</li>
<li>尽量减少扫描的行数</li>
<li>参数 join 的表不要太多</li>
<li>如果被驱动的表的 join 字段用不了索引，且内存较为充足，可以考虑把 join_buffer 设置得大一些</li>
</ul>
<h4 id="LIMIT-优化"><a href="#LIMIT-优化" class="headerlink" title="LIMIT 优化"></a>LIMIT 优化</h4><ul>
<li>覆盖索引 + join</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees e <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> emp_no <span class="keyword">from</span> employees limit <span class="number">300000</span>, <span class="number">10</span>) t <span class="keyword">on</span> e.emp_no <span class="operator">=</span> t.emp_no;</span><br></pre></td></tr></table></figure>

<ul>
<li>覆盖索引 + 子查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no <span class="operator">&gt;=</span> (<span class="keyword">select</span> emp_no <span class="keyword">from</span> employees limit <span class="number">300000</span>, <span class="number">1</span>) limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>范围查询 + limit 语句</li>
</ul>
<p>前提：拿到上一页的主键最大值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no <span class="operator">&gt;=</span> <span class="number">100100</span> limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果可以获取起始主键值和结束主键值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no <span class="keyword">between</span> <span class="number">100110</span> <span class="keyword">and</span> <span class="number">100120</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>禁止传入过大的页码</li>
</ul>
<p>因为页面有筛选条件存在，所以我们可以限制只能查询前几千条数据，已经足够了</p>
<h4 id="COUNT-优化"><a href="#COUNT-优化" class="headerlink" title="COUNT 优化"></a>COUNT 优化</h4><h5 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h5><ul>
<li>count(*) 和 count(1) 一样</li>
<li>count(*) 会选择最小的非主键索引，如果不存在任何非主键索引，则会使用主键</li>
<li>count(*) 不会排除掉该字段值为 null 的行，count(字段) 会排除</li>
<li>对于不带查询条件的 count(*) 语句，MyISAM 和 InnoDB（MySQL &gt;&#x3D; 8.0.13），都做了优化</li>
<li>如果没有特殊需求，尽量使用 count(*)</li>
</ul>
<h5 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h5><ul>
<li>创建一个更小的非主键索引</li>
<li>把数据库引擎换成 MyISAM，一般不使用</li>
<li>汇总表</li>
<li>缓存结果</li>
<li>sql_calc_found_rows</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sql_calc_found_rows <span class="operator">*</span> <span class="keyword">from</span> salaries;</span><br><span class="line"><span class="keyword">select</span> found_rows() <span class="keyword">as</span> salary_count;</span><br></pre></td></tr></table></figure>

<ul>
<li>information_schema</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> TABLE_ROWS <span class="keyword">from</span> information_schema.TABLES <span class="keyword">where</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;employees&#x27;</span> <span class="keyword">and</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;salaries&#x27;</span></span><br></pre></td></tr></table></figure>

<p>好处：不操作 salaries 表，无论它有多少数据，都可以迅速地返回结果<br>缺点：返回的不是准确值，只是估算值</p>
<ul>
<li>show table status，同上</li>
<li>explain，同上</li>
</ul>
<h4 id="ORDER-BY-优化"><a href="#ORDER-BY-优化" class="headerlink" title="ORDER BY 优化"></a>ORDER BY 优化</h4><h5 id="rowid-排序（常规排序）"><a href="#rowid-排序（常规排序）" class="headerlink" title="rowid 排序（常规排序）"></a>rowid 排序（常规排序）</h5><ol>
<li>从表中获取满足 WHERE 条件的记录</li>
<li>对于每条记录，将记录的主键及排序键（id，order_column）取出放入 sort buffer（由 sort_buffer_size 控制） </li>
<li>如果 sort_buffer 能存放所有满足条件的（id，order_column），则进行排序，否则 sort_buffer 满后，排序（快速排序算法<br>）并写到临时文件</li>
<li>若排序中产生了临时文件，需要利用归并排序算法，从而保证有序</li>
<li>循环执行上述过程，直到所有满足条件的记录全部参与排序</li>
<li>扫描排好序的（id，order_column）对，并利用 id 去取 SELECT 需要返回的其他字段</li>
<li>返回结果集</li>
</ol>
<p>特点：</p>
<ul>
<li>看 sort_buffer 是否能存放结果集里面的所有（id，order_column），如果不满足，就会产生临时文件</li>
<li>一次排序需要两次 IO<ul>
<li>第 2 步：把（id，order_column）扔到 sort_buffer</li>
<li>第 6 步：通过 id 去获取需要返回的其他字段，由于返回结果是按照 order_column 排序的，所以 id 是乱序的，会存在随机 IO 的问题，MySQL 内部针对这种情况做了个优化，在用 id 取数据之前排序并放到一个缓存里面，这个缓存大小由 read_rnd_buffer_size 控制，接着再去取记录，从而把随机 IO 转换成顺序 IO</li>
</ul>
</li>
</ul>
<h5 id="全字段排序（优化排序）"><a href="#全字段排序（优化排序）" class="headerlink" title="全字段排序（优化排序）"></a>全字段排序（优化排序）</h5><ul>
<li>直接取出SQL中需要的所有字段，放到 sort_buffer </li>
<li>由于 sort_buffer 已经包含了查询需要的所有字段，因此在 sort_buffer 中排序完成后可直接返回</li>
</ul>
<p>好处：性能的提升，无需两次 IO<br>缺点：一行数据占用的空间一般比 rowid 排序多，如果 sort_buffer 比较小，容易导致临时文件<br>如果选择：使用 max_length_for_sort_data，当 ORDER BY SQL 中出现字段总长度小于该值，使用全字段排序，否则使用 rowid 排序</p>
<h5 id="打包字段排序"><a href="#打包字段排序" class="headerlink" title="打包字段排序"></a>打包字段排序</h5><ul>
<li>MySQL 5.7 引入</li>
<li>全字段模式的优化，工作原理一样，但是将字段紧密地排列在一起而不是使用固定长度空间<blockquote>
<p>VARCHAR(255) “yes”：不打包 255字节，打包 2+3字节</p>
</blockquote>
</li>
</ul>
<h5 id="优化-Order-By"><a href="#优化-Order-By" class="headerlink" title="优化 Order By"></a>优化 Order By</h5><ul>
<li>利用索引，防止 filesort 的发生</li>
<li>如果发生了 filesort，并且没办法避免，想办法优化 filesort</li>
</ul>
<h5 id="如何优化-filesort"><a href="#如何优化-filesort" class="headerlink" title="如何优化 filesort"></a>如何优化 filesort</h5><ul>
<li>调大 sort_buffer_size，减少&#x2F;避免临时文件、归并操作<ul>
<li>optimizer trace 中 num_initial_chunks_spilled_to_disk 的值</li>
<li>sort_merge_passes 变量的值</li>
</ul>
</li>
<li>调大 read_rnd_buffer_size，让一次顺序 IO 返回的结果更多</li>
<li>设置合理的 max_length_for_sort_data 的值<ul>
<li>一般不建议随意调整</li>
</ul>
</li>
<li>调小 max_sort_length（排序时最多取多少字节）</li>
</ul>
<h4 id="GROUP-BY-优化"><a href="#GROUP-BY-优化" class="headerlink" title="GROUP BY 优化"></a>GROUP BY 优化</h4><p>性能依次递减</p>
<ul>
<li>松散索引扫描（Loose Index Scan）</li>
<li>紧凑索引扫描（Tight Index Scan）</li>
<li>临时表（Temporary table）</li>
</ul>
<h4 id="表结构设计优化"><a href="#表结构设计优化" class="headerlink" title="表结构设计优化"></a>表结构设计优化</h4><ul>
<li>字段少而精，建议 20 个以内<ul>
<li>把常用的字段放到一起</li>
<li>把不常用的字段独立出去</li>
<li>大字段（TEXT&#x2F;BLOB&#x2F;CLOB 等等）独立出去</li>
</ul>
</li>
<li>尽量用小型字段<ul>
<li>用数字替代字符串</li>
</ul>
</li>
<li>避免使用允许为 NULL 的字段<ul>
<li>允许为 NULL 字段很难查询优化</li>
<li>允许为 NULL 字段的索引需要额外空间</li>
</ul>
</li>
<li>合理平衡范式和冗余</li>
<li>如果数据量非常大，考虑分库分表</li>
</ul>
<h4 id="索引调优"><a href="#索引调优" class="headerlink" title="索引调优"></a>索引调优</h4><h5 id="字段的调优"><a href="#字段的调优" class="headerlink" title="字段的调优"></a>字段的调优</h5><p>新增一个字段，使用函数计算 hash 值（CRC32 或者 FNV64），存储起来，并将该字段添加索引，查询时使用 first_name_hash &#x3D; CRC32(‘chenkaixin12121’) 查询即可</p>
<p>缺点：like 无法使用该方式进行优化<br>解决方案：添加前缀索引</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">索引选择性 = 不重复的索引值/数据表的总记录数</span><br><span class="line"></span><br><span class="line"># 完整列的选择性</span><br><span class="line">select count(distinct first_name)/count(*) from employees;</span><br><span class="line"># 计算前缀索引的长度</span><br><span class="line">select count(distinct left(first_name, 8))/count(*) from employees;</span><br><span class="line"># 添加索引</span><br><span class="line">alter table employees add key (first_name(8))</span><br><span class="line"></span><br><span class="line">注意：无法做 order by, group by；无法使用覆盖索引</span><br></pre></td></tr></table></figure>

<h5 id="单列索引和组合索引"><a href="#单列索引和组合索引" class="headerlink" title="单列索引和组合索引"></a>单列索引和组合索引</h5><ul>
<li>SQL 存在多个条件，多个单列索引，会使用索引合并</li>
<li>如果出现索引合并，往往说明索引不够合理</li>
<li>如果 SQL 暂时没有性能问题，暂时可以不管</li>
<li>组合索引要注意索引列顺序</li>
</ul>
<h5 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h5><p>对应索引 X，SELECT 的字段只需从索引就能获得，而无需到表数据里获取，这样的索引就叫覆盖索引</p>
<ul>
<li>覆盖索引能提交SQL的性能</li>
<li>SELECT 尽量只返回想要的字段（使用覆盖索引，减少网络传输的开销）</li>
</ul>
<h5 id="重复索引"><a href="#重复索引" class="headerlink" title="重复索引"></a>重复索引</h5><p>索引是有开销的，增删改的时候，索引的维护开销，索引越多，开销越大，条件允许的情况下，尽量少创建索引</p>
<p>explain select * from salaries where from_date &#x3D; ‘1986-06-26’ order by  emp_no;<br>索引 index(from_date): type&#x3D;ref extra&#x3D;null，使用了索引<br>索引 index(from_date) 某种意义上来说就相当于 index(from_date, emp_no)</p>
<p>修改索引 index(from_date,to_date) 再次执行<br>explain select * from salaries where from_date &#x3D; ‘1986-06-26’ order by  emp_no;<br>索引 index(from_date,to_date): type&#x3D;ref extra&#x3D;Using filesort 说明 order by 子句无法使用索引<br>索引 index(from_date, to_date) 某种意义上来说就相当于index(from_date, to_date, emp_no)，不符合最左前缀原则，所以 order by 子句无法使用索引</p>
<h5 id="冗余索引（针对-B-Tree-和-B-Tree）"><a href="#冗余索引（针对-B-Tree-和-B-Tree）" class="headerlink" title="冗余索引（针对 B-Tree 和 B+Tree）"></a>冗余索引（针对 B-Tree 和 B+Tree）</h5><p>如果已经存在索引 index(A,B)，又创建了 index(A)，那么 index(A) 就是 index(A,B) 的冗余索引</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>分库分表-ShardingJDBC</title>
    <url>/2021/11/20/161804.html</url>
    <content><![CDATA[<blockquote>
<p>项目地址：<a href="https://github.com/chenkaixin12121/study/tree/master/sharding">https://github.com/chenkaixin12121/study/tree/master/sharding</a></p>
</blockquote>
<span id="more"></span>

<h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><h5 id="创建-ds0、ds1-数据库并生成表"><a href="#创建-ds0、ds1-数据库并生成表" class="headerlink" title="创建 ds0、ds1 数据库并生成表"></a>创建 ds0、ds1 数据库并生成表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_order_0`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_0`  (</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `amt` <span class="type">decimal</span>(<span class="number">12</span>, <span class="number">2</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_order_1</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_order_1`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_1`  (</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `amt` <span class="type">decimal</span>(<span class="number">12</span>, <span class="number">2</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_order_item_0</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_order_item_0`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_item_0`  (</span><br><span class="line">  `item_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `item_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">decimal</span>(<span class="number">12</span>, <span class="number">2</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `qty` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`item_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_order_item_1</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_order_item_1`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_item_1`  (</span><br><span class="line">  `item_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `item_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">decimal</span>(<span class="number">12</span>, <span class="number">2</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `qty` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`item_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure>

<h5 id="修改配置文件-application-yml"><a href="#修改配置文件-application-yml" class="headerlink" title="修改配置文件 application.yml"></a>修改配置文件 application.yml</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">none</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="comment"># 数据源配置</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://localhost:3306/ds0?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://localhost:3306/ds1?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment"># 默认数据源，未分片的表存在这</span></span><br><span class="line">      <span class="attr">default-data-source-name:</span> <span class="string">ds0</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="comment"># 分片表</span></span><br><span class="line">        <span class="attr">t_order:</span></span><br><span class="line">          <span class="comment"># 真实数据节点</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;0..1&#125;.t_order_$-&gt;&#123;0..1&#125;</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="comment"># 自增主键</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">order_id</span></span><br><span class="line">            <span class="comment"># 主键 id 生成，使用雪花算法</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br><span class="line">            <span class="attr">props:</span></span><br><span class="line">              <span class="attr">worker:</span></span><br><span class="line">                <span class="comment"># 工作机器唯一 id</span></span><br><span class="line">                <span class="attr">id:</span> <span class="number">0000</span></span><br><span class="line">          <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">          <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="comment"># 分表分片键</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="comment"># 分表算法</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">t_order_$-&gt;&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">        <span class="attr">t_order_item:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;0..1&#125;.t_order_item_$-&gt;&#123;0..1&#125;</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">item_id</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span></span><br><span class="line">            <span class="attr">props:</span></span><br><span class="line">              <span class="attr">worker:</span></span><br><span class="line">                <span class="attr">id:</span> <span class="number">0000</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">t_order_item_$-&gt;&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">      <span class="comment"># 绑定两张表</span></span><br><span class="line">      <span class="attr">binding-tables:</span> <span class="string">t_order,</span> <span class="string">t_order_item</span></span><br><span class="line">    <span class="comment"># 开启 sql 解析日志</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h5 id="测试方法-ShardingApplicationTest-save"><a href="#测试方法-ShardingApplicationTest-save" class="headerlink" title="测试方法 ShardingApplicationTest.save()"></a>测试方法 ShardingApplicationTest.save()</h5><h4 id="分片策略"><a href="#分片策略" class="headerlink" title="分片策略"></a>分片策略</h4><ul>
<li>标准分片策略</li>
<li>复合分片策略</li>
<li>Hint 分片策略</li>
<li>行表达式分片策略</li>
</ul>
<h4 id="分片算法"><a href="#分片算法" class="headerlink" title="分片算法"></a>分片算法</h4><h5 id="精确分片算法"><a href="#精确分片算法" class="headerlink" title="精确分片算法"></a>精确分片算法</h5><ol>
<li>实现 PreciseShardingAlgorithm 接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标准分片策略，分库或分表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPreciseShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">PreciseShardingAlgorithm</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 所有分片库或者分片表的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preciseShardingValue 分片属性，logicTableName 逻辑表，logicTableName 分片键，value 分片键的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doSharding</span><span class="params">(Collection&lt;String&gt; collection, PreciseShardingValue&lt;Long&gt; preciseShardingValue)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String databaseName : collection) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> String.valueOf(preciseShardingValue.getValue() % collection.size());</span><br><span class="line">            <span class="keyword">if</span> (databaseName.endsWith(suffix)) &#123;</span><br><span class="line">                <span class="keyword">return</span> databaseName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改配置文件</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">t_order:</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">standard:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">precise-algorithm-class-name:</span> <span class="string">ink.ckx.sharding.algorithm.MyPreciseShardingAlgorithm</span></span><br></pre></td></tr></table></figure>

<h5 id="范围分片算法"><a href="#范围分片算法" class="headerlink" title="范围分片算法"></a>范围分片算法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order <span class="keyword">where</span> user_id <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">100000</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现 RangeShardingAlgorithm 接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 范围分片算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRangeShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">RangeShardingAlgorithm</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, RangeShardingValue&lt;Integer&gt; shardingValue)</span> &#123;</span><br><span class="line">        Range&lt;Integer&gt; valueRange = shardingValue.getValueRange();</span><br><span class="line">        Set&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> valueRange.lowerEndpoint(); i &lt;= valueRange.upperEndpoint(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String databaseName : availableTargetNames) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> String.valueOf(i % availableTargetNames.size());</span><br><span class="line">                <span class="keyword">if</span> (databaseName.endsWith(suffix)) &#123;</span><br><span class="line">                    result.add(databaseName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改配置文件</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">t_order:</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">standard:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">range-algorithm-class-name:</span> <span class="string">ink.ckx.sharding.algorithm.MyRangeShardingAlgorithm</span></span><br></pre></td></tr></table></figure>

<h5 id="复合分片算法"><a href="#复合分片算法" class="headerlink" title="复合分片算法"></a>复合分片算法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order <span class="keyword">where</span> order_id <span class="operator">=</span> <span class="number">0</span> <span class="keyword">and</span> user_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>实现 ComplexKeysShardingAlgorithm 接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyComplexKeysShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">ComplexKeysShardingAlgorithm</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, ComplexKeysShardingValue&lt;Long&gt; shardingValue)</span> &#123;</span><br><span class="line">        <span class="comment">// 对应分片键的值</span></span><br><span class="line">        Map&lt;String, Collection&lt;Long&gt;&gt; columnNameAndShardingValuesMap = shardingValue.getColumnNameAndShardingValuesMap();</span><br><span class="line">        Collection&lt;Long&gt; orderIdValues = columnNameAndShardingValuesMap.get(<span class="string">&quot;order_id&quot;</span>);</span><br><span class="line">        Collection&lt;Long&gt; userIdValues = columnNameAndShardingValuesMap.get(<span class="string">&quot;user_id&quot;</span>);</span><br><span class="line">        <span class="comment">// 对分片键取模</span></span><br><span class="line">        List&lt;String&gt; shardingSuffix = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Long userId : userIdValues) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long orderId : orderIdValues) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> userId % <span class="number">2</span> + <span class="string">&quot;_&quot;</span> + orderId % <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">for</span> (String databaseName : availableTargetNames) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (databaseName.endsWith(suffix)) &#123;</span><br><span class="line">                        shardingSuffix.add(databaseName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shardingSuffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改配置文件</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">t_order:</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">complex:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id,user_id</span></span><br><span class="line">              <span class="attr">algorithm-class-name:</span> <span class="string">ink.ckx.sharding.algorithm.MyComplexKeysShardingAlgorithm</span></span><br></pre></td></tr></table></figure>
<h5 id="Hint-分片算法"><a href="#Hint-分片算法" class="headerlink" title="Hint 分片算法"></a>Hint 分片算法</h5><ol>
<li>实现 HintShardingAlgorithm 接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHintShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">HintShardingAlgorithm</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, HintShardingValue&lt;String&gt; shardingValues)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String tableName : availableTargetNames) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String shardingValue : shardingValues.getValues()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> String.valueOf(Long.parseLong(shardingValue) % availableTargetNames.size());</span><br><span class="line">                <span class="keyword">if</span> (tableName.endsWith(suffix)) &#123;</span><br><span class="line">                    result.add(tableName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改配置文件</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">t_order:</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">hint:</span></span><br><span class="line">              <span class="attr">algorithm-class-name:</span> <span class="string">ink.ckx.sharding.algorithm.MyHintShardingAlgorithm</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>强制指定</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HintManager.clear();</span><br><span class="line">HintManager hintManager = HintManager.getInstance();</span><br><span class="line">// 指定数据库</span><br><span class="line">hintManager.addDatabaseShardingValue(&quot;t_order&quot;, 0);</span><br><span class="line">// 指定数据库表</span><br><span class="line">hintManager.addTableShardingValue(&quot;t_order&quot; , 0);</span><br><span class="line">// 在读写分离数据库中，Hint 可以强制读主库</span><br><span class="line">// hintManager.setMasterRouteOnly();</span><br></pre></td></tr></table></figure>

<h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1,ds2</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="attr">readwrite-splitting:</span></span><br><span class="line">        <span class="attr">data-sources:</span></span><br><span class="line">          <span class="attr">master:</span></span><br><span class="line">            <span class="attr">write-data-source-name:</span> <span class="string">ds0</span></span><br><span class="line">          <span class="attr">slave:</span></span><br><span class="line">            <span class="attr">read-data-source-names:</span> <span class="string">ds1,ds2</span></span><br><span class="line">            <span class="attr">load-balancer-name:</span> <span class="string">round_robin</span></span><br></pre></td></tr></table></figure>

<h4 id="数据脱敏"><a href="#数据脱敏" class="headerlink" title="数据脱敏"></a>数据脱敏</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">      <span class="attr">encrypt-rule:</span></span><br><span class="line">        <span class="attr">encryptors:</span></span><br><span class="line">          <span class="attr">aes_encryptor:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">AES</span></span><br><span class="line">            <span class="attr">props:</span></span><br><span class="line">              <span class="attr">aes.key.value:</span> <span class="string">123456abc</span></span><br><span class="line">        <span class="attr">tables:</span></span><br><span class="line">          <span class="attr">t_order:</span></span><br><span class="line">            <span class="attr">columns:</span></span><br><span class="line">              <span class="attr">order_no:</span></span><br><span class="line">                <span class="attr">cipherColumn:</span> <span class="string">order_no</span></span><br><span class="line">                <span class="attr">encryptor:</span> <span class="string">aes_encryptor</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Sharding-JDBC</tag>
        <tag>分库分表</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM编译优化</title>
    <url>/2021/12/03/233421.html</url>
    <content><![CDATA[<blockquote>
<p>JVM 编译优化</p>
</blockquote>
<span id="more"></span>

<h4 id="字节码是如何运行的"><a href="#字节码是如何运行的" class="headerlink" title="字节码是如何运行的"></a>字节码是如何运行的</h4><p>解释：解释执行优势在于没有编译的等待时间，性能相对差一些<br>编译：编译执行运行效率会高很多，一般认为比解释执行快一个数量级，但是带来了额外的开销</p>
<h4 id="即时编译器（Just-In-Time）"><a href="#即时编译器（Just-In-Time）" class="headerlink" title="即时编译器（Just-In-Time）"></a>即时编译器（Just-In-Time）</h4><p>C1 编译器：</p>
<ul>
<li>是一个简单快速的编译器</li>
<li>主要关注局部性的优化</li>
<li>适用于执行时间较短或对启动性能有要求的程序，例如 GUI 应用对界面启动速度就有一定要求</li>
<li>也被称为 Client Compiler</li>
</ul>
<p>C2 编译器：</p>
<ul>
<li>是为长期运行的服务器端应用程序做性能调优的编译器</li>
<li>适用于执行时间较长或对峰值性能有要求的程序</li>
<li>也被称为是 Server Compiler</li>
</ul>
<h4 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h4><ul>
<li>0：解释执行</li>
<li>1：简单 C1 编译：会用 C1 编译器进行一些简单的优化，不开启 Profiling</li>
<li>2：受限的 C1 编译：仅执行带方法调用次数以及循环回边执行次数 Profiling 的 C1 编译</li>
<li>3：完全 C1 编译：会执行带有所有 Profiling 的 C1 代码</li>
<li>4：C2 编译：使用 C2 编译器进行优化，该级别会启用一些编译耗时较长的优化，一些情况下会根据性能监控信息进行一些非常激进的性能优化，级别越高，应用启动越慢，优化的开销越高，峰值性能也越高</li>
</ul>
<p>只想开启 C2：-XX:-TieredCompilation (禁用中间编译层(123层) )<br>只想开启 C1：-XX:+TieredCompilation -XX:TieredStopAtLevel&#x3D;1</p>
<h4 id="如何判断热点代码"><a href="#如何判断热点代码" class="headerlink" title="如何判断热点代码"></a>如何判断热点代码</h4><h5 id="基于采样的热点探测"><a href="#基于采样的热点探测" class="headerlink" title="基于采样的热点探测"></a>基于采样的热点探测</h5><p>这种探测方法的实现原理是 JVM 周期性的检查各个线程的虚拟机栈的栈顶，如果发现某个方法经常出现在栈顶，那么就认为这个方法是“热点方法”，这种探测方法的优点是实现简单、高效，还可以很容易的获取方法调用关系（将堆栈展开即可），缺点是难以精确的确认一个方法的热度，例如由于线程阻塞造成某个方法长时间处于栈顶，方法可能被误判为热点方法</p>
<h5 id="基于计数器的热点探测"><a href="#基于计数器的热点探测" class="headerlink" title="基于计数器的热点探测"></a>基于计数器的热点探测</h5><p>这种探测方法的实现原理是虚拟机为每个方法（甚至是代码块）建立计数器，统计各个方法的执行次数，如果执行次数超过一定的阈值就认为它是“热点方法”。这种探测方法的缺点是实现起来较为麻烦，需要为每个方法建立并维护计数器，并且不能直接获取到方法的调用关系，但优点是统计的结果更加精准和严谨</p>
<p>一般来说，计数器记录的不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然达不到被判断为“热点方法”的阈值，虚拟机会将这个方法的调用计数器的数值减半，这个过程被称为方法调用计数器热度的衰减（Counter Decay），而这段时间就称为次方法统计的半衰周期（Counter Half Life Time）</p>
<p>若计数器记录的是方法被调用的绝对次数，只要程序的运行时间足够长，绝大部分方法最终都会被判定为“热点方法”，并被编译成本地代码</p>
<ul>
<li>方法调用计数器（Invocation Counter）</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-06_11-34-24-965e6c35818b4de89b0dc846c70a9477.png" alt="image.png"></p>
<p>用于统计方法被调用的次数，在不开启分层编译的情况下，在 C1 编译器下的默认阈值是 1500 次，在 C2 模式下是 10000 次，也可用 -XX:CompileThreshold&#x3D;X 指定阈值</p>
<ul>
<li>回边计数器（Back Edge Counter）</li>
</ul>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-06_11-37-15-46f3f29b2d9646a5bdb16dc07cb925c3.png" alt="image.png"></p>
<p>用于统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge），在不开启分层编译的情况下，C1 编译器下的默认阈值 13995，C2 默认为 10700，可使用 -XX:OnStackReplacePercentage&#x3D;X 指定阈值<br>建立回边计数器的主要目的是为了触发 OSR（OnStackReplacement），所以 OSR 就是在运行中替换正在运行的函数的栈帧的技术</p>
<h4 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">private int add4(int x1, int x2, int x3, int x4) &#123;</span><br><span class="line">    return add2(x1, x2) + add2(x3, x4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private int add2(int x1, int x2) &#123;</span><br><span class="line">    return x1 + x2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 内联后</span><br><span class="line">private int add4(int x1, int x2, int x3, int x4) &#123;</span><br><span class="line">    return x1 + x2 + x3 + x4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用条件：</p>
<ul>
<li>方法体足够小<ul>
<li>热点方法：如果方法体小于 325 字节会尝试内联，可用 -XX:FreqInlineSize 修改大小</li>
<li>非热点方法：如果方法体小于 35 字节，会尝试内联，可用 -XX:MaxInlineSize 修改大小</li>
</ul>
</li>
<li>被调用方法运行时的实现被可以唯一确定<ul>
<li>private、static 及 final 方法，JIT 可以唯一确定具体的实现代码</li>
<li>public 的实例方法，指向的实现可能是自身、父类、子类的代码当且仅当 JIT 能够唯一确定方法的具体实现时，才有可能完成内联</li>
</ul>
</li>
</ul>
<p>注意：</p>
<ul>
<li>尽量让方法体小一些</li>
<li>尽量使用 private、static、final 关键字修改方法，避免因为多态，需要对方法做额外的检查</li>
<li>一些情况下，可通过 JVM 参数修改阈值，从而让更多方法内联</li>
</ul>
<p>可能带来的问题：</p>
<ul>
<li>CodeCache 的溢出，导致 JVM 退化成解释执行模式</li>
</ul>
<h5 id="内联相关JVM参数"><a href="#内联相关JVM参数" class="headerlink" title="内联相关JVM参数"></a>内联相关JVM参数</h5><table>
<thead>
<tr>
<th align="center">参数名</th>
<th align="center">默认</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-XX:+Printinlining</td>
<td align="center">-</td>
<td align="center">打印内联详情，该参数需和 -XX:+UnlockDiagnosticVMOptions 配合使用</td>
</tr>
<tr>
<td align="center">-XX:+UnlockDiagnosticVMOptions</td>
<td align="center">-</td>
<td align="center">打印 JVM 诊断相关的信息</td>
</tr>
<tr>
<td align="center">-XX:MaxInlineSize&#x3D;n</td>
<td align="center">35</td>
<td align="center">如果非热点方法的字节码超过该值，则无法内联，单位字节</td>
</tr>
<tr>
<td align="center">-XX:FreqInlineSize&#x3D;n</td>
<td align="center">325</td>
<td align="center">如果热点方法的字节码超过该值，则无法内联，单位字节</td>
</tr>
<tr>
<td align="center">-XX:InlineSamllCode&#x3D;n</td>
<td align="center">1000</td>
<td align="center">目标编译后生成的机器码代销大于该值则无法内联，单位字节</td>
</tr>
<tr>
<td align="center">-XX:MaxInlineLevel&#x3D;n</td>
<td align="center">9</td>
<td align="center">内联方法的最大调用帧数（嵌套调用的最大内联深度）</td>
</tr>
<tr>
<td align="center">-XX:MaxTrivialSize&#x3D;n</td>
<td align="center">6</td>
<td align="center">如果方法的字节码少于该值，则直接内联，单位字节</td>
</tr>
<tr>
<td align="center">-XX:MinlnliningThreshold&#x3D;n</td>
<td align="center">250</td>
<td align="center">如果目标方法的调用次数低于该值，则不去内联</td>
</tr>
<tr>
<td align="center">-XX:LiveNodeCountInliningCutoff&#x3D;n</td>
<td align="center">40000</td>
<td align="center">编译过程中最大活动节点数（IR节点）的上限，仅对 C2 编译器有效</td>
</tr>
<tr>
<td align="center">-XX:InlineFrequencyCount&#x3D;n</td>
<td align="center">100</td>
<td align="center">如果方法的调用点（call site）的执行次数超过该值，则触发内联</td>
</tr>
<tr>
<td align="center">-XX:MaxRecursivelnlineLevel&#x3D;n</td>
<td align="center">1</td>
<td align="center">递归调用大于这么多次就不内联</td>
</tr>
<tr>
<td align="center">-XX:+InlineSynchronizedMethods</td>
<td align="center">开启</td>
<td align="center">是否允许内联同步方法</td>
</tr>
</tbody></table>
<h4 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h4><p>逃逸分析（Escape Analysis）是判断一个对象是否被外部方法引用或外部线程访问的分析技术，编译器会根据逃逸分析的结果对代码进行优化，可以通过 -XX:+DoEscapeAnalysis 开启逃逸分析（JDK8 默认开启）</p>
<p>逃逸分析场景：</p>
<ul>
<li>全局变量赋值逃逸</li>
<li>方法返回值逃逸</li>
<li>实例引用逃逸</li>
<li>线程逃逸：赋值给类变量或可以在其他线程中访问的实例变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EscapeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SomeClass someClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局变量赋值逃逸</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">globalVariablePointerEscape</span><span class="params">()</span> &#123;</span><br><span class="line">        someClass = <span class="keyword">new</span> <span class="title class_">SomeClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法返回值逃逸</span></span><br><span class="line">    <span class="keyword">public</span> SomeClass <span class="title function_">methodPointerEscape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SomeClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">EscapeTest</span> <span class="variable">escapeTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EscapeTest</span>();</span><br><span class="line">        <span class="type">SomeClass</span> <span class="variable">someClass</span> <span class="operator">=</span> escapeTest.methodPointerEscape();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例引用逃逸</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">instancePassPointerEscape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodPointerEscape().printClassName(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printClassName</span><span class="params">(EscapeTest escapeTest)</span> &#123;</span><br><span class="line">        System.out.println(escapeTest.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逃逸状态标记：</p>
<ul>
<li>全局级别逃逸：一个对象可能从方法或者当前线程中逃逸<ul>
<li>对象被作为方法的返回值</li>
<li>对象作为静态字段或者成员变量</li>
<li>如果重写了某个类的 finalize() 方法，那么这个类的对象都会被标记为全局逃逸状态并且一定会放在堆内存中</li>
</ul>
</li>
<li>参数级别逃逸<ul>
<li>对象被作为参数传递给一个方法，但是在这个方法之外无法访问&#x2F;对其他线程不可见</li>
</ul>
</li>
<li>无逃逸<ul>
<li>一个对象不会逃逸</li>
</ul>
</li>
</ul>
<h5 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h5><p>我们都知道 Java 的对象是在堆上分配的，而堆是对所有对象可见的。同时，JVM 需要对所分配的堆内存进行管理，并且在对象不再被引用时回收其所占据的内存。如果逃逸分析能够证明某些新建的对象不逃逸，那么 JVM 完全可以将其分配至栈上，并且在 new 语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。</p>
<p>这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。不过 Hotspot 虚拟机，并没有进行实际的栈上分配，而是使用了标量替换这一技术。所谓的标量，就是仅能存储一个值的变量，比如 Java 代码中的基本类型。与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是 Java 的对象。编译器会在方法内将未逃逸的聚合量分解成多个标量，以此来减少堆上分配</p>
<h5 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h5><p>标量：不能被进一步分解的量，如基本数据类型、对象引用<br>聚合量：可以被进一步分解的量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">example</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        addAgeAndWeight(person.age(), person.weight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过逃逸分析，person 对象未逃逸出 example() 的调用，因此可以对聚合量 person 进行分解，得到两个标量 age 和 weight，进行标量替换后的伪代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">example</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        addAgeAndWeight(age, weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="同步消除"><a href="#同步消除" class="headerlink" title="同步消除"></a>同步消除</h5><p>如果即时编译器能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没就有意义。因为线程并不能获得该锁对象。在这种情况下，即时编译器会消除对该不逃逸锁对象的加锁、解锁操作。实际上，编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。由于 Java 虚拟机即时编译的限制，上述条件被强化为证明锁对象不逃逸出当前编译的方法。不过，基于逃逸分析的锁消除实际上并不多见</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL相关命令</title>
    <url>/2021/12/19/114927.html</url>
    <content><![CDATA[<blockquote>
<p>MySQL 相关命令</p>
</blockquote>
<span id="more"></span>

<h4 id="查询指定库中的表大小"><a href="#查询指定库中的表大小" class="headerlink" title="查询指定库中的表大小"></a>查询指定库中的表大小</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    CONCAT( table_schema, <span class="string">&#x27;.&#x27;</span>, table_name ) <span class="keyword">AS</span> <span class="string">&#x27;Table Name&#x27;</span>,</span><br><span class="line">    table_rows <span class="keyword">AS</span> <span class="string">&#x27;Number of Rows&#x27;</span>,</span><br><span class="line">    CONCAT( ROUND( data_length <span class="operator">/</span>( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">4</span> ), <span class="string">&#x27;G&#x27;</span> ) <span class="keyword">AS</span> <span class="string">&#x27;Data Size&#x27;</span>,</span><br><span class="line">    CONCAT( ROUND( index_length <span class="operator">/</span>( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">4</span> ), <span class="string">&#x27;G&#x27;</span> ) <span class="keyword">AS</span> <span class="string">&#x27;Index Size&#x27;</span>,</span><br><span class="line">    CONCAT( ROUND(( data_length <span class="operator">+</span> index_length )<span class="operator">/</span>( <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> ), <span class="number">4</span> ), <span class="string">&#x27;G&#x27;</span> ) <span class="keyword">AS</span> <span class="string">&#x27;Total&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.TABLES </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    table_schema <span class="keyword">LIKE</span> <span class="string">&#x27;crm_3&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    Total <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<h4 id="返回表对应的结构"><a href="#返回表对应的结构" class="headerlink" title="返回表对应的结构"></a>返回表对应的结构</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_NAME 列名,</span><br><span class="line">    COLUMN_TYPE 数据类型,</span><br><span class="line">    COLUMN_COMMENT 备注,</span><br><span class="line">    COLUMN_DEFAULT 默认值,</span><br><span class="line">    IS_NULLABLE 是否为空 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    INFORMATION_SCHEMA.COLUMNS </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    table_schema <span class="operator">=</span> <span class="string">&#x27;crm_3&#x27;</span> </span><br><span class="line">    <span class="keyword">AND</span> table_name <span class="operator">=</span> <span class="string">&#x27;tb_user&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="用户及权限"><a href="#用户及权限" class="headerlink" title="用户及权限"></a>用户及权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">use mysql;</span><br><span class="line">create user <span class="string">&#x27;chenkaixin12121&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;admin123456&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">use mysql;</span><br><span class="line">drop user <span class="string">&#x27;chenkaixin12121&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">rename user <span class="string">&#x27;chenkaixin12121&#x27;</span>@<span class="string">&#x27;%&#x27;</span> to <span class="string">&#x27;kaixin&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;chenkaixin12121&#x27;</span>@<span class="string">&#x27;%&#x27;</span> = password(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">or</span><br><span class="line">update user <span class="built_in">set</span> password=password(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;chenkaixin12121&#x27;</span> and host=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户权限</span></span><br><span class="line">show grants;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看其他用户权限</span></span><br><span class="line">show grants <span class="keyword">for</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予权限</span></span><br><span class="line">grant privileges on database.table to <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销权限</span></span><br><span class="line">revoke privileges on database.table from <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该用户的权限授权给别的用户</span></span><br><span class="line">with grant option;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">privileges（操作权限）</th>
<th align="center">作用范围</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">all</td>
<td align="center">服务器</td>
<td align="center">所有权限</td>
</tr>
<tr>
<td align="center">select</td>
<td align="center">表、列</td>
<td align="center">查询</td>
</tr>
<tr>
<td align="center">insert</td>
<td align="center">表、列</td>
<td align="center">新增</td>
</tr>
<tr>
<td align="center">update</td>
<td align="center">表、列</td>
<td align="center">更新</td>
</tr>
<tr>
<td align="center">delete</td>
<td align="center">表</td>
<td align="center">删除</td>
</tr>
<tr>
<td align="center">create</td>
<td align="center">数据库、表、索引</td>
<td align="center">创建</td>
</tr>
<tr>
<td align="center">drop</td>
<td align="center">数据库、表、视图</td>
<td align="center">删除</td>
</tr>
<tr>
<td align="center">reload</td>
<td align="center">服务器</td>
<td align="center">可以使用 flush 命令</td>
</tr>
<tr>
<td align="center">shutdown</td>
<td align="center">服务器</td>
<td align="center">关闭 mysql 服务</td>
</tr>
<tr>
<td align="center">process</td>
<td align="center">服务器</td>
<td align="center">查看线程信息</td>
</tr>
<tr>
<td align="center">file</td>
<td align="center">服务器</td>
<td align="center">文件操作</td>
</tr>
<tr>
<td align="center">grant option</td>
<td align="center">数据库、表、存储过程</td>
<td align="center">授权</td>
</tr>
<tr>
<td align="center">references</td>
<td align="center">数据库、表</td>
<td align="center">可以建立外键关系</td>
</tr>
<tr>
<td align="center">index</td>
<td align="center">表</td>
<td align="center">创建及删除索引</td>
</tr>
<tr>
<td align="center">alter</td>
<td align="center">表</td>
<td align="center">修改表结构</td>
</tr>
<tr>
<td align="center">show databases</td>
<td align="center">服务器</td>
<td align="center">列出所有数据库名称</td>
</tr>
<tr>
<td align="center">super</td>
<td align="center">服务器</td>
<td align="center">超级权限</td>
</tr>
<tr>
<td align="center">create temporary tables</td>
<td align="center">表</td>
<td align="center">创建临时表</td>
</tr>
<tr>
<td align="center">lock tables</td>
<td align="center">数据库</td>
<td align="center">锁表</td>
</tr>
<tr>
<td align="center">execute</td>
<td align="center">存储过程</td>
<td align="center">执行</td>
</tr>
<tr>
<td align="center">replication client</td>
<td align="center">服务器</td>
<td align="center">查看主从的二进制日志状态</td>
</tr>
<tr>
<td align="center">replication slave</td>
<td align="center">服务器</td>
<td align="center">主从复制</td>
</tr>
<tr>
<td align="center">create view</td>
<td align="center">视图</td>
<td align="center">创建</td>
</tr>
<tr>
<td align="center">show view</td>
<td align="center">视图</td>
<td align="center">查看</td>
</tr>
<tr>
<td align="center">create routine</td>
<td align="center">存储过程</td>
<td align="center">创建</td>
</tr>
<tr>
<td align="center">alter routine</td>
<td align="center">存储过程</td>
<td align="center">修改及删除</td>
</tr>
<tr>
<td align="center">create user</td>
<td align="center">服务器</td>
<td align="center">创建用户</td>
</tr>
<tr>
<td align="center">event</td>
<td align="center">数据库</td>
<td align="center">新增、更新、删除、查询事件</td>
</tr>
<tr>
<td align="center">trigger</td>
<td align="center">表</td>
<td align="center">触发器相关</td>
</tr>
<tr>
<td align="center">create tablespace</td>
<td align="center">服务器</td>
<td align="center">新增、更新、删除表空间及日志文件</td>
</tr>
<tr>
<td align="center">proxy</td>
<td align="center">服务器</td>
<td align="center">代理成为其它用户</td>
</tr>
<tr>
<td align="center">usage</td>
<td align="center">服务器</td>
<td align="center">没有权限</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Synchronized案例</title>
    <url>/2021/12/19/134111.html</url>
    <content><![CDATA[<blockquote>
<p>Synchronized 案例</p>
</blockquote>
<span id="more"></span>

<h4 id="两个普通同步方法，先打印邮件还是短信"><a href="#两个普通同步方法，先打印邮件还是短信" class="headerlink" title="两个普通同步方法，先打印邮件还是短信"></a>两个普通同步方法，先打印邮件还是短信</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::sendEmail, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::sendSMS, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先打印邮件，因为一个对象里面如果有多个 synchronized 方法，某一个时刻内，只要一个线程去调用其中的一个 synchronized 方法，其它的线程都只能等待，换句话说，某一个时刻内，只能有唯一的一个线程去访问这些 synchronized 方法，锁的是当前对象 this，被锁定后，其它的线程都不能进入到当前对象的其它的 synchronized 方法</p>
<h4 id="sendEmail-方法暂停-3-秒钟，先打印邮件还是短信"><a href="#sendEmail-方法暂停-3-秒钟，先打印邮件还是短信" class="headerlink" title="sendEmail 方法暂停 3 秒钟，先打印邮件还是短信"></a>sendEmail 方法暂停 3 秒钟，先打印邮件还是短信</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::sendEmail, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::sendSMS, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先打印邮件，同上，而且 sleep 不会释放锁</p>
<h4 id="新增一个普通的方法-hello，先打印邮件还是短信"><a href="#新增一个普通的方法-hello，先打印邮件还是短信" class="headerlink" title="新增一个普通的方法 hello，先打印邮件还是短信"></a>新增一个普通的方法 hello，先打印邮件还是短信</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::sendEmail, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::hello, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先打印短信，调用普通方法与同步锁无关</p>
<h4 id="两个对象，先打印邮件还是信息"><a href="#两个对象，先打印邮件还是信息" class="headerlink" title="两个对象，先打印邮件还是信息"></a>两个对象，先打印邮件还是信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::sendEmail, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone2::sendSMS, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先打印短信，因为是两个对象，使用的不是同一把锁</p>
<h4 id="同一个对象，两个静态同步方法，先打印邮件还是短信"><a href="#同一个对象，两个静态同步方法，先打印邮件还是短信" class="headerlink" title="同一个对象，两个静态同步方法，先打印邮件还是短信"></a>同一个对象，两个静态同步方法，先打印邮件还是短信</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(Phone::sendEmail, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(Phone::sendSMS, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先打印邮件，因为是类锁，锁的是当前类的 Class 对象</p>
<h4 id="不同的对象，两个静态同步方法，先打印邮件还是短信"><a href="#不同的对象，两个静态同步方法，先打印邮件还是短信" class="headerlink" title="不同的对象，两个静态同步方法，先打印邮件还是短信"></a>不同的对象，两个静态同步方法，先打印邮件还是短信</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(Phone::sendEmail, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(Phone::sendSMS, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先打印邮件，同上</p>
<h4 id="一个静态同步方法，一个普通同步方法，先打印邮件还是短信"><a href="#一个静态同步方法，一个普通同步方法，先打印邮件还是短信" class="headerlink" title="一个静态同步方法，一个普通同步方法，先打印邮件还是短信"></a>一个静态同步方法，一个普通同步方法，先打印邮件还是短信</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(Phone::sendEmail, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone::sendSMS, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先打印短信，因为这两把锁是不同的对象，普通同步方法锁的是实例对象 this，静态同步方法锁的是唯一模板 Class，所以静态同步方法与普通同步方法之间是不会有竞态条件的</p>
<h4 id="两个对象，一个静态同步方法，一个普通同步方法，先打印邮件还是短信"><a href="#两个对象，一个静态同步方法，一个普通同步方法，先打印邮件还是短信" class="headerlink" title="两个对象，一个静态同步方法，一个普通同步方法，先打印邮件还是短信"></a>两个对象，一个静态同步方法，一个普通同步方法，先打印邮件还是短信</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSMS</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(Phone::sendEmail, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(phone2::sendSMS, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先打印短信，同上</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程中断与等待唤醒机制</title>
    <url>/2021/12/19/184202.html</url>
    <content><![CDATA[<blockquote>
<p>线程中断与等待唤醒机制</p>
</blockquote>
<span id="more"></span>

<h4 id="什么是中断"><a href="#什么是中断" class="headerlink" title="什么是中断"></a>什么是中断</h4><p>首先，一个线程不应该由其他线程来强制中断或停止，而是应该由线程自己自行停止，所以 Thread.stop、Thread.suspend、Thread.resume 都已经被废弃了<br>其次在 java 中没有办法立即停止一条线程，然而停止线程却显得尤为重要，如取消一个耗时操作，因此 java 提供了一种用于停止线程的机制-中断<br>中断只是一种协作机制，java 没有给中断增加任何语法，中断的过程完全需要自己实现<br>若要中断一个线程，需要手动调用该线程的 interrupt 方法，该方法也仅仅是将线程对象的中断标识设成 true，接着需要写代码不断地检测当前线程的标识位，如果为 true，表示别的线程要求这条线程中断，此时究竟该做什么，需要你自己写代码实现<br>每个线程对象中都有一个标识，用于表示线程是否被中断，该标识位为 true 表示中断，为 false 表示未中断，通过调用线程对象的 interrupt 方法将该线程的标识位设为 true，可以在别的线程中调用，也可以在自己的线程中调用</p>
<h4 id="如何停止、中断一个运行中的线程"><a href="#如何停止、中断一个运行中的线程" class="headerlink" title="如何停止、中断一个运行中的线程"></a>如何停止、中断一个运行中的线程</h4><h5 id="使用-volatile"><a href="#使用-volatile" class="headerlink" title="使用 volatile"></a>使用 volatile</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">isStop</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isStop) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;isStop = true，程序结束。&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello isStop&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            isStop = <span class="literal">true</span>;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用-atomic"><a href="#使用-atomic" class="headerlink" title="使用 atomic"></a>使用 atomic</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicBoolean</span> <span class="variable">atomicBoolean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (atomicBoolean.get()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;atomicBoolean = true，程序结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello atomic&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            atomicBoolean.set(<span class="literal">true</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用-interrupt"><a href="#使用-interrupt" class="headerlink" title="使用 interrupt"></a>使用 interrupt</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;isInterrupted = true，程序结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello interrupt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 修改 t1 线程的中断标志位为 true</span></span><br><span class="line">            t1.interrupt();</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="中断方法介绍及说明"><a href="#中断方法介绍及说明" class="headerlink" title="中断方法介绍及说明"></a>中断方法介绍及说明</h4><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">void interrupt()</td>
<td align="center">设置线程的中断标志为 true，不会停止线程</td>
</tr>
<tr>
<td align="center">static boolean interrupted()</td>
<td align="center">判断线程是否被中断，并清除当前中断状态，这个方法做了两件事，1返回当前线程的中断状态，2将当前线程的中断状态设置为 false</td>
</tr>
<tr>
<td align="center">boolean isInterrupted()</td>
<td align="center">通过检查中断标志位判断当前线程是否被中断，它与 interrupted 都是调用了 native boolean isInterrupted(boolean ClearInterrupted)，只不过它传入了 false，interrupted 传入了 true</td>
</tr>
</tbody></table>
<p>具体的来说，当对一个线程调用 interrupt() 时：</p>
<ul>
<li>如果线程处于正常活动状态，那么会将该线程的中断标志设置为 true，仅此而已，被设置中断标志的线程将继续正常运行不受影响，所以 interrupt 并不能真正的中断线程，需要被调用的线程自己进行配合才行</li>
<li>如果线程处于被阻塞状态（例如处于 sleep、wait、join 等状态) ，在别的线程中调用当前线程对象的 interrpt 方法，那么线程将立即退出被阻塞状态，并抛出一个 InterruptedException 异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;isInterrupted = true，程序结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// 抛出异常后，中断标识也被清空置为 false，会导致死循环无法停下，所以需要再次调用 interrupt() 将中断标志设置为 true</span></span><br><span class="line">                    <span class="comment">// Thread.currentThread().interrupt();</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello Interrupt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 修改 t1 线程的中断标志位为 true</span></span><br><span class="line">            t1.interrupt();</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="等待唤醒方法"><a href="#等待唤醒方法" class="headerlink" title="等待唤醒方法"></a>等待唤醒方法</h4><h5 id="Object-的-wait-和-notify"><a href="#Object-的-wait-和-notify" class="headerlink" title="Object 的 wait 和 notify"></a>Object 的 wait 和 notify</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">objectLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;启动&quot;</span>);</span><br><span class="line">                    objectLock.wait();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被唤醒&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                objectLock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;通知了&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>wait 和 notify 方法必须要在同步块或者方法里面，且成对出现使用<br>先 wait 后 notify 才能正常使用</p>
</blockquote>
<h5 id="Condition-的-await-和-signal"><a href="#Condition-的-await-和-signal" class="headerlink" title="Condition 的 await 和 signal"></a>Condition 的 await 和 signal</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;启动&quot;</span>);</span><br><span class="line">                condition.await();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                condition.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;通知了&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Condtion 中的线程等待和唤醒方法之前，需要先获取锁<br>先 await 后 signal 才能使用</p>
</blockquote>
<h5 id="LockSupport-的-park-和-unpark"><a href="#LockSupport-的-park-和-unpark" class="headerlink" title="LockSupport 的 park 和 unpark"></a>LockSupport 的 park 和 unpark</h5><p>LockSupport 是用来创建锁和其他同步类的基本线程阻塞原语<br>LockSupport 使用了一种名为 Permit（许可）的概念来做到阻塞和唤醒线程的功能，每个线程都有一个 permit，permit 只有两个值 1 和 0，默认 0<br>可以把许可看成是一种（0，1）信号量（Semaphore），但与 Semaphore 不同的是，许可的累加上限是 1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSupportDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;启动&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被唤醒&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;通知了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>park 和 unpark 没有先后顺序，但必须成对出现</p>
</blockquote>
<h6 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h6><p>调用 LockSupport.park() 时</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">public static void park() &#123;</span><br><span class="line">    UNSAFE.park(false, 0L);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>permit 默认是 0，所以一开始调用 park 方法，当前线程就会阻塞，直到别的线程将当前线程的 permit 设置为 1 时，park 方法会被唤醒，<br>然后会将 permit 再次设置为 0 并返回</p>
<h6 id="唤醒"><a href="#唤醒" class="headerlink" title="唤醒"></a>唤醒</h6><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">public static void unpark(Thread thread) &#123;</span><br><span class="line">    if (thread != null)</span><br><span class="line">        UNSAFE.unpark(thread);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>调用 unpark(thread) 方法后，就会将 thread 线程的许可 permit 设置成 1（注意多次调用 unpark 方法，不会累加，permit 值还是 1）会自动唤醒 thread 线程，即之前阻塞中的 LockSupport.park() 方法会立即返回</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter使用</title>
    <url>/2021/12/20/163910.html</url>
    <content><![CDATA[<blockquote>
<p>Jmeter 使用</p>
</blockquote>
<span id="more"></span>

<h4 id="设置用户变量"><a href="#设置用户变量" class="headerlink" title="设置用户变量"></a>设置用户变量</h4><p>添加 -&gt; 前置处理器 -&gt; 用户参数</p>
<p>使用用户变量 ${customParam}</p>
<h4 id="随机切换用户变量"><a href="#随机切换用户变量" class="headerlink" title="随机切换用户变量"></a>随机切换用户变量</h4><ol>
<li>定义两个用户变量，名称为 cn 和 us</li>
<li>使用函数 ${__RandomFromMultipleVars(cn|us)} 进行随机切换</li>
</ol>
<blockquote>
<p>使用更多函数，工具 -&gt; 函数助手对话框</p>
</blockquote>
<h4 id="顺序执行多请求"><a href="#顺序执行多请求" class="headerlink" title="顺序执行多请求"></a>顺序执行多请求</h4><ol>
<li>添加 -&gt; 定时器 -&gt; 同步定时器</li>
<li>将定时器中“模拟用户组的数量”设置与线程数一致即可</li>
</ol>
<h4 id="文件写入数据"><a href="#文件写入数据" class="headerlink" title="文件写入数据"></a>文件写入数据</h4><p>接口返回数据如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;OK&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span><span class="string">&quot;eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIxNjg5MTkxNDc1MTYyMDQ2NDY3IiwibmJmIjoxNjkxNTY5NjA2LCJ0b2tlbkRhdGEiOiJleit1bmlZTVhHZU1SMTVvbGd4TlVwc01namdrMndWQll4enBFZVk0Y0RjN1ZoQUFUbGJXK1wvVXZhcmZieTM3S2VxaWJQbnFnMXcra1NsVEVRQ1JpRkRVbStEU1lKTVpaaW1Nb3E0am02TVorM3c0akJYV1BBTERnb0doSnUyWXgiLCJpc3MiOiJDcmVlayBXZWFyYWJsZSIsImV4cCI6MTY5MTU3NjgwNiwiaWF0IjoxNjkxNTY5NjA2LCJqdGkiOiIxNjg5MTkxNDc1MTYyMDQ2NDY3In0.HMQpFh0bNQyglC2yOELbk9bPVzLzfOLbtxS1okoH_jNN-_AxR3zZ9ODX9iO2DWuVVqg39hCI3QTKWz3haD9rwRhzHgDQfTRbLyRN4ANyYnFAhgTIikzVCM3tbkuVRpQnAfNv6hwDHxvu7kkmhTQzfegezBHJateR1tR90Zwve2UG0VLoeO0r4YV4Ym1jVpoh6NCyCYqsF12c1E19VqeHJZd6HYeQ0WTk6HKm1PcizlNq8kL_ldeLeU7OQ1RzkVLZ_dvWKWrXAAMiPtsNu7NYvyUwq-9Trp1f9jRI3lP8yFvL0Xp6p0guMEbYMBCuziDerWF-p167AWdjX9oxuBPTPA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;refreshToken&quot;</span><span class="punctuation">:</span><span class="string">&quot;eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIxNjg5MTkxNDc1MTYyMDQ2NDY3IiwibmJmIjoxNjkxNTY5NjA2LCJ0b2tlbkRhdGEiOiJleit1bmlZTVhHZU1SMTVvbGd4TlVwc01namdrMndWQll4enBFZVk0Y0RjN1ZoQUFUbGJXK1wvVXZhcmZieTM3S2VxaWJQbnFnMXcra1NsVEVRQ1JpRkRVbStEU1lKTVpaaW1Nb3E0am02TVorM3c0akJYV1BBTERnb0doSnUyWXgiLCJpc3MiOiJDcmVlayBXZWFyYWJsZSIsImV4cCI6MTY5Mjg2NTYwNiwiaWF0IjoxNjkxNTY5NjA2LCJqdGkiOiIxNjg5MTkxNDc1MTYyMDQ2NDY3In0.L1YME9gpBstLlUeKIaOjYoFHMzReep7Zeuu79Y5XURP1X8PT_8lFiC-d78ArwAAGtJfa7NWjtvEkER2k7FmjiSv43Kc59bpbLNqySHVJaNwcryX2fbH8m-VgQnXRz7elb0cguS3YCMvryMUoHlloWoSzqTCZIvyV6wJcYoZDBKRUdnnJqFDYBU0n6eGe104oMcETjoeQN1gT62qA-8q29sGjy-IhfuzkYjoYphJQlAsH25ST4TRQF_2hGmTG3cOg2RRME3SyueDCQkWtuowzuI0hR_4tzhYfFTPHOcUkeqiLO3IiIfhU7p9ekIG8ZuL_jxYrNf8xEEn9ZYPPwJDjOA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;countryCode&quot;</span><span class="punctuation">:</span><span class="string">&quot;CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://192.168.40.113:9501&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;openId&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在指定请求中添加 -&gt; 后置处理器 -&gt; JSON提取器，配置如下</li>
</ol>
<p><img data-src="/../../../../upload/2023/08/json%E6%8F%90%E5%8F%96%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="image.png"></p>
<ol start="2">
<li>选择添加 -&gt; 后置处理器 -&gt; JSR223 后置处理程序，脚本如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;文件地址&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">parentDir</span> <span class="operator">=</span> file.getParentFile();</span><br><span class="line"><span class="keyword">if</span> (!parentDir.exists()) &#123;</span><br><span class="line">  parentDir.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file, <span class="literal">true</span>);</span><br><span class="line">   <span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fileWriter);) &#123;</span><br><span class="line">  out.write(vars.get(<span class="string">&quot;token_1&quot;</span>) + <span class="string">&quot;,&quot;</span> + vars.get(<span class="string">&quot;refreshToken_1&quot;</span>) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="读取文件数据"><a href="#读取文件数据" class="headerlink" title="读取文件数据"></a>读取文件数据</h4><p>文件中内容如下，以,分隔</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">abc,123</span><br><span class="line">cde,235</span><br></pre></td></tr></table></figure>

<p>使用函数 ${__CSVRead(“文件地址”,0)} 读取第一列数据</p>
<h4 id="每秒事务数-插件使用"><a href="#每秒事务数-插件使用" class="headerlink" title="每秒事务数-插件使用"></a>每秒事务数-插件使用</h4><ol>
<li>下载 <a href="https://jmeter-plugins.org/install/Install">插件管理器</a>，将 jar 包放到 lib&#x2F;ext 目录中并重启</li>
<li>在选项 -&gt; 插件管理器中找到 jpgc - Standard Set 应用并重启 </li>
<li>添加 -&gt; 监听器 -&gt; jp@gc - Transactions per Second</li>
</ol>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>Volatile与内存屏障</title>
    <url>/2021/12/20/235236.html</url>
    <content><![CDATA[<blockquote>
<p>Volatile 与内存屏障</p>
</blockquote>
<span id="more"></span>

<h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><h5 id="volatile-的内存语义"><a href="#volatile-的内存语义" class="headerlink" title="volatile 的内存语义"></a>volatile 的内存语义</h5><ul>
<li>当写一个 volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量值立即刷新回主内存中</li>
<li>当读一个 volatile 变量时，JMM 会把该线程对应的本地内存设置为无效，直接从主内存中读取共享变量</li>
</ul>
<p>所以 volatile 的写内存语义是直接刷新到主内存中，读的内存语义是直接从主内存中读取</p>
<h5 id="volatile-特性"><a href="#volatile-特性" class="headerlink" title="volatile 特性"></a>volatile 特性</h5><h6 id="保证可见性"><a href="#保证可见性" class="headerlink" title="保证可见性"></a>保证可见性</h6><p>保证不同线程对这个变量进行操作时的可见性，即变量一旦改变所有线程立即可见</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileSeeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;       <span class="comment">// 不加 volatile，没有可见性</span></span><br><span class="line"><span class="comment">//    static volatile boolean flag = true;       // 加了 volatile，保证可见性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：come in&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：flag 被修改为 false，退出.....&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程 t1 中为何看不到被主线程修改为 false 的 flag 的值</p>
<ul>
<li>主线程修改了 flag 之后没有将其刷新到主内存，所以 t1 线程看不到</li>
<li>主线程将 flag 刷新到了主内存，但是 t1 一直读取的是自己工作内存中 flag 的值，没有去主内存中更新获取 flag 最新的值</li>
</ul>
<h6 id="没有原子性"><a href="#没有原子性" class="headerlink" title="没有原子性"></a>没有原子性</h6><p>volatile 变量的复合操作（如 i++）不具有原子性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileNoAtomicDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPlusPlus</span><span class="params">()</span> &#123;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">VolatileNoAtomicDemo</span> <span class="variable">volatileNoAtomicDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileNoAtomicDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    volatileNoAtomicDemo.addPlusPlus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + volatileNoAtomicDemo.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-20_23-35-21-42309a29f422473a95e6dadaac528880.png" alt="image.png"></p>
<p>原子性指的是一个操作是不可中断的，即使是在多线程环境下，一个操作一旦开始就不会被其他线程影响</p>
<p>如果第二个线程在第一个线程读取旧值和写回新值期间读取 number 的值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的加 1 操作，这也就造成了线程安全失败，因此对于 addPlusPlus 方法必须使用 synchronized 修饰，以便保证线程安全</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-22_23-36-12-7a34a02a266942ac9f4c25889e70fa3f.png" alt="image.png"></p>
<p>多线程环境下，“数据计算”和“数据赋值”操作可能多次出现，即操作非原子，若数据在加载之后，主内存 count 变量发生修改，由于线程工作内存中的值在此前已经加载，从而不会对变更操作做出相应变化，即私有内存和公共内存中变量不同步，进而导致数据不一致<br>对于 volatile 变量，JVM 只是保证从主内存加载到线程工作内存的值是最新的，也就是数据加载时是最新的<br>由此可见 volatile 解决的是变量读时的可见性问题，但无法保证原子性，对于多线程修改共享变量的场景必须使用加锁同步</p>
<p>既然一修改就是可见，为什么还不能保证原子性，volatile 主要是对其中部分指令做了处理：</p>
<ul>
<li>要 use 一个变量的时候必须 load，要载入的时候必须从主内存 read 这样就解决了读的可见性</li>
<li>写操作是把 assign 和 store 做了关联（在 assign 后必须 store，store 后 write)，也就是做到了给一个变量赋值的时候一串关联指令直接把变量值写到主内存</li>
</ul>
<p>就这样通过用的时候直接从主内存取，在赋值到直接写回主内存做到了内存可见性</p>
<h6 id="指令禁重排"><a href="#指令禁重排" class="headerlink" title="指令禁重排"></a>指令禁重排</h6><p>重排序是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段，有时候会改变程序语句的先后顺序，不存在数据依赖关系，可以重排序，存在数据依赖关系，禁止重排序，但重排后的指令绝对不能改变原有的串行语义，这点在并发设计中必须要重点考虑</p>
<p> 编译器和处理器在重排序时，会遵守数据依赖性，不会改变存在依赖关系的两个操作的执行,但不同处理器和不同线程之间的数据性不会被编译器和处理器考虑，其只会作用于单处理器和单线程环境，下面三种情况，只要重排序两个操作的执行顺序，程序的执行结果就会被改变</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">示例</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">写后读</td>
<td align="center">a&#x3D;1;<br>b&#x3D;a;</td>
<td align="center">写一个变量之后，再读这个位置</td>
</tr>
<tr>
<td align="center">写后写</td>
<td align="center">a&#x3D;1;<br>a&#x3D;2;</td>
<td align="center">写一个变量之后，再写这个变量</td>
</tr>
<tr>
<td align="center">读后写</td>
<td align="center">a&#x3D;b;<br>b&#x3D;1;</td>
<td align="center">读一个变量之后，再写这个变量</td>
</tr>
</tbody></table>
<p>有关禁止指令重排的行为</p>
<table>
<thead>
<tr>
<th align="center">第一个操作</th>
<th align="center">第二个操作：普通读写</th>
<th align="center">第二个操作：volatitle读</th>
<th align="center">第二个操作：volatile写</th>
</tr>
</thead>
<tbody><tr>
<td align="center">普通读写</td>
<td align="center">可以重排</td>
<td align="center">可以重排</td>
<td align="center">不可以重排</td>
</tr>
<tr>
<td align="center">volatile读</td>
<td align="center">不可以重排</td>
<td align="center">不可以重排</td>
<td align="center">不可以重排</td>
</tr>
<tr>
<td align="center">volatile写</td>
<td align="center">可以重排</td>
<td align="center">不可以重排</td>
<td align="center">不可以重排</td>
</tr>
</tbody></table>
<br>

<ul>
<li>当第一个操作为 volatile 读时，不论第二个操作是什么，都不能重排序，这个操作保证了 volatile 读之后的操作不会被重排到 volatile 读之前</li>
<li>当第二个操作为 volatile 写时，不论第一个操作是什么，都不能重排序，这个操作保证了 volatile 写之前的操作不会被重排到 volatile 写之后</li>
<li>当第一个操作为 volatile 写时，第二个操作为 volatile 读时，不能重排</li>
</ul>
<h5 id="volatile-读写过程"><a href="#volatile-读写过程" class="headerlink" title="volatile 读写过程"></a>volatile 读写过程</h5><p>lock(锁定)→read(读取)→load(加载)→use(使用)→assign(赋值)→store(存储)→write(写入)→unlock(解锁)</p>
<p><img data-src="/../../../../upload/2021/12/image-f451a17a304f4467bc4d3d775caffc99.png" alt="image.png"></p>
<ul>
<li>read: 作用于主内存，将变量的值从主内存传输到工作内存，主内存到工作内存</li>
<li>load: 作用于工作内存，将 read 从主内存传输的变量值放入工作内存变量副本中，即数据加载</li>
<li>use: 作用于工作内存，将工作内存变量副本的值传递给执行引擎，每当 JVM 遇到需要该变量的字节码指令时会执行该操作</li>
<li>assign: 作用于工作内存，将从执行引擎接收到的值赋值给工作内存变量，每当 JVM 遇到一个给变量赋值字节码指令时会执行该操作</li>
<li>store: 作用于工作内存，将赋值完毕的工作变量的值写回给主内存</li>
<li>write: 作用于主内存，将 store 传输过来的变量值赋值给主内存中的变量，由于上述只能保证单条指令的原子性，针对多条指令的组合性原子保证，没有大面积加锁，所以 JVM 提供了另外两个原子指令：</li>
<li>lock: 作用于主内存，将一个变量标记为一个线程独占的状态，只是写时候加锁，就只是锁了写变量的过程</li>
<li>unlock: 作用于主内存，把一个处于锁定状态的变量释放，然后才能被其他线程占用</li>
</ul>
<h4 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h4><p>是一种屏障指令，它使得 CPU 或编译器对屏障指令的前后所发出的内存操作执行一个排序的约束，也叫内存栅栏或栅栏指令</p>
<h5 id="内存屏障的作用"><a href="#内存屏障的作用" class="headerlink" title="内存屏障的作用"></a>内存屏障的作用</h5><ul>
<li>阻止屏障两边的指令重排序</li>
<li>写数据时加入屏障，强制将线程私有工作内存的数据刷回主物理内存</li>
<li>读数据时加入屏障，线程私有工作内存的数据失效，重新到主物理内存中获取最新数据</li>
</ul>
<h5 id="内存屏障四大指令"><a href="#内存屏障四大指令" class="headerlink" title="内存屏障四大指令"></a>内存屏障四大指令</h5><ul>
<li>在每一个 volatile 写操作前面插入一个 StoreStore 屏障<ul>
<li>StoreStore 屏障可以保证在 volatile 写之前，其前面的所有普通写操作都已经刷新到主内存中</li>
</ul>
</li>
<li>在每一个 volatile 写操作后面插入一个 StoreLoad 屏障<ul>
<li>StoreLoad 屏障的作用是避免 volatile 写与后面可能有的 volatile 读&#x2F;写操作重排序</li>
</ul>
</li>
<li>在每一个 volatile 读操作后面插入一个 LoadLoad 屏障<ul>
<li>LoadLoad 屏障用来禁止处理器把上面的 volatile 读与下面的普通读重排序</li>
</ul>
</li>
<li>在每一个 volatile 读操作后面插入一个 LoadStore 屏障<ul>
<li>LoadStore 屏障用来禁止处理器把上面的 volatile 读与下面的普通写重排序</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">屏障类型</th>
<th align="center">指令示例</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">LoadLoad</td>
<td align="center">Load1;LoadLoad;Load2</td>
<td align="center">保证 Load1 的读取操作在 Load2 及后续读取操作之前执行</td>
</tr>
<tr>
<td align="center">StoreStore</td>
<td align="center">Store1;StoreStore;Store2</td>
<td align="center">在 Store2 及其后的写操作执行前，保证 Store1 的写操作已刷新到主内存</td>
</tr>
<tr>
<td align="center">LoadStore</td>
<td align="center">Load1;LoadStore;Store2</td>
<td align="center">在 Stroe2 及其后的写操作执行前，保证 Load1 的读操作已读取结束</td>
</tr>
<tr>
<td align="center">StoreLoad</td>
<td align="center">Store1;StoreLoad;Load2</td>
<td align="center">保证 Store1 的写操作已刷新到主内存之后，Load2 及其后的读操作才能执行</td>
</tr>
</tbody></table>
<h5 id="与-volatile-的关系"><a href="#与-volatile-的关系" class="headerlink" title="与 volatile 的关系"></a>与 volatile 的关系</h5><p>对字段使用 volatile 修饰后，会在字节码文件中添加一个 Field（flags: ACC_VOLATILE），JVM 在把字节码生成为机器码的时候，发现操作是 volatile 的变量的话，就会根据 JMM 要求，在相应的位置去插入内存屏障指令</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境下安装RabbitMQ</title>
    <url>/2021/12/20/164242.html</url>
    <content><![CDATA[<blockquote>
<p>Windows 环境下安装 RabbitMQ</p>
</blockquote>
<span id="more"></span>

<h4 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h4><ol>
<li>下载：<a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a></li>
<li>配置环境变量</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ERLANG_HOME=D:\erl-123</span><br><span class="line">PATH=%ERLANG_HOME%\bin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试，cmd 输入 erl -version</li>
</ol>
<h4 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h4><ol>
<li>下载：<a href="https://github.com/rabbitmq/rabbitmq-server/releases">https://github.com/rabbitmq/rabbitmq-server/releases</a></li>
<li>配置环境变量</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">RABBITMQ_SERVER=D:\RabbitMQ Server\rabbitmq_server-123</span><br><span class="line">PATH=%RABBITMQ_SERVER%\sbin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装可视化插件</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试，ip:15672，用户名和密码都是 guest</li>
</ol>
<h4 id="配置延时队列插件"><a href="#配置延时队列插件" class="headerlink" title="配置延时队列插件"></a>配置延时队列插件</h4><ol>
<li>下载：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases</a></li>
<li>将 jar 包放到 plugin 目录后执行命令<br>  rabbitmq-plugins enable rabbitmq_delayed_message_exchange</li>
</ol>
]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS与原子操作类</title>
    <url>/2021/12/25/230138.html</url>
    <content><![CDATA[<blockquote>
<p>CAS 与原子操作类</p>
</blockquote>
<span id="more"></span>

<h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>CAS（Compare And Swap）是一条 CPU 并发原语，它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的<br>是实现并发算法时常用到的一种技术，包含三个操作数（内存位置、预期原值及更新值），执行 CAS 操作的时候，将内存位置的值与预期原值比较，如果相匹配，那么处理器会自动将该位置值更新为新值，如果不匹配，处理器不做任何操作，多个线程同时执行 CAS 操作只有一个会成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">5</span>);</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">6</span>) + <span class="string">&quot;-&quot;</span> + atomicInteger.get());</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">7</span>) + <span class="string">&quot;-&quot;</span> + atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>CAS 有 3 个操作数，位置内存值 V，旧的预期值 A，要修改的更新值 B，当且仅当旧的预期值 A 和内存值 V 相同时，将内存值 V 修改为 B，否则什么都不做或重来</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-25_22-49-33-33ba25cf30e145ceaed17e1354805f59.png" alt="image.png"></p>
<h5 id="硬件级别保证"><a href="#硬件级别保证" class="headerlink" title="硬件级别保证"></a>硬件级别保证</h5><p>CAS 是 JDK 提供的非阻塞原子性操作，它通过硬件保证了比较-更新的原子性，它是非阻塞的且自身原子性，也就是说它效率更高且通过硬件保证，说明更可靠</p>
<p>CAS 是一条 CPU 的原子指令（cmpxchg 指令），不会造成所谓的数据不一致问题，Unsafe 提供的 CAS 方法（如 compareAndSwapXXX）底层实现即为 CPU 指令 cmpxchg，执行 cmpxchg 指令的时候，会判断当前系统是否为多核系统，如果是就给总线加锁，只有一个线程会对总线加锁成功，加锁成功之后会执行 CAS 操作，也就是说 CAS 的原子性实际上是 CPU 实现的， 其实在这一点上还是有排他锁的，只是比起用 synchronized，这里的排他时间要短的多，所以在多线程情况下性能会比较好</p>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>自旋带来的 CPU 开销</li>
<li>ABA 问题</li>
</ul>
<h6 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h6><p>CAS 算法实现一个重要前提需要取出内存中某时刻的数据并在当下时刻比较并替换，那么在这个时间差类会导致数据的变化，比如说一个线程 1 从内存位置 V 中取出 A，这时候另一个线程 2 也从内存中取出 A，并且线程 2 进行了一些操作将值变成了 B，然后线程 2 又将 V 位置的数据变成 A，这时候线程 1 进行 CAS 操作发现内存中仍然是 A，然后线程 1 操作成功，尽管线程 1 的 CAS 操作成功，但是不代表这个过程就是没有问题的</p>
<p>如何解决</p>
<ul>
<li>版本号：AtomicStampedReference</li>
<li>时间戳：AtomicMarkableReference</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">AtomicStampedReference</span> <span class="variable">atomicStampedReference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 首次版本号:&quot;</span> + stamp); <span class="comment">// 1</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            atomicStampedReference.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 2次版本号:&quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line">            atomicStampedReference.compareAndSet(<span class="number">101</span>, <span class="number">100</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 3次版本号:&quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line">        &#125;, <span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 首次版本号:&quot;</span> + stamp); <span class="comment">// 1</span></span><br><span class="line">            <span class="comment">// 暂停一会儿线程，获得初始值 100 和初始版本号 1，故意暂停 3 秒钟让 t3 线程完成一次 ABA 操作产生问题</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> atomicStampedReference.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + result + <span class="string">&quot;\t&quot;</span> + atomicStampedReference.getReference());</span><br><span class="line">        &#125;, <span class="string">&quot;t4&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="UnSafe"><a href="#UnSafe" class="headerlink" title="UnSafe"></a>UnSafe</h5><p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-25_22-58-37-171d5ff2abbf4fea9c61872e8c43b692.png" alt="image.png"></p>
<blockquote>
<p>valueOffset：表示该变量值在内存中的偏移地址，因为 Unsafe 就是根据内存偏移地址获取数据的<br>value：用 volatile 修饰，保证了多线程之间的内存可见性<br>AtomicInteger 类主要利用 CAS + volatile + native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升</p>
</blockquote>
<p>它是 CAS 的核心类，由于 Java 方法无法直接访问底层系统，需要通过本地（native）方法来访问，Unsafe 相当于一个后门，基于该类可以直接操作特定内存的数据，Unsafe 类存在于 sun.misc 包中，其内部方法操作可以像 C 的指针一样直接操作内存，因为 Java 中 CAS 操作的执行依赖于 Unsafe 类的方法<br>注意 Unsafe 类中的所有方法都是 native 修饰的，也就是说 Unsafe 类中的方法都直接调用操作系统底层资源执行相应任务</p>
<p>CAS 并发原语体现在 JAVA 语言中就是 sun.misc.Unsafe 类中的各个方法，调用 UnSafe 类中的 CAS 方法，JVM 会帮我们实现出 CAS 汇编指令，这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于 CAS 是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说 CAS 是一条 CPU 的原子指令，不会造成所谓的数据不一致问题</p>
<h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h5><p>是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，当线程发现锁被占用时，会不断循环判断锁的状态，直到获取，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗 CPU</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-25_23-26-20-2f722244b4114abdbe8569ba8d8c8b46.png" alt="image.png"></p>
<h6 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span>  &#123;</span><br><span class="line">    </span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t come in&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="literal">null</span>, thread)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myUnLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        atomicReference.compareAndSet(thread, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t myUnLock over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo1</span> <span class="variable">demo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            demo1.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            demo1.myUnLock();</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            demo1.myLock();</span><br><span class="line">            demo1.myUnLock();</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="原子操作类"><a href="#原子操作类" class="headerlink" title="原子操作类"></a>原子操作类</h4><h5 id="基本类型原子类"><a href="#基本类型原子类" class="headerlink" title="基本类型原子类"></a>基本类型原子类</h5><ul>
<li>AtomicInteger</li>
<li>AtomicBoolean</li>
<li>AtomicLong</li>
</ul>
<h6 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h6><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public final int get()</td>
<td align="center">获取当前的值</td>
</tr>
<tr>
<td align="center">public final int getAndSet(int newValue)</td>
<td align="center">获取当前的值，并设置新的值</td>
</tr>
<tr>
<td align="center">public final int getAndIncrement()</td>
<td align="center">获取当前的值，并自增</td>
</tr>
<tr>
<td align="center">public final int getAndDecrement()</td>
<td align="center">获取当前的值，并自减</td>
</tr>
<tr>
<td align="center">public final int getAndAdd(int delta)</td>
<td align="center">获取当前的值，并加上预期的值</td>
</tr>
<tr>
<td align="center">public final boolean compareAndSet(int expect, int update)</td>
<td align="center">如果输入的数值等于预期值，则以原子方式将该值设置为输入值（update）</td>
</tr>
</tbody></table>
<h6 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyNumber</span> <span class="variable">myNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyNumber</span>();</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">5000</span>; j++) &#123;</span><br><span class="line">                        myNumber.addPlusPlus();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(myNumber.getAtomicInteger().get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumber</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPlusPlus</span><span class="params">()</span> &#123;</span><br><span class="line">        atomicInteger.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="数据组类原子类"><a href="#数据组类原子类" class="headerlink" title="数据组类原子类"></a>数据组类原子类</h5><ul>
<li>AtomicIntegerArray</li>
<li>AtomicLongArray</li>
<li>AtomicReferenceArray</li>
</ul>
<h6 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        AtomicIntegerArray atomicIntegerArray = new AtomicIntegerArray(new int[5]);</span></span><br><span class="line"><span class="comment">//        AtomicIntegerArray atomicIntegerArray = new AtomicIntegerArray(5);</span></span><br><span class="line">        <span class="type">AtomicIntegerArray</span> <span class="variable">atomicIntegerArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicIntegerArray</span>(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; atomicIntegerArray.length(); i++) &#123;</span><br><span class="line">            System.out.println(atomicIntegerArray.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">tmpInt</span> <span class="operator">=</span> atomicIntegerArray.getAndSet(<span class="number">0</span>, <span class="number">1122</span>);</span><br><span class="line">        System.out.println(tmpInt + <span class="string">&quot;\t&quot;</span> + atomicIntegerArray.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        atomicIntegerArray.getAndIncrement(<span class="number">1</span>);</span><br><span class="line">        atomicIntegerArray.getAndIncrement(<span class="number">1</span>);</span><br><span class="line">        tmpInt = atomicIntegerArray.getAndIncrement(<span class="number">1</span>);</span><br><span class="line">        System.out.println(tmpInt + <span class="string">&quot;\t&quot;</span> + atomicIntegerArray.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="引用类型原子类"><a href="#引用类型原子类" class="headerlink" title="引用类型原子类"></a>引用类型原子类</h5><ul>
<li>AtomicReference</li>
<li>AtomicStampedReference</li>
<li>AtomicMarkableReference</li>
</ul>
<h6 id="AtomicMarkableReference-使用"><a href="#AtomicMarkableReference-使用" class="headerlink" title="AtomicMarkableReference 使用"></a>AtomicMarkableReference 使用</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> AtomicMarkableReference&lt;Integer&gt; markableReference = <span class="keyword">new</span> <span class="title class_">AtomicMarkableReference</span>&lt;&gt;(<span class="number">100</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">marked</span> <span class="operator">=</span> markableReference.isMarked();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 1次版本号&quot;</span> + marked);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            markableReference.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, marked, !marked);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 2次版本号&quot;</span> + markableReference.isMarked());</span><br><span class="line">            markableReference.compareAndSet(<span class="number">101</span>, <span class="number">100</span>, markableReference.isMarked(), !markableReference.isMarked());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 3次版本号&quot;</span> + markableReference.isMarked());</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">marked</span> <span class="operator">=</span> markableReference.isMarked();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 1次版本号&quot;</span> + marked);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            markableReference.compareAndSet(<span class="number">100</span>, <span class="number">2020</span>, marked, !marked);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + markableReference.getReference() + <span class="string">&quot;\t&quot;</span> + markableReference.isMarked());</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="对象的属性修改原子类"><a href="#对象的属性修改原子类" class="headerlink" title="对象的属性修改原子类"></a>对象的属性修改原子类</h5><ul>
<li>AtomicIntegerFieldUpdater</li>
<li>AtomicLongFieldUpdater</li>
<li>AtomicReferenceFieldUpdater</li>
</ul>
<h6 id="使用目的及要求"><a href="#使用目的及要求" class="headerlink" title="使用目的及要求"></a>使用目的及要求</h6><p>目的：</p>
<ul>
<li>以一种线程安全的方式操作非线程安全对象内的某些字段</li>
</ul>
<p>要求：</p>
<ul>
<li>更新的对象属性必须使用 public volatile 修饰符</li>
<li>因为对象的属性修改类型原子类都是抽象类，所以每次使用都必须使用静态方法 newUpdater() 创建一个更新器，并且需要设置想要更新的类和属性</li>
</ul>
<h6 id="AtomicIntegerFieldUpdater-使用"><a href="#AtomicIntegerFieldUpdater-使用" class="headerlink" title="AtomicIntegerFieldUpdater 使用"></a>AtomicIntegerFieldUpdater 使用</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一种线程安全的方式操作非线程安全对象的某些字段</span></span><br><span class="line"><span class="comment"> * 需求：1000 个人同时向一个账号转账 1 元钱，那么累计应该增加 1000 元，除了 synchronized 和 CAS，还可以使用 AtomicIntegerFieldUpdater 来实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BankAccount</span> <span class="variable">bankAccount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccount</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; bankAccount.transferMoney(bankAccount), String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(bankAccount.money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 金额</span></span><br><span class="line"></span><br><span class="line">    AtomicIntegerFieldUpdater&lt;BankAccount&gt; accountAtomicIntegerFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(BankAccount.class, <span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不用加锁，性能高</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferMoney</span><span class="params">(BankAccount bankAccount)</span> &#123;</span><br><span class="line">        accountAtomicIntegerFieldUpdater.incrementAndGet(bankAccount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="AtomicReferenceFieldUpdater-使用"><a href="#AtomicReferenceFieldUpdater-使用" class="headerlink" title="AtomicReferenceFieldUpdater 使用"></a>AtomicReferenceFieldUpdater 使用</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程并发调用一个类的初始化方法，如果未被初始化过，将执行初始化工作，要求只能初始化一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyVar</span> <span class="variable">myVar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyVar</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; myVar.init(myVar), String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyVar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">Boolean</span> <span class="variable">isInit</span> <span class="operator">=</span> Boolean.FALSE;</span><br><span class="line">    AtomicReferenceFieldUpdater&lt;MyVar, Boolean&gt; atomicReferenceFieldUpdater = AtomicReferenceFieldUpdater.newUpdater(MyVar.class, Boolean.class, <span class="string">&quot;isInit&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(MyVar myVar)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (atomicReferenceFieldUpdater.compareAndSet(myVar, Boolean.FALSE, Boolean.TRUE)) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;线程初始化&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;线程初始化完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;其它线程正在初始化&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="原子操作增强类"><a href="#原子操作增强类" class="headerlink" title="原子操作增强类"></a>原子操作增强类</h5><ul>
<li>DoubleAccumulator</li>
<li>DoubleAdder</li>
<li>LongAccumulator</li>
<li>LongAdder</li>
</ul>
<h6 id="LongAdder-为什么这么快"><a href="#LongAdder-为什么这么快" class="headerlink" title="LongAdder 为什么这么快"></a>LongAdder 为什么这么快</h6><p>LongAdder 的基本思路就是分散热点，将 value 值分散到一个 Cell 数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行 CAS 操作，这样热点就被分散了，冲突的概率就小很多，如果要获取真正的 long 值，只要将各个槽中的变量值累加返回</p>
<p>sum() 会将所有 Cell 数组中的 value 和 base 累加作为返回值，核心的思想就是将之前 AtomicLong 一个 value 的更新压力分散到多个 value 中去，从而降级更新热点</p>
<h6 id="Demo-3"><a href="#Demo-3" class="headerlink" title="Demo"></a>Demo</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 50个线程，每个线程 100W 次，总点赞数出来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">50</span>);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">50</span>);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">50</span>);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">50</span>);</span><br><span class="line">        <span class="type">ClickNumberNet</span> <span class="variable">clickNumberNet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClickNumberNet</span>();</span><br><span class="line">        <span class="type">long</span> startTime;</span><br><span class="line">        <span class="type">long</span> endTime;</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">100</span> * <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                        clickNumberNet.clickBySync();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;----costTime: &quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span> + <span class="string">&quot;\t clickBySync result: &quot;</span> + clickNumberNet.number);</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">100</span> * <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                        clickNumberNet.clickByAtomicLong();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch2.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch2.await();</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;----costTime: &quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span> + <span class="string">&quot;\t clickByAtomicLong result: &quot;</span> + clickNumberNet.atomicLong);</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">100</span> * <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                        clickNumberNet.clickByLongAdder();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch3.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch3.await();</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;----costTime: &quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span> + <span class="string">&quot;\t clickByLongAdder result: &quot;</span> + clickNumberNet.longAdder.sum());</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">100</span> * <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                        clickNumberNet.clickByLongAccumulator();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch4.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch4.await();</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;----costTime: &quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span> + <span class="string">&quot;\t clickByLongAccumulator result: &quot;</span> + clickNumberNet.longAccumulator.longValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClickNumberNet</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">clickBySync</span><span class="params">()</span> &#123;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">AtomicLong</span> <span class="variable">atomicLong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clickByAtomicLong</span><span class="params">()</span> &#123;</span><br><span class="line">        atomicLong.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">LongAdder</span> <span class="variable">longAdder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LongAdder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clickByLongAdder</span><span class="params">()</span> &#123;</span><br><span class="line">        longAdder.increment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">LongAccumulator</span> <span class="variable">longAccumulator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LongAccumulator</span>((x, y) -&gt; x + y, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clickByLongAccumulator</span><span class="params">()</span> &#123;</span><br><span class="line">        longAccumulator.accumulate(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><p>sum 求和后还有计算线程修改结果的话，最后结果不够准确</p>
<h6 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h6><ul>
<li>AtomicLong<ul>
<li>线程安全，可允许一些性能损耗，要求高精度时可使用</li>
<li>保证精度，性能代价</li>
<li>AtomicLong 是多个线程针对单个热点值 value 进行原子操作</li>
</ul>
</li>
<li>LongAdder<ul>
<li>当需要在高并发下有较好的性能表现，且对值的精确度要求不高时，可以使用</li>
<li>保证性能，精度代价</li>
<li>LongAdder 是每个线程拥有自己的槽，各个线程一般只对自己槽中的那个值进行 CAS 操作</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java对象内存布局和对象头</title>
    <url>/2021/12/26/221106.html</url>
    <content><![CDATA[<blockquote>
<p>Java 对象内存布局和对象头</p>
</blockquote>
<span id="more"></span>

<h4 id="对象在堆内存中的布局"><a href="#对象在堆内存中的布局" class="headerlink" title="对象在堆内存中的布局"></a>对象在堆内存中的布局</h4><p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-26_22-21-41-741f2e6cc09e407c8ddee056e557fff9.png" alt="image.png"></p>
<p>对象内部结构分为：对象头、实例数据、对齐填充（保证 8 个字节的倍数）<br>对象头分为对象标记（markOop）和类元信息（klassOop），类元信息存储的是指向该对象类元数据（klass）的首地址</p>
<ul>
<li>对象头<ul>
<li>对象标记<ul>
<li>默认存储对象的 HashCode、分代年龄和锁标志位等信息，这些信息都是与对象自身定义无关的数据，所以 MarkWord 被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据，它会根据对象的状态复用自己的存储空间，也就是说在运行期间 MarkWord 里存储的数据会随着锁标志位的变化而变化</li>
</ul>
</li>
<li>类元信息<ul>
<li>对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例</li>
</ul>
</li>
</ul>
</li>
<li>实例数据<ul>
<li>存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按 4 字节对齐</li>
</ul>
</li>
<li>对齐填充<ul>
<li>虚拟机要求对象起始地址必须是 8 字节的整数倍，填充数据不是必须存在的，仅仅是为了字节对齐，这部分内存按 8 字节补充对齐</li>
</ul>
</li>
</ul>
<p>对象头有多大：在 64 位系统中，Mark Word 占了 8 个字节，类型指针占了 8 个字节，一共是 16 个字节</p>
<h4 id="对象头的-MarkWord"><a href="#对象头的-MarkWord" class="headerlink" title="对象头的 MarkWord"></a>对象头的 MarkWord</h4><p><img data-src="/../../../../upload/2021/12/32-50eea416ece0465c94ec60dd0e56b60c.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/12/64-f0433ed57e2248ddb420d034821e66d6.png" alt="image.png"></p>
<h4 id="使用-JOL-分析对象在-JVM-的大小和分布"><a href="#使用-JOL-分析对象在-JVM-的大小和分布" class="headerlink" title="使用 JOL 分析对象在 JVM 的大小和分布"></a>使用 JOL 分析对象在 JVM 的大小和分布</h4><blockquote>
<p><a href="http://openjdk.java.net/projects/code-tools/jol/">http://openjdk.java.net/projects/code-tools/jol/</a></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-26_22-32-25-3810509d21224dc6ac9b4f47b94ca5e6.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-26_22-59-46-9b075751b128450ab9691904e71eaa84.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OFFSET</td>
<td align="left">偏移量，也就是到这个字段位置所占用的字节数</td>
</tr>
<tr>
<td align="left">SIZE</td>
<td align="left">后面类型的字节大小</td>
</tr>
<tr>
<td align="left">TYPE</td>
<td align="left">是 Class 中定义的类型</td>
</tr>
<tr>
<td align="left">DESCRIPTION</td>
<td align="left">DESCRIPTION 是类型的描述</td>
</tr>
<tr>
<td align="left">VALUE</td>
<td align="left">VALUE 是 TYPE 在内存中的值</td>
</tr>
</tbody></table>
<p>可以看到，一个对象在内存中占用了 12 个字节和 4 个字节的填充（开启压缩的情况下，默认开启，关闭压缩使用 -XX:-UseCompressedClassPointers，关闭后占用 16 个字节，因为是 8 的整数倍，所以不需要填充）</p>
<p>添加变量 int(4byte) + double(8byte) + boolean(1byte) 后为 25 字节，填充 7 个字节，所以总共 32 个字节</p>
<p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-26_22-49-03-5d678569285843adaecd49ab4b04a27a.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile</title>
    <url>/2021/12/29/220641.html</url>
    <content><![CDATA[<blockquote>
<p>Dockerfile</p>
</blockquote>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FROM</td>
<td align="center">指定基础镜像</td>
</tr>
<tr>
<td align="center">MAINTAINER</td>
<td align="center">指定维护者信息，已经过时，可以使用 LABEL maintainer&#x3D;xxx 来替代</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="center">运行命令</td>
</tr>
<tr>
<td align="center">CMD</td>
<td align="center">指定启动容器时默认的命令</td>
</tr>
<tr>
<td align="center">ENTRYPOINT</td>
<td align="center">指定镜像的默认入口，运行命令</td>
</tr>
<tr>
<td align="center">EXPOSE</td>
<td align="center">声明镜像内服务监听的端口</td>
</tr>
<tr>
<td align="center">ENV</td>
<td align="center">指定环境变量，可以在 docker run 的时候使用 -e 改变，会被固化到 image 的 config 里面</td>
</tr>
<tr>
<td align="center">ADD</td>
<td align="center">复制指定的 src 路径下的内容到容器中的 dest 路径下，src 可以为 url 会自动下载，可以为 tar 文件，会自动解压</td>
</tr>
<tr>
<td align="center">COPY</td>
<td align="center">复制本地主机的 src 路径下的内容到镜像中的 dest 路径下，但不会自动解压等</td>
</tr>
<tr>
<td align="center">LABEL</td>
<td align="center">指定生成镜像的元数据标签信息</td>
</tr>
<tr>
<td align="center">VOLUME</td>
<td align="center">创建数据卷挂载点</td>
</tr>
<tr>
<td align="center">USER</td>
<td align="center">指定运行容器时的用户名或 UID</td>
</tr>
<tr>
<td align="center">WORKDIR</td>
<td align="center">配置工作目录，为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录</td>
</tr>
<tr>
<td align="center">ARG</td>
<td align="center">指定镜像内使用的参数（如版本号信息等），可以在 build 的时候，使用 –buildargs 改变</td>
</tr>
<tr>
<td align="center">OBBUILD</td>
<td align="center">配置当创建的镜像作为其他镜像的基础镜像是，所指定的创建操作指令</td>
</tr>
<tr>
<td align="center">STOPSIGNAL</td>
<td align="center">容器退出的信号值</td>
</tr>
<tr>
<td align="center">HEALTHCHECK</td>
<td align="center">健康检查</td>
</tr>
<tr>
<td align="center">SHELL</td>
<td align="center">指定使用 shell 时的默认 shell 类型</td>
</tr>
</tbody></table>
<h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>FROM 指定基础镜像，最好挑一些 apline，slim 之类的基础小镜像，scratch 镜像是一个空镜像，常用于多阶段构建</p>
<h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>标注镜像的一些说明信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LABEL multi.label1=<span class="string">&quot;value1&quot;</span> multi.label2=<span class="string">&quot;value2&quot;</span> other=<span class="string">&quot;value3&quot;</span></span><br><span class="line">LABEL multi.label1=<span class="string">&quot;value1&quot;</span> \</span><br><span class="line">    multi.label2=<span class="string">&quot;value2&quot;</span> \</span><br><span class="line">    other=<span class="string">&quot;value3&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>RUN 指令在当前镜像层顶部的新层执行任何命令，并提交结果，生成新的镜像层<br>生成的提交映像将用于 Dockerfile 中的下一步，分层运行 RUN 指令并生成提交符合 Docker 的核心概念，就像源代码控制一样<br>exec 形式可以避免破坏 shell 字符串，并使用不包含指定 shell 可执行文件的基本映像运行 RUN 命令，可以使用 SHELL 命令更改 shell 形式的默认 shell，在 shell 形式中，您可以使用 \ 将一条 RUN 指令继续到下一行</p>
<blockquote>
<p>RUN <command> (shell 形式, &#x2F;bin&#x2F;sh -c 的方式运行，避免破坏 shell 字符串)<br>RUN [“executable”, “param1”, “param2”] (exec 形式)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RUN /bin/bash -c <span class="string">&#x27;source $HOME/.bashrc; \</span></span><br><span class="line"><span class="string">echo $HOME&#x27;</span></span><br><span class="line"><span class="comment"># 上面等于下面这种写法</span></span><br><span class="line">RUN /bin/bash -c <span class="string">&#x27;source $HOME/.bashrc; echo $HOME&#x27;</span></span><br><span class="line">RUN [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello&quot;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试案例</span></span><br><span class="line">FROM alpine</span><br><span class="line">LABEL maintainer=leifengyang xx=aa</span><br><span class="line">ENV msg=<span class="string">&#x27;hello atguigu itdachang&#x27;</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="variable">$msg</span></span><br><span class="line">RUN [<span class="string">&quot;echo&quot;</span>,<span class="string">&quot;<span class="variable">$msg</span>&quot;</span>]</span><br><span class="line">RUN /bin/sh -c <span class="string">&#x27;echo $msg&#x27;</span></span><br><span class="line">RUN [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;echo <span class="variable">$msg</span>&quot;</span>]</span><br><span class="line">CMD <span class="built_in">sleep</span> 10000</span><br><span class="line"><span class="comment"># 总结：由于 [] 不是 shell 形式，所以不能输出变量信息，而是输出 $msg，其他任何 /bin/sh -c 的形式都可以输出变量信息</span></span><br><span class="line">1. shell 是 /bin/sh -c &lt;<span class="built_in">command</span>&gt; 的方式，</span><br><span class="line">2. <span class="built_in">exec</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="built_in">command</span>] 的方式 == shell 方式，也就是<span class="built_in">exec</span> 默认方式不会进行变量替换</span><br></pre></td></tr></table></figure>

<h4 id="CMD-和-ENTRYPOINT"><a href="#CMD-和-ENTRYPOINT" class="headerlink" title="CMD 和 ENTRYPOINT"></a>CMD 和 ENTRYPOINT</h4><h5 id="都可以作为容器启动入口"><a href="#都可以作为容器启动入口" class="headerlink" title="都可以作为容器启动入口"></a>都可以作为容器启动入口</h5><p>CMD 的三种写法：<br>    CMD [“executable”,”param1”,”param2”] ( exec 方式, 首选方式)<br>    CMD [“param1”,”param2”] (为ENTRYPOINT提供默认参数)<br>    CMD command param1 param2 ( shell 形式)<br>ENTRYPOINT 的两种写法：<br>    ENTRYPOINT [“executable”, “param1”, “param2”] ( exec 方式, 首选方式)<br>    ENTRYPOINT command param1 param2 (shell 形式)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个示例</span></span><br><span class="line">FROM alpine</span><br><span class="line">LABEL maintainer=leifengyang</span><br><span class="line">CMD [<span class="string">&quot;1111&quot;</span>]</span><br><span class="line">CMD [<span class="string">&quot;2222&quot;</span>]</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;echo&quot;</span>]</span><br><span class="line"><span class="comment"># 构建出如上镜像后测试</span></span><br><span class="line">docker run xxxx：效果 <span class="built_in">echo</span> 1111</span><br></pre></td></tr></table></figure>

<h5 id="只能有一个-CMD"><a href="#只能有一个-CMD" class="headerlink" title="只能有一个 CMD"></a>只能有一个 CMD</h5><p>Dockerfile 中只能有一条 CMD 指令，如果您列出多个 CMD，则只有最后一个 CMD 才会生效。<br>CMD 的主要目的是为执行中的容器提供默认值，这些默认值可以包含可执行文件，也可以省略可执行文件，在这种情况下，您还必须指定 ENTRYPOINT 指令</p>
<h5 id="CMD-为-ENTRYPOINT-提供默认参数"><a href="#CMD-为-ENTRYPOINT-提供默认参数" class="headerlink" title="CMD 为 ENTRYPOINT 提供默认参数"></a>CMD 为 ENTRYPOINT 提供默认参数</h5><p>如果使用 CMD 为 ENTRYPOINT 指令提供默认参数，则 CMD 和 ENTRYPOINT 指令均应使用 JSON 数组格式指定</p>
<h5 id="docker-run-启动参数会覆盖-CMD-内容"><a href="#docker-run-启动参数会覆盖-CMD-内容" class="headerlink" title="docker run 启动参数会覆盖 CMD 内容"></a>docker run 启动参数会覆盖 CMD 内容</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个示例</span></span><br><span class="line">FROM alpine</span><br><span class="line">LABEL maintainer=leifengyang</span><br><span class="line">CMD [<span class="string">&quot;1111&quot;</span>]</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;echo&quot;</span>]</span><br><span class="line"><span class="comment"># 构建出如上镜像后测试</span></span><br><span class="line">docker run xxxx：什么都不传则 <span class="built_in">echo</span> 1111</span><br><span class="line">docker run xxx arg1：传入arg1 则<span class="built_in">echo</span> arg1</span><br></pre></td></tr></table></figure>

<h4 id="ARG-和-ENV"><a href="#ARG-和-ENV" class="headerlink" title="ARG 和 ENV"></a>ARG 和 ENV</h4><h5 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h5><p>ARG 指令定义了一个变量，用户可以在构建时使用 –build-arg &#x3D; 传递，docker build 命令会将其传递给构建器<br>–build-arg 指定参数会覆盖 Dockerfile 中指定的同名参数<br>如果用户指定了“未在 Dockerfile 中定义的构建参数”，则构建会输出“警告”<br>ARG 只在构建期有效，运行期无效<br>不建议使用构建时变量来传递诸如 github 密钥，用户凭据等机密，因为构建时变量值使用 dockerhistory 是可见的<br>ARG 变量定义从 Dockerfile 中定义的行开始生效<br>使用 ENV 指令定义的环境变量始终会覆盖同名的 ARG 指令</p>
<h5 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h5><p>在构建阶段中所有后续指令的环境中使用，并且在许多情况下也可以内联替换<br>引号和反斜杠可用于在值中包含空格<br>ENV 可以使用 key value 的写法，但是这种不建议使用了，后续版本可能会删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENV MY_MSG hello</span><br><span class="line">ENV MY_NAME=<span class="string">&quot;John Doe&quot;</span></span><br><span class="line">ENV MY_DOG=Rex\ The\ Dog</span><br><span class="line">ENV MY_CAT=fluffy</span><br><span class="line"><span class="comment"># 多行写法如下</span></span><br><span class="line">ENV MY_NAME=<span class="string">&quot;John Doe&quot;</span> MY_DOG=Rex\ The\ Dog \</span><br><span class="line">MY_CAT=fluffy</span><br></pre></td></tr></table></figure>

<p>docker run –env 可以修改这些值<br>容器运行时 ENV 值可以生效<br>ENV 在 image 阶段就会被解析并持久化（docker inspect image 查看），参照下面示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line">ENV arg=1111111</span><br><span class="line">ENV runcmd=<span class="variable">$arg</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="variable">$runcmd</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$runcmd</span></span><br><span class="line"><span class="comment"># ENV 的固化问题： 改变 arg，会不会改变 echo的值，会改变哪些值，如何修改这些值?</span></span><br></pre></td></tr></table></figure>

<h5 id="综合测试示例"><a href="#综合测试示例" class="headerlink" title="综合测试示例"></a>综合测试示例</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line">ARG arg1=22222</span><br><span class="line">ENV arg2=1111111</span><br><span class="line">ENV runcmd=<span class="variable">$arg1</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="variable">$arg1</span> <span class="variable">$arg2</span> <span class="variable">$runcmd</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$arg1</span> <span class="variable">$arg2</span> <span class="variable">$runcmd</span></span><br></pre></td></tr></table></figure>

<h4 id="ADD-和-COPY"><a href="#ADD-和-COPY" class="headerlink" title="ADD 和 COPY"></a>ADD 和 COPY</h4><h5 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h5><p>COPY 的两种写法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COPY [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span><br><span class="line">COPY [--<span class="built_in">chown</span>=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>–chown 功能仅在用于构建 Linux 容器的 Dockerfiles 上受支持，而在 Windows 容器上不起作用<br>COPY 指令从 src 复制新文件或目录，并将它们添加到容器的文件系统中，路径为 dest<br>可以指定多个 src 资源，但是文件和目录的路径将被解释为相对于构建上下文的源<br>每个 src 都可以包含通配符，并且匹配将使用 Go 的 filepath.Match 规则进行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">COPY hom* /mydir/ <span class="comment"># 当前上下文，以 home 开始的所有资源</span></span><br><span class="line">COPY hom?.txt /mydir/ <span class="comment"># ? 匹配单个字符</span></span><br><span class="line">COPY test.txt relativeDir/ <span class="comment"># 目标路径如果设置为相对路径，则相对与 WORKDIR 开始</span></span><br><span class="line"><span class="comment"># 把 “test.txt” 添加到 &lt;WORKDIR&gt;/relativeDir/</span></span><br><span class="line">COPY test.txt /absoluteDir/ <span class="comment"># 也可以使用绝对路径，复制到容器指定位置</span></span><br><span class="line"><span class="comment"># 所有复制的新文件都是 uid(0)/gid(0) 的用户，可以使用 --chown 改变</span></span><br><span class="line">COPY --<span class="built_in">chown</span>=55:mygroup files* /somedir/</span><br><span class="line">COPY --<span class="built_in">chown</span>=bin files* /somedir/</span><br><span class="line">COPY --<span class="built_in">chown</span>=1 files* /somedir/</span><br><span class="line">COPY --<span class="built_in">chown</span>=10:11 files* /somedir/</span><br></pre></td></tr></table></figure>

<h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><p>同 COPY 用法，不过 ADD 拥有自动下载远程文件和解压的功能。<br>注意：<br>src 路径必须在构建的上下文中，不能使用 ..&#x2F;something &#x2F;something 这种方式，因为 docker 构建的第一步是将上下文目录（和子目录）发送到 docker 守护程序<br>如果 src 是 URL，并且 dest 不以斜杠结尾，则从 URL 下载文件并将其复制到 dest<br>    如果 dest 以斜杠结尾，将自动推断出 url 的名字（保留最后一部分），保存到 dest<br>如果 src 是目录，则将复制目录的整个内容，包括文件系统元数据</p>
<h4 id="WORKDIR-和-VOLUME"><a href="#WORKDIR-和-VOLUME" class="headerlink" title="WORKDIR 和 VOLUME"></a>WORKDIR 和 VOLUME</h4><h5 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h5><p>WORKDIR 指令为 Dockerfile 中跟随它的所有 RUN，CMD，ENTRYPOINT，COPY，ADD 指令设置工作目录。 如果 WORKDIR 不存在，即使以后的 Dockerfile 指令中未使用它也将被创建<br>WORKDIR 指令可在 Dockerfile 中多次使用，如果提供了相对路径，则它将相对于上一个 WORKDIR 指令的路径，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 结果 /a/b/c</span></span><br></pre></td></tr></table></figure>

<p>也可以用到环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENV DIRPATH=/path</span><br><span class="line">WORKDIR <span class="variable">$DIRPATH</span>/<span class="variable">$DIRNAME</span></span><br><span class="line">RUN <span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 结果 /path/$DIRNAME</span></span><br></pre></td></tr></table></figure>

<h5 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h5><p>作用：把容器的某些文件夹映射到主机外部<br>写法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VOLUME [<span class="string">&quot;/var/log/&quot;</span>] <span class="comment"># 可以是 JSON 数组</span></span><br><span class="line">VOLUME /var/log <span class="comment"># 可以直接写</span></span><br><span class="line">VOLUME /var/log /var/db <span class="comment"># 可以空格分割多个</span></span><br></pre></td></tr></table></figure>

<p>注意：用 VOLUME 声明了卷，那么以后对于卷内容的修改会被丢弃，所以一定在 volume 声明之前修改内容</p>
<h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>写法：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">USER &lt;user&gt;[:&lt;group&gt;]</span><br><span class="line">USER &lt;UID&gt;[:&lt;GID&gt;]</span><br></pre></td></tr></table></figure>

<p>USER 指令设置运行映像时要使用的用户名（或 UID）以及可选的用户组（或 GID），以及 Dockerfile 中 USER 后面所有 RUN，CMD 和 ENTRYPOINT 指令</p>
<h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>EXPOSE 指令通知 Docker 容器在运行时在指定的网络端口上进行侦听，可以指定端口是侦听 TCP 还是 UDP，如果未指定协议，则默认值为 TCP<br>EXPOSE 指令实际上不会发布端口，它充当构建映像的人员和运行容器的人员之间的一种文档，即有关打算发布哪些端口的信息，要在运行容器时实际发布端口，请在 docker run 上使用 -p 标志发布并映射一个或多个端口，或使用 -P 标志发布所有公开的端口并将其映射到高阶端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br><span class="line">EXPOSE [80,443]</span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line">EXPOSE 80/udp</span><br></pre></td></tr></table></figure>

<h4 id="multi-stage-builds"><a href="#multi-stage-builds" class="headerlink" title="multi-stage builds"></a>multi-stage builds</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下所有前提 保证 Dockerfile 和项目在同一个文件夹</span></span><br><span class="line"><span class="comment"># 第一阶段：环境构建，用这个也可以</span></span><br><span class="line">FROM maven:3.5.0-jdk-8-alpine AS builder</span><br><span class="line">WORKDIR /app</span><br><span class="line">ADD ./ /app</span><br><span class="line">RUN mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 第二阶段，最小运行时环境，只需要 jre；第二阶段并不会有第一阶段哪些没用的层</span></span><br><span class="line"><span class="comment"># 基础镜像没有 jmap；jdk，springboot-actutor（jdk）</span></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">LABEL maintainer=<span class="string">&quot;chenkaixin12121@163.com&quot;</span></span><br><span class="line"><span class="comment"># 从上一个阶段复制内容</span></span><br><span class="line">COPY --from=builder /app/target/*.jar /app.jar</span><br><span class="line"><span class="comment"># 修改时区</span></span><br><span class="line">RUN <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone &amp;&amp; <span class="built_in">touch</span> /app.jar</span><br><span class="line">ENV JAVA_OPTS=<span class="string">&quot;&quot;</span></span><br><span class="line">ENV PARAMS=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 运行 jar 包</span></span><br><span class="line">ENTRYPOINT [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java -Djava.security.egd=file:/dev/./urandom <span class="variable">$JAVA_OPTS</span> -jar /app.jar <span class="variable">$PARAMS</span>&quot;</span> ]</span><br></pre></td></tr></table></figure>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">LABEL maintainer=<span class="string">&quot;chenkaixin12121@163.com&quot;</span></span><br><span class="line">COPY target/*.jar /app.jar</span><br><span class="line">RUN <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone &amp;&amp; <span class="built_in">touch</span> /app.jar</span><br><span class="line">ENV JAVA_OPTS=<span class="string">&quot;&quot;</span></span><br><span class="line">ENV PARAMS=<span class="string">&quot;&quot;</span></span><br><span class="line">ENTRYPOINT [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;java -Djava.security.egd=file:/dev/./urandom <span class="variable">$JAVA_OPTS</span> -jar /app.jar <span class="variable">$PARAMS</span>&quot;</span> ]</span><br><span class="line"><span class="comment"># 运行命令 docker run -e JAVA_OPTS=&quot;-Xmx512m -Xms33 -&quot; -e PARAMS=&quot;--spring.profiles=dev --server.port=8080&quot; -jar /app/app.jar</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习</title>
    <url>/2021/12/29/204450.html</url>
    <content><![CDATA[<blockquote>
<p>Docker 学习</p>
</blockquote>
<span id="more"></span>

<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-29_20-48-44-72a2d3297bb74c6fa661efe49e33c574.png" alt="image.png"></p>
<ul>
<li>Docker Daemon：运行在 Docker 服务器的后台进程，侦听 Docker API 请求并管理 Docker 对象，例如镜像、容器、网络和挂载卷，守护进程还可以与其他守护进程通信以管理 Docker 服务</li>
<li>Docker Client： Docker 客户端是许多 Docker 用户与 Docker 交互的主要方式，当使用 docker run 之类的命令时，客户端会将这些命令发送到 dockerd，从而执行它们，该 docker 命令使用 Docker API，Docker 客户端可以与多个守护进程通信</li>
<li>Docker Host：安装 Docker 服务的主机</li>
<li>Docker Registries：存储 Docker Image 的地方，Docker Hub 是一个任何人都可以使用的公共仓库，Docker 默认配置为在 Docker Hub 上查找镜像，也可以使用自己的仓库，当使用 docker pull 或 docker run 命令时，所需的镜像将从配置的仓库中查找，当使用 docker push 命令时，镜像会被推送到你配置的仓库中</li>
<li>Images：镜像是用于创建 Docker 容器的只读模板，通常，一个镜像基于另一个镜像，并带有一些额外的自定义，可以自己创建镜像，也可以使用公共仓库中发布的镜像，构建镜像需要创建一个 Dockerfile，用于定义创建镜像和运行镜像所需的步骤，Dockerfile 中的每条指令都会在镜像中创建一个层，当更改 Dockerfile 并重建镜像时，只会重建那些已更改的层，与其他虚拟化技术相比，这是使镜像如此轻巧、小巧和快速的部分原因</li>
<li>Containers：容器是镜像的可运行实例，可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器，可以将容器连接到一个或多个网络，为其附加存储，也可以根据其当前状态创建新镜像，默认情况下，容器与其他容器及其主机相对隔离，可以控制容器的网络、存储或其他底层子系统与其他容器或主机之间的隔离程度，容器由镜像以及创建或启动它时提供给它的任何配置选项定义，当容器被移除时，未存储在持久存储中的对其状态的任何更改都会消失</li>
</ul>
<blockquote>
<p>Docker 用 Go 语言编写，并利用 Linux 内核的几个特性来提供其功能，Docker 使用一种称为 namespaces 的技术来实现资源隔离，运行容器时，Docker 会为该容器创建一组 namespaces， 这些 namespaces 提供了一层资源隔离，容器的每个方面都在单独的 namespaces 中运行，并且对其的访问仅限于该 namespaces</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移除旧版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 yum 源</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到所有可用 docker 版本列表</span></span><br><span class="line">sudo yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本 docker engine</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本 docker engine</span></span><br><span class="line">sudo yum install docker-ce-&lt;VERSION_STRING&gt;.x86_64 docker-ce-cli-&lt;VERSION_STRING&gt;.x86_64 containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务并设置开机自启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h5 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h5 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">  \&quot;registry-mirrors\&quot;: [</span></span><br><span class="line"><span class="string">    \&quot;https://mirror.ccs.tencentyun.com\&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;&quot;</span> &gt; /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h5 id="可视化界面-Portainer"><a href="#可视化界面-Portainer" class="headerlink" title="可视化界面-Portainer"></a>可视化界面-Portainer</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端部署（访问 9000 端口）</span></span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># agent 端部署</span></span><br><span class="line">docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent</span><br></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><img data-src="/../../../../upload/2021/12/Snipaste_2021-12-29_21-13-53-e5ff9f86b1ff40ae8d704d159059b60c.png" alt="image.png"></p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">attach</td>
<td align="center">绑定到运行中容器的标准输入、输出、以及错误流，绑定的是控制台，退出后可能会导致容器停止</td>
</tr>
<tr>
<td align="center">build</td>
<td align="center">从一个 Dockerfile 文件构建镜像，docker build -t imageName -f DockerfileName .</td>
</tr>
<tr>
<td align="center">commit</td>
<td align="center">把容器的改变提交并创建一个新的镜像</td>
</tr>
<tr>
<td align="center">cp</td>
<td align="center">容器和本地文件系统间复制文件或目录</td>
</tr>
<tr>
<td align="center">create</td>
<td align="center">创建新容器，但是不启动，需要手动启动，docker create –name myredis -p 6379（主机的端口）:6379（容器的端口） redis 主机端口必须唯一</td>
</tr>
<tr>
<td align="center">diff</td>
<td align="center">检查容器里文件系统结构的更改（A：添加文件或目录 D：文件或者目录删除 C：文件或者目录更改）</td>
</tr>
<tr>
<td align="center">events</td>
<td align="center">获取服务器的实时事件</td>
</tr>
<tr>
<td align="center">exec</td>
<td align="center">在运行时的容器内运行命令，docker exec -it -u 0:0 –privileged mynginx4 &#x2F;bin&#x2F;bash 0 用户，以特权方式进入容器</td>
</tr>
<tr>
<td align="center">export</td>
<td align="center">导出容器的文件系统为一个 tar 文件，commit 是直接提交成镜像，export 是导出成文件方便传输</td>
</tr>
<tr>
<td align="center">import</td>
<td align="center">导入 tar 的内容创建一个镜像，导入进来的镜像直接启动不了容器，需要指定命令</td>
</tr>
<tr>
<td align="center">history</td>
<td align="center">显示镜像的历史</td>
</tr>
<tr>
<td align="center">images</td>
<td align="center">列出所有镜像，image ls</td>
</tr>
<tr>
<td align="center">info</td>
<td align="center">显示系统信息</td>
</tr>
<tr>
<td align="center">inspect</td>
<td align="center">获取 docker 对象的底层信息</td>
</tr>
<tr>
<td align="center">kill</td>
<td align="center">杀死一个或多个容器</td>
</tr>
<tr>
<td align="center">save</td>
<td align="center">把一个或者多个镜像保存为 tar 文件</td>
</tr>
<tr>
<td align="center">load</td>
<td align="center">从 tar 文件加载镜像</td>
</tr>
<tr>
<td align="center">login</td>
<td align="center">登录 Docker registry</td>
</tr>
<tr>
<td align="center">logout</td>
<td align="center">退出 Docker registry</td>
</tr>
<tr>
<td align="center">logs</td>
<td align="center">获取容器日志，可以看到容器在控制台输出的所有内容</td>
</tr>
<tr>
<td align="center">pause</td>
<td align="center">暂停一个或多个容器</td>
</tr>
<tr>
<td align="center">unpause</td>
<td align="center">pause 的反操作</td>
</tr>
<tr>
<td align="center">port</td>
<td align="center">列出容器的端口映射</td>
</tr>
<tr>
<td align="center">ps</td>
<td align="center">列出所有容器</td>
</tr>
<tr>
<td align="center">pull</td>
<td align="center">从 registry 下载一个 image 或者 repository</td>
</tr>
<tr>
<td align="center">push</td>
<td align="center">给 registry 推送一个 image 或者 repository</td>
</tr>
<tr>
<td align="center">rename</td>
<td align="center">重命名一个容器</td>
</tr>
<tr>
<td align="center">restart</td>
<td align="center">重启一个或者多个容器</td>
</tr>
<tr>
<td align="center">rm</td>
<td align="center">删除一个或多个容器</td>
</tr>
<tr>
<td align="center">rmi</td>
<td align="center">删除一个或多个镜像，docker rmi -f $(docker images -aq) 删除全部镜像</td>
</tr>
<tr>
<td align="center">run</td>
<td align="center">创建并启动容器</td>
</tr>
<tr>
<td align="center">search</td>
<td align="center">去 docker hub 寻找镜像</td>
</tr>
<tr>
<td align="center">stats</td>
<td align="center">显示容器资源的实时使用状态</td>
</tr>
<tr>
<td align="center">start</td>
<td align="center">启动一个或者多个容器</td>
</tr>
<tr>
<td align="center">stop</td>
<td align="center">停止一个或者多个容器</td>
</tr>
<tr>
<td align="center">tag</td>
<td align="center">给源镜像创建一个新的标签，变成新的镜像，docker tag 原镜像:标签 新镜像名:标签</td>
</tr>
<tr>
<td align="center">top</td>
<td align="center">显示正在运行容器的进程</td>
</tr>
<tr>
<td align="center">udpate</td>
<td align="center">更新一个或多个 docker 容器配置</td>
</tr>
<tr>
<td align="center">version</td>
<td align="center">查看 Docker 的版本信息</td>
</tr>
<tr>
<td align="center">container</td>
<td align="center">管理容器</td>
</tr>
<tr>
<td align="center">image</td>
<td align="center">管理镜像</td>
</tr>
<tr>
<td align="center">network</td>
<td align="center">管理网络</td>
</tr>
<tr>
<td align="center">volume</td>
<td align="center">管理卷</td>
</tr>
<tr>
<td align="center">prune</td>
<td align="center">删除游离镜像，docker image prune</td>
</tr>
</tbody></table>
<h5 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h5><ul>
<li>-d: 后台运行容器，并返回容器 ID</li>
<li>-i: 以交互模式运行容器，通常与 -t 同时使用</li>
<li>-P: 随机端口映射，容器内部端口随机映射到主机的端口</li>
<li>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</li>
<li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用</li>
<li>–name&#x3D;”nginx-lb”: 为容器指定一个名称</li>
<li>–dns 8.8.8.8: 指定容器使用的 DNS 服务器，默认和宿主一致</li>
<li>–dns-search example.com: 指定容器 DNS 搜索域名，默认和宿主一致</li>
<li>-h “mars”: 指定容器的 hostname</li>
<li>-e username&#x3D;”ritchie”: 设置环境变量</li>
<li>–env-file&#x3D;[]: 从指定文件读入环境变量</li>
<li>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”: 绑定容器到指定CPU运行</li>
<li>-m: 设置容器使用内存最大值；</li>
<li>–net&#x3D;”bridge”: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container 四种类型</li>
<li>–link&#x3D;[]: 添加链接到另一个容器</li>
<li>–expose&#x3D;[]: 开放一个端口或一组端口</li>
<li>–restart: 指定重启策略，可以写–restart&#x3D;awlays 总是故障重启</li>
<li>–volume: -v 绑定一个卷，一般格式 主机文件或文件夹:虚拟机文件或文件夹</li>
</ul>
<h5 id="常见部署案例"><a href="#常见部署案例" class="headerlink" title="常见部署案例"></a>常见部署案例</h5><h6 id="部署-Nginx"><a href="#部署-Nginx" class="headerlink" title="部署 Nginx"></a>部署 Nginx</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意: 外部的 /nginx/conf 下面的内容必须存在，否则挂载会覆盖</span></span><br><span class="line">docker run --name nginx \</span><br><span class="line">-v /usr/local/nginx/html:/usr/share/nginx/html:ro \</span><br><span class="line">-v /usr/local/nginx/conf:/etc/nginx</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure>

<h6 id="部署-MySQL"><a href="#部署-MySQL" class="headerlink" title="部署 MySQL"></a>部署 MySQL</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 \</span><br><span class="line">--name mysql8 \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /usr/local/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /usr/local/docker/mysql/log:/var/log/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:8.0.21 \</span><br><span class="line">--character-set-server=utf8mb4 \</span><br><span class="line">--collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure>

<h6 id="部署-Redis"><a href="#部署-Redis" class="headerlink" title="部署 Redis"></a>部署 Redis</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 \</span><br><span class="line">--name redis \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /usr/local/docker/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /usr/local/docker/redis/data:/data \</span><br><span class="line">-d redis:6.2.6 \</span><br><span class="line">redis-server /etc/redis/redis.conf --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<h6 id="部署-ElasticSearch"><a href="#部署-ElasticSearch" class="headerlink" title="部署 ElasticSearch"></a>部署 ElasticSearch</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name=elasticsearch \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms300m -Xmx300m&quot;</span> \</span><br><span class="line">-v /usr/local/es/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /usr/local/es/plugins:/usr/shrae/elasticsearch/plugins \</span><br><span class="line">-v esconfig:/usr/share/elasticsearch/config \</span><br><span class="line">-d elasticsearch:7.12.0</span><br></pre></td></tr></table></figure>

<h6 id="部署-Tomcat"><a href="#部署-Tomcat" class="headerlink" title="部署 Tomcat"></a>部署 Tomcat</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v /usr/local/tomcat/conf:/usr/local/tomcat/conf \</span><br><span class="line">-v /usr/local/tomcat/webapp:/usr/local/tomcat/webapps \</span><br><span class="line">-d tomcat:jdk8-openjdk-slim-buster</span><br></pre></td></tr></table></figure>

<h5 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h5><ul>
<li>no: 默认策略，在容器退出时不重启容器</li>
<li>on-failure: 在容器非正常退出时（退出状态非0），才会重启容器</li>
<li>on-failure: 在容器非正常退出时重启容器，最多重启3次</li>
<li>always: 在容器退出时总是重启容器</li>
<li>unless-stopped: 在容器退出时总是重启容器，但是不考虑在 Docker 守护进程启动时就已经停止了的容器</li>
</ul>
<h5 id="export-and-import-操作容器"><a href="#export-and-import-操作容器" class="headerlink" title="export and import 操作容器"></a>export and import 操作容器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">export</span> 导出的文件被 import 导入以后变成镜像，并不能直接启动容器，需要知道之前的启动命令（docker ps --no-trunc），然后再用下面启动</span><br><span class="line">docker run -d -P mynginx:v6 /docker-entrypoint.sh nginx -g <span class="string">&#x27;daemon off;&#x27;</span></span><br><span class="line">或者 docker image inspect 看之前的镜像，把之前镜像的 Entrypoint 的所有和 Cmd 的连接起来就能得到启动命令</span><br></pre></td></tr></table></figure>

<h5 id="save-and-load-操作镜像"><a href="#save-and-load-操作镜像" class="headerlink" title="save and load 操作镜像"></a>save and load 操作镜像</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o busybox.tar busybox:latest 把 busybox 镜像保存成 tar 文件</span><br><span class="line">docker load -i busybox.tar 把压缩包里面的内容直接导成镜像</span><br></pre></td></tr></table></figure>

<h5 id="产生镜像的三种方式"><a href="#产生镜像的三种方式" class="headerlink" title="产生镜像的三种方式"></a>产生镜像的三种方式</h5><p>基于已经存在的容器，提取成镜像<br>使用给定的 tar 包导入成镜像<br>使用 Dockerfile 生成镜像</p>
<h5 id="容器的状态"><a href="#容器的状态" class="headerlink" title="容器的状态"></a>容器的状态</h5><p>Created（新建）、Up（运行中）、Pause（暂停）、Exited（退出）</p>
<h5 id="如何-push-镜像到仓库"><a href="#如何-push-镜像到仓库" class="headerlink" title="如何 push 镜像到仓库"></a>如何 push 镜像到仓库</h5><p>使用 tag 命令重命名镜像成你的仓库名称<br>docker push chenkaixin12121&#x2F;mynginx:v1</p>
<h4 id="Docker-存储"><a href="#Docker-存储" class="headerlink" title="Docker 存储"></a>Docker 存储</h4><h5 id="镜像如何存储"><a href="#镜像如何存储" class="headerlink" title="镜像如何存储"></a>镜像如何存储</h5><h6 id="镜像的目录结构"><a href="#镜像的目录结构" class="headerlink" title="镜像的目录结构"></a>镜像的目录结构</h6><blockquote>
<p>容器也会自己建立层，如果想要改东西，把改的内容复制到容器层即可，docker container inspect</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image inspect nginx</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;GraphDriver&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;LowerDir&quot;</span>: <span class="string">&quot;</span></span><br><span class="line"><span class="string">        /var/lib/docker/overlay2/ee8ad017262f81a3c136ca8b1654c8ac94966d804857877a045a3757f181cc2b/diff:</span></span><br><span class="line"><span class="string">        /var/lib/docker/overlay2/e35023834999191cdd5c1cb7d057b7fd0b2d60d6c012d101974c2054b7133840/diff:</span></span><br><span class="line"><span class="string">        /var/lib/docker/overlay2/c52b8101eb527b96cb5a56c57c7f7a356359f636953580f21c319217c79d357c/diff:</span></span><br><span class="line"><span class="string">        /var/lib/docker/overlay2/756ddb8d639da72d3167bcefbd38b3f5e622d560e1cfe1409b6dd1c5fa0f53a9/diff:</span></span><br><span class="line"><span class="string">        /var/lib/docker/overlay2/efbb35095fe9fab8f49ad248f0ce252b465878029be64e8fa6496b4f9dab205a/diff&quot;</span>,</span><br><span class="line">        <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/104d9ef20ab91ebd0877ce5c1298be925f4e1fc9ccff01d70f429aeabd539bf8/merged&quot;</span>,</span><br><span class="line">        <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/104d9ef20ab91ebd0877ce5c1298be925f4e1fc9ccff01d70f429aeabd539bf8/diff&quot;</span>,</span><br><span class="line">        <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/104d9ef20ab91ebd0877ce5c1298be925f4e1fc9ccff01d70f429aeabd539bf8/work&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LowerDir：底层目录，diff（只是存储不同），包含小型 linux 和装好的软件<br>MergedDir：合并目录，容器最终的完整工作目录全内容都在合并层，数据卷在容器层产生，所有的增删改都在容器层</p>
<p><img data-src="/../../../../upload/2022/03/image-7b731ef8c2bb446aa04aa2a9c3cbaf13.png" alt="image.png"></p>
<p>UpperDir：上层目录<br>WorkDir：工作目录（临时层），pid</p>
<h6 id="Images-and-layers"><a href="#Images-and-layers" class="headerlink" title="Images and layers"></a>Images and layers</h6><p>Docker 镜像由一系列层组成，每层代表着 Dockerfile 中的一条指令（Dockerfile文件里面几句话，镜像就有几层），除最后一层外的每一层都是只读的，如以下 Dockerfile：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:15.04</span><br><span class="line">COPY . /app</span><br><span class="line">RUN make /app</span><br><span class="line">CMD python /app/app.py</span><br><span class="line"><span class="comment"># 每一个指令都可能会引起镜像改变，这些改变类似 git 的方式逐层叠加</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该 Dockerfile 包含四个命令，每个命令创建一个层<br>FROM 语句从 ubuntu：15.04 映像创建一个图层开始<br>COPY命令从Docker客户端的当前目录添加一些文件<br>RUN 命令使用 make 命令构建您的应用程序<br>最后，最后一层指定要在容器中运行的命令<br>每一层只是与上一层不同的一组，这些层彼此堆叠<br>创建新容器时，可以在基础层之上添加一个新的可写层，该层通常称为“容器层”，对运行中的容器所做的所有更改（例如写入新文件，修改现有文件和删除文件）都将写入此薄可写容器层</p>
</blockquote>
<p><img data-src="/../../../../upload/2022/03/image-0eccb9a2deae426881d26bdf150b4e31.png" alt="image.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker history nginx</span></span><br><span class="line">IMAGE          CREATED      CREATED BY                                      SIZE      COMMENT</span><br><span class="line">f2f70adc5d89   4 days ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon…   0B        </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop)  STOPSIGNAL SIGQUIT           0B        </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop)  EXPOSE 80                    0B        </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop)  ENTRYPOINT [&quot;/docker-entr…   0B        </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop) COPY file:09a214a3e07c919a…   4.61kB    </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop) COPY file:0fd5fca330dcd6a7…   1.04kB    </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop) COPY file:0b866ff3fc1ef5b0…   1.96kB    </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop) COPY file:65504f71f5855ca0…   1.2kB     </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="built_in">set</span> -x     &amp;&amp; addgroup --system -…   61.1MB    </span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop)  ENV PKG_RELEASE=1~bullseye   0B        </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop)  ENV NJS_VERSION=0.7.2        0B        </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop)  ENV NGINX_VERSION=1.21.6     0B        </span></span><br><span class="line">&lt;missing&gt;      4 days ago   /bin/sh -c <span class="comment">#(nop)  LABEL maintainer=NGINX Do…   0B        </span></span><br><span class="line">&lt;missing&gt;      5 days ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;bash&quot;]                 0B        </span></span><br><span class="line">&lt;missing&gt;      5 days ago   /bin/sh -c <span class="comment">#(nop) ADD file:36919ae6bb25e3269…   80.4MB</span></span><br></pre></td></tr></table></figure>

<h6 id="Container-and-layers"><a href="#Container-and-layers" class="headerlink" title="Container and layers"></a>Container and layers</h6><blockquote>
<p>容器和镜像之间的主要区别是可写顶层<br>在容器中添加新数据或修改现有数据的所有写操作都存储在此可写层中<br>删除容器后，可写层也会被删除 基础图像保持不变 因为每个容器都有其自己的可写容器层，并且所有更改都存储在该容器层中，所以多个容器可以共享对同一基础映像的访问，但具有自己的数据状态</p>
</blockquote>
<p><img data-src="/../../../../upload/2022/03/image-abf8f005bb9c4e6caf6b98d2ff338363.png" alt="image.png"></p>
<h6 id="磁盘容量预估"><a href="#磁盘容量预估" class="headerlink" title="磁盘容量预估"></a>磁盘容量预估</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -s</span><br><span class="line"></span><br><span class="line">size：用于每个容器的可写层的数据量（在磁盘上）</span><br><span class="line">virtual size：容器使用的用于只读图像数据的数据量加上容器的可写图层大小，多个容器可以共享部分或全部只读图像数据，从同一图像开始的两个容器共享100％的只读数据，而具有不同图像的两个容器（具有相同的层）共享这些公共层， 因此，不能只对虚拟大小进行总计这高估了总磁盘使用量，可能是一笔不小的数目</span><br></pre></td></tr></table></figure>

<h6 id="镜像如何挑选"><a href="#镜像如何挑选" class="headerlink" title="镜像如何挑选"></a>镜像如何挑选</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">busybox：是一个集成了一百多个最常用 Linux 命令和工具的软件，linux 工具里的瑞士军刀</span><br><span class="line">alpine：Alpine 操作系统是一个面向安全的轻型 Linux 发行版经典最小镜像，基于 busybox，功能比 Busybox 完善</span><br><span class="line">slim：docker hub 中有些镜像有 slim 标识，都是瘦身了的镜像，也要优先选择无论是制作镜像还是下载镜像，优先选择 alpine 类型</span><br></pre></td></tr></table></figure>

<h6 id="Copy-On-Write"><a href="#Copy-On-Write" class="headerlink" title="Copy On Write"></a>Copy On Write</h6><blockquote>
<p>写时复制是一种共享和复制文件的策略，可最大程度地提高效率<br>如果文件或目录位于映像的较低层中，而另一层（包括可写层）需要对其进行读取访问，则它仅使用现有文件<br>另一层第一次需要修改文件时（在构建映像或运行容器时），将文件复制到该层并进行修改，这样可以将 I&#x2F;O 和每个后续层的大小最小化</p>
</blockquote>
<h5 id="容器如何挂载"><a href="#容器如何挂载" class="headerlink" title="容器如何挂载"></a>容器如何挂载</h5><p><img data-src="/../../../../upload/2022/03/image-1c833322c9c343a08c711485bff65f6d.png" alt="image.png"></p>
<p>每一个容器里面的内容，支持三种挂载方式：</p>
<ol>
<li>docker 自动在外部创建文件夹自动挂载容器内部指定的文件夹内容（Dockerfile VOLUME 指令的作用）</li>
<li>自己在外部创建文件夹，手动挂载</li>
<li>可以把数据挂载到内存中<br>–mount 挂载到 linux 宿主机，手动挂载（不用了）<br>-v 可以自动挂载，到 linux 主机或者 docker 自动管理的这一部分区域</li>
</ol>
<p>Volumes(卷)：存储在主机文件系统的一部分中，该文件系统由 Docker 管理（在 Linux 上是 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;），非 Docker 进程不应修改文件系统的这一部分，卷是在 Docker 中持久存储数据的最佳方法<br>Bind mounts(绑定挂载)：可以在任何地方存储在主机系统上，它们甚至可能是重要的系统文件或目录，Docker 主机或 Docker 容器上的非 Docker 进程可以随时对其进行修改<br>tmpfs mounts(临时挂载)：仅存储在主机系统的内存中，并且永远不会写入主机系统的文件系统</p>
<h6 id="volume-卷"><a href="#volume-卷" class="headerlink" title="volume(卷)"></a>volume(卷)</h6><p>匿名卷使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -dP -v :/etc/nginx nginx</span><br><span class="line"><span class="comment"># docker将创建出匿名卷，并保存容器 /etc/nginx 下面的内容</span></span><br><span class="line"><span class="comment"># -v 宿主机:容器里的目录</span></span><br></pre></td></tr></table></figure>

<p>具名卷使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -dP -v nginx:/etc/nginx nginx</span><br><span class="line"><span class="comment"># docker 将创建出名为 nginx 的卷，并保存容器 /etc/nginx 下面的内容</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果将空卷装入存在文件或目录的容器中的目录中，则容器中的内容（复制）到该卷中，如果启动一个容器并指定一个尚不存在的卷，则会创建一个空卷<br>-v 宿主机绝对路径:Docker容器内部绝对路径：叫挂载，这个有空挂载问题<br>-v 不以 &#x2F; 开头的路径:Docker容器内部绝对路径：叫绑定（docker 会自动管理，docker 不会把他当前目录，而把它当前卷）</p>
</blockquote>
<p>nginx 测试 html 挂载几种不同情况：<br>不挂载 效果：访问默认欢迎页<br>-v &#x2F;root&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 效果：访问 forbidden<br>-v html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro 效果：访问默认欢迎页<br>-v &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 效果：匿名卷（什么都不写也不要加冒号，直接写容器内的目录）</p>
<h6 id="bind-mount"><a href="#bind-mount" class="headerlink" title="bind mount"></a>bind mount</h6><blockquote>
<p>如果将绑定安装或非空卷安装到存在某些文件或目录的容器中的目录中，则这些文件或目录会被安装遮盖，就像您将文件保存到 Linux 主机上的 &#x2F;mnt 中一样，然后 将 USB 驱动器安装到 &#x2F; mnt 中，在卸载 USB 驱动器之前，&#x2F;mnt的内容将被 USB 驱动器的内容遮盖，被遮盖的文件不会被删除或更改，但是在安装绑定安装或卷时将无法访问<br>总结：外部目录覆盖内部容器目录内容，但不是修改，所以谨慎，外部空文件夹挂载方式也会导致容器内部是空文件夹</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -dP -v /my/nginx:/etc/nginx:ro nginx</span><br><span class="line"><span class="comment"># bind mount 和 volumes 的方式写法区别在于所有以 / 开始的都认为是 bind mount，不以 / 开始的都认为是 volumes</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>警惕 bind mount 方式，文件挂载没有在外部准备好内容而导致的容器启动失败问题</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一行命令启动 nginx，并且配置文件和 html 页面，需要知道卷的位置才能改</span></span><br><span class="line">docker run -d -P -v nginxconf:/etc/nginx/ -v nginxpage:/usr/share/nginx/html nginx</span><br><span class="line"><span class="comment"># 想要实现 docker run -d -P -v /root/nginxconf:/etc/nginx/ -v /root/nginxhtml:/usr/share/nginx/html --name=nginx999 nginx</span></span><br><span class="line"><span class="comment"># 1、提前准备好东西 目录 nginxconf，目录里面的配置文件都放里面，再调用命令</span></span><br><span class="line"><span class="comment"># 2、docker cp nginxdemo:/etc/nginx /root/nginxconf # 注意/的使用</span></span><br><span class="line"><span class="comment"># 3、docker run -d -P -v /root/nginxconf:/etc/nginx/ -v /root/nginxhtml:/usr/share/nginx/html --name=nginx999 nginx</span></span><br></pre></td></tr></table></figure>

<h6 id="管理卷"><a href="#管理卷" class="headerlink" title="管理卷"></a>管理卷</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create xxx：创建卷名</span><br><span class="line">docker volume inspect xxx：查询卷详情</span><br><span class="line">docker volume <span class="built_in">ls</span>: 列出所有卷</span><br><span class="line">docker volume prune: 移除无用卷</span><br></pre></td></tr></table></figure>

<h6 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h6><blockquote>
<p>docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-：把容器里面的复制出来<br>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH：把外部的复制进去</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SRC_PATH 指定为一个文件</span><br><span class="line">    DEST_PATH 不存在：文件名为 DEST_PATH ，内容为SRC的内容</span><br><span class="line">    DEST_PATH 不存在并且以 / 结尾：报错</span><br><span class="line">    DEST_PATH 存在并且是文件：目标文件内容被替换为SRC_PATH的文件内容。</span><br><span class="line">    DEST_PATH 存在并且是目录：文件复制到目录内，文件名为SRC_PATH指定的名字</span><br><span class="line">SRC_PATH 指定为一个目录</span><br><span class="line">    DEST_PATH 不存在： DEST_PATH 创建文件夹，复制源文件夹内的所有内容</span><br><span class="line">    DEST_PATH 存在是文件：报错</span><br><span class="line">    DEST_PATH 存在是目录</span><br><span class="line">        SRC_PATH 不以 /. 结束：源文件夹复制到目标里面</span><br><span class="line">        SRC_PATH 以 /. 结束：源文件夹里面的内容复制到目标里面</span><br><span class="line">    自动创建文件夹不会做递归。把父文件夹做好</span><br><span class="line">[root@lfy ~]<span class="comment"># docker cp index.html mynginx4:/usr/share/nginx/html</span></span><br><span class="line">[root@lfy ~]<span class="comment"># docker cp mynginx4:/etc/nginx/nginx.conf nginx.conf</span></span><br></pre></td></tr></table></figure>

<h4 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h4><h5 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name hello-mysql mysql:5.7</span><br></pre></td></tr></table></figure>

<h5 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h5><p>–link name:alias，name 连接容器的名称，alias 连接的别名</p>
<p>场景：我们无需暴露 mysql 的情况下，让 web 应用使用 mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">docker run -d --<span class="built_in">link</span> mysql01:mysql --name tomcat tomcat:7</span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat bash</span><br><span class="line"><span class="built_in">cat</span> /etc/hosts</span><br><span class="line">ping mysql</span><br></pre></td></tr></table></figure>

<h5 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h5><h6 id="默认网络原理"><a href="#默认网络原理" class="headerlink" title="默认网络原理"></a>默认网络原理</h6><p>Docker 使用 Linux 桥接，在宿主机虚拟一个 Docker 容器网桥(docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关<br>因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信</p>
<p>Docker 容器网络就很好的利用了 Linux 虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫 veth pair），Docker 中的网络接口默认都是虚拟的接口，虚拟接口的优势就是转发效率极高（因为 Linux是在内核中进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多</p>
<h6 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h6><table>
<thead>
<tr>
<th align="center">网络模式</th>
<th align="center">配置</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bridge 模式</td>
<td align="center">–net&#x3D;bridge</td>
<td align="center">默认值，在 Docker 网桥 docker0 上为容器创建新的网络栈</td>
</tr>
<tr>
<td align="center">none 模式</td>
<td align="center">–net&#x3D;none</td>
<td align="center">不配置网络，用户可以稍后进入容器，自行配置</td>
</tr>
<tr>
<td align="center">container 模式</td>
<td align="center">–net&#x3D;container:name&#x2F;id</td>
<td align="center">容器和另外一个容器共享 Network namespace，kubernetes 中的 pod 就是多个容器共享一个 Network namespace</td>
</tr>
<tr>
<td align="center">host 模式</td>
<td align="center">–net&#x3D;host</td>
<td align="center">容器和宿主机共享 Network namespace</td>
</tr>
<tr>
<td align="center">用户自定义</td>
<td align="center">–net&#x3D;mynet</td>
<td align="center">用户自己使用network相关命令定义网络，创建容器的时候可以指定为自己定义的网络</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>DockerCompose常见问题整理</title>
    <url>/2022/01/08/130334.html</url>
    <content><![CDATA[<blockquote>
<p>Docker Compose 常见问题整理</p>
</blockquote>
<span id="more"></span>

<h4 id="容器内部无法通信"><a href="#容器内部无法通信" class="headerlink" title="容器内部无法通信"></a>容器内部无法通信</h4><p>将容器处于同一个自定义网络即可</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    networks:</span><br><span class="line">      - test-network</span><br><span class="line">  nacos:</span><br><span class="line">    networks:</span><br><span class="line">      - test-network</span><br><span class="line">      </span><br><span class="line">networks:</span><br><span class="line">  test-network:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure>

<h4 id="MySQL-无法执行初始化-sql"><a href="#MySQL-无法执行初始化-sql" class="headerlink" title="MySQL 无法执行初始化 sql"></a>MySQL 无法执行初始化 sql</h4><blockquote>
<p>需要保证 mysql&#x2F;data 目录为空</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - ./mysql/initdb:/docker-entrypoint-initdb.d</span><br></pre></td></tr></table></figure>

<h4 id="WARNING，需要设置-‘vm-overcommit-memory-1’"><a href="#WARNING，需要设置-‘vm-overcommit-memory-1’" class="headerlink" title="WARNING，需要设置 ‘vm.overcommit_memory &#x3D; 1’"></a>WARNING，需要设置 ‘vm.overcommit_memory &#x3D; 1’</h4><p>提示：<code>WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#39;vm.overcommit_memory = 1&#39; to /etc/sysctl.conf and then reboot or run the command &#39;sysctl vm.overcommit_memory=1&#39; for this to take effect.</code><br>解决：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">wsl --list --verbose</span><br><span class="line">wsl -d docker-deskstop</span><br><span class="line">sysctl vm.overcommit_memory=1</span><br></pre></td></tr></table></figure>

<h4 id="Redis-指定配置文件启动失败"><a href="#Redis-指定配置文件启动失败" class="headerlink" title="Redis 指定配置文件启动失败"></a>Redis 指定配置文件启动失败</h4><p>原因：配置文件设置了 daemonize yes，与 compose up -d 冲突<br>解决：设置 daemonize no</p>
<h4 id="端口不可用"><a href="#端口不可用" class="headerlink" title="端口不可用"></a>端口不可用</h4><blockquote>
<p>netstat -ano | findstr 8080，查看端口是否真的没有占用</p>
</blockquote>
<p>提示：<code>Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:8080 -&gt; 0.0.0.0:0: listen tcp 0.0.0.0:8080: bind: An attempt was made to access a socket in a way forbidden by its access p ermissions.</code></p>
<p>解决：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://medium.com/@sevenall/completely-solve-the-problem-of-docker-containers-not-starting-or-running-on-windows-10-due-to-port-57f16ed6143</span><br><span class="line"></span><br><span class="line">netsh int ipv4 set dynamic tcp start=49152 num=16384</span><br><span class="line">netsh int ipv6 set dynamic tcp start=49152 num=16384</span><br><span class="line">重启电脑</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Frp配置远程桌面</title>
    <url>/2022/07/06/171457.html</url>
    <content><![CDATA[<blockquote>
<p>由于一些远程软件的免费版会存在限速的问题，所以使用 frp 来实现远程桌面是一个不错的选择</p>
</blockquote>
<span id="more"></span>

<h4 id="服务器安装配置"><a href="#服务器安装配置" class="headerlink" title="服务器安装配置"></a>服务器安装配置</h4><ol>
<li><p><a href="https://github.com/fatedier/frp/releases/download/v0.43.0/frp_0.43.0_linux_amd64.tar.gz">下载 frp 服务端</a></p>
</li>
<li><p>解压后修改 frps.ini</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frp 服务端口及 token</span></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line"> </span><br><span class="line"><span class="comment"># frp 后台管理账号</span></span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置日志配置文件夹</span></span><br><span class="line">log_file = /usr/local/web/frp/frps.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>注册为服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/frp.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=The nginx HTTP and reverse proxy server</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/web/frp/frps -c /usr/local/web/frp/frps.ini</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">TimeoutStopSec=5</span><br><span class="line">KillMode=process</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=inherit</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start frp <span class="comment"># 启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frp <span class="comment"># 开机自启</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>开启防火墙端口并配置安全组规则</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=7000/tcp --add-port=7500/tcp --add-port=13389/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>访问控制台，ip:7500</li>
</ol>
<h4 id="客户端安装配置"><a href="#客户端安装配置" class="headerlink" title="客户端安装配置"></a>客户端安装配置</h4><ol>
<li><p><a href="https://github.com/fatedier/frp/releases/download/v0.43.0/frp_0.43.0_windows_amd64.zip">下载 frp 客户端</a></p>
</li>
<li><p>解压后修改 frpc.ini</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 服务器的 ip</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line"></span><br><span class="line">[rdp1]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 3389</span><br><span class="line">remote_port = 13389</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>启动服务，frpc.exe -c frpc.ini</p>
</li>
<li><p>使用 Win 远程桌面测试是否正常连接</p>
</li>
<li><p>注册为服务，<a href="https://github.com/winsw/winsw/releases/download/v3.0.0-alpha.10/WinSW-x64.exe">下载 WinSW</a> 后重命名为 winsw.exe，新建 winsw.xml，执行 winsw.exe install 后启动服务</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>frp<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>frp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>frp远程控制客户端服务<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>C:\wenqu\frp_0.43.0_windows_amd64\frpc.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-c C:\wenqu\frp_0.43.0_windows_amd64\frpc.ini<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> <span class="attr">delay</span>=<span class="string">&quot;60 sec&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> <span class="attr">delay</span>=<span class="string">&quot;120 sec&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logmode</span>&gt;</span>append<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logpath</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Win-家庭版无法远程"><a href="#Win-家庭版无法远程" class="headerlink" title="Win 家庭版无法远程"></a>Win 家庭版无法远程</h4><h5 id="使用-rdpwrap"><a href="#使用-rdpwrap" class="headerlink" title="使用 rdpwrap"></a>使用 rdpwrap</h5><ol>
<li><p>下载 <a href="https://github.com/stascorp/rdpwrap/archive/refs/tags/v1.6.2.zip">rdpwrap</a> 及 <a href="https://github.com/sebaxakerhtc/rdpwrap.ini/blob/master/rdpwrap.ini">ini 文件</a></p>
</li>
<li><p>执行 <code>install.bat</code>（以下命令均以管理员身份运行）</p>
</li>
<li><p>cmd 执行 <code>net stop termservice</code></p>
</li>
<li><p>将下载的 ini 文件替换掉 <code>C:\Program Files\RDP Wrapper\rdpwrap.ini</code></p>
</li>
<li><p>cmd 执行 <code>net stop termservice</code></p>
</li>
<li><p>执行 <code>RDPConf.exe</code>，看是否全绿色，如果是则执行 <code>RDPCheck.exe</code> 看能否正常访问，不是则重启系统</p>
</li>
<li><p>如果还是不行，查看 rdpwrap 的 <a href="https://github.com/stascorp/rdpwrap/issues">issues</a> 或者 <a href="https://github.com/sebaxakerhtc/rdpwrap.ini">此项目</a> 中有无你系统版本对应的 ini 文件</p>
</li>
</ol>
<h5 id="升级为专业版"><a href="#升级为专业版" class="headerlink" title="升级为专业版"></a>升级为专业版</h5><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1598987&highlight=win10%D7%A8%D2%B5%EF%BF%BD%EF%BF%BD">win10专业版密钥</a></p>
]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Jira安装破解</title>
    <url>/2022/08/25/153839.html</url>
    <content><![CDATA[<blockquote>
<p>Jira 安装破解</p>
</blockquote>
<span id="more"></span>

<h4 id="下载-Jira-并安装"><a href="#下载-Jira-并安装" class="headerlink" title="下载 Jira 并安装"></a>下载 <a href="https://downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-8.22.0-x64.bin">Jira</a> 并安装</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@VM-16-8-centos web]# sh atlassian-jira-software-8.22.0-x64.bin </span><br><span class="line">Unpacking JRE ...</span><br><span class="line">Starting Installer ...</span><br><span class="line"></span><br><span class="line">This will install Jira Software 8.22.0 on your computer.</span><br><span class="line">OK [o, Enter], Cancel [c]</span><br><span class="line">o # 确认安装</span><br><span class="line">Click Next to continue, or Cancel to exit Setup.</span><br><span class="line"></span><br><span class="line">Choose the appropriate installation or upgrade option.</span><br><span class="line">Please choose one of the following:</span><br><span class="line">Express Install (use default settings) [1], Custom Install (recommended for advanced users) [2, Enter], Upgrade an existing Jira installation [3]</span><br><span class="line">2 # 自定义安装</span><br><span class="line"></span><br><span class="line">Select the folder where you would like Jira Software to be installed.</span><br><span class="line">Where should Jira Software be installed?</span><br><span class="line">[/opt/atlassian/jira]</span><br><span class="line">/usr/local/atlassian/jira # 安装目录</span><br><span class="line"></span><br><span class="line">Default location for Jira Software data</span><br><span class="line">[/var/atlassian/application-data/jira]</span><br><span class="line">/usr/local/atlassian/application-data/jira  # 数据存储目录</span><br><span class="line"></span><br><span class="line">Configure which ports Jira Software will use.</span><br><span class="line">Jira requires two TCP ports that are not being used by any other</span><br><span class="line">applications on this machine. The HTTP port is where you will access Jira</span><br><span class="line">through your browser. The Control port is used to startup and shutdown Jira.</span><br><span class="line">Use default ports (HTTP: 8080, Control: 8005) - Recommended [1, Enter], Set custom value for HTTP and Control ports [2]</span><br><span class="line">2 # 自定义端口</span><br><span class="line">HTTP Port Number</span><br><span class="line">[8080]</span><br><span class="line">9100 # 浏览器访问端口</span><br><span class="line">Control Port Number</span><br><span class="line">[8005]</span><br><span class="line">9105 # 控制端口</span><br><span class="line"></span><br><span class="line">Jira can be run in the background.</span><br><span class="line">You may choose to run Jira as a service, which means it will start</span><br><span class="line">automatically whenever the computer restarts.</span><br><span class="line">Install Jira as Service?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y # 安装 Jira 服务</span><br><span class="line"></span><br><span class="line">Details on where Jira Software will be installed and the settings that will be used.</span><br><span class="line">Installation Directory: /usr/local/atlassian/jira </span><br><span class="line">Home Directory: /usr/local/atlassian/application-data/jira </span><br><span class="line">HTTP Port: 9100 </span><br><span class="line">RMI Port: 9105 </span><br><span class="line">Install as service: Yes </span><br><span class="line">Install [i, Enter], Exit [e]</span><br><span class="line">i # 安装</span><br><span class="line"></span><br><span class="line">Extracting files ...</span><br><span class="line">                                                                           </span><br><span class="line"></span><br><span class="line">Please wait a few moments while Jira Software is configured.</span><br><span class="line"></span><br><span class="line">Installation of Jira Software 8.22.0 is complete</span><br><span class="line">Start Jira Software 8.22.0 now?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">n  # 不启动</span><br><span class="line"></span><br><span class="line">Installation of Jira Software 8.22.0 is complete</span><br><span class="line">Your installation of Jira Software 8.22.0 is now ready.</span><br><span class="line">Finishing installation ...</span><br></pre></td></tr></table></figure>

<h4 id="下载对应的-MySQL-驱动包并配置（放到-jira-lib-中）"><a href="#下载对应的-MySQL-驱动包并配置（放到-jira-lib-中）" class="headerlink" title="下载对应的 MySQL 驱动包并配置（放到 &#x2F;jira&#x2F;lib 中）"></a>下载对应的 <a href="https://www.alipan.com/s/KBXiQ8sQskH">MySQL</a> 驱动包并配置（放到 &#x2F;jira&#x2F;lib 中）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drop database jiradb816;</span><br><span class="line">create user <span class="string">&#x27;jira&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;jira&#x27;</span>;</span><br><span class="line">CREATE DATABASE jiradb816 CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</span><br><span class="line">GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,ALTER,INDEX on jiradb816.* TO <span class="string">&#x27;jira&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="下载-atlassian-agent-破解包"><a href="#下载-atlassian-agent-破解包" class="headerlink" title="下载 atlassian-agent 破解包"></a>下载 <a href="https://www.alipan.com/s/kMpuWvNcUqy">atlassian-agent</a> 破解包</h4><ol>
<li>在 jira&#x2F;bin&#x2F;setenv.sh 中追加命令后启动 jira，&#x2F;jira&#x2F;bin&#x2F;startup.sh</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;-javaagent:/usr/local/atlassian/data/atlassian-agent.jar <span class="variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>访问 ip:9100 后按提示操作即可</p>
</li>
<li><p>获取到 Server ID 后，回到服务器执行 java -jar atlassian-agent.jar -p jira -m <a href="mailto:&#x63;&#x68;&#101;&#110;&#107;&#x61;&#105;&#x78;&#105;&#110;&#x31;&#50;&#49;&#50;&#49;&#64;&#49;&#54;&#51;&#46;&#99;&#111;&#109;">&#x63;&#x68;&#101;&#110;&#107;&#x61;&#105;&#x78;&#105;&#110;&#x31;&#50;&#49;&#50;&#49;&#64;&#49;&#54;&#51;&#46;&#99;&#111;&#109;</a> -n test -o wenqu -s BZ3X-3JAN-GV35-3UJG（注意替换 Server ID），复制 License Key 到页面继续验证即可</p>
</li>
</ol>
<h4 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h4><ul>
<li>You have specified a database that is not empty, please specify an empty database. If you want to upgrade an existing installation, please follow these instructions instead.<br>解决方案：<a href="https://jira.atlassian.com/browse/JRASERVER-72389">https://jira.atlassian.com/browse/JRASERVER-72389</a></li>
</ul>
]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Jira</tag>
      </tags>
  </entry>
  <entry>
    <title>Frp配置内网穿透</title>
    <url>/2022/08/31/104700.html</url>
    <content><![CDATA[<blockquote>
<p>Frp 配置内网穿透</p>
</blockquote>
<span id="more"></span>

<h4 id="服务器端配置文件-frps-ini"><a href="#服务器端配置文件-frps-ini" class="headerlink" title="服务器端配置文件 frps.ini"></a>服务器端配置文件 frps.ini</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># frp 服务端口及 token</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line"> </span><br><span class="line"># frp 后台管理账号</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line"> </span><br><span class="line"># 配置日志配置文件夹</span><br><span class="line">log_file = /usr/local/web/frp/frps.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br></pre></td></tr></table></figure>

<h4 id="修改-Nginx-配置并开放端口"><a href="#修改-Nginx-配置并开放端口" class="headerlink" title="修改 Nginx 配置并开放端口"></a>修改 Nginx 配置并开放端口</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header HOST $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:16389;</span><br><span class="line">    &#125;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name test.abc.ink;</span><br><span class="line">    ssl_certificate /etc/tencentssl/test.abc.ink_bundle.crt;</span><br><span class="line">    ssl_certificate_key /etc/tencentssl/test.abc.ink.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="客户端配置-frpc-ini"><a href="#客户端配置-frpc-ini" class="headerlink" title="客户端配置 frpc.ini"></a>客户端配置 frpc.ini</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 服务器的 ip</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line"></span><br><span class="line">[内网穿透]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8088</span><br><span class="line">remote_port = 16389</span><br></pre></td></tr></table></figure>

<blockquote>
<p>8088 为本地端口，16389 为服务器开放端口</p>
</blockquote>
<h4 id="测试-https-test-abc-ink"><a href="#测试-https-test-abc-ink" class="headerlink" title="测试 https://test.abc.ink"></a>测试 <a href="https://test.abc.ink/">https://test.abc.ink</a></h4>]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Jar文件打包成exe文件</title>
    <url>/2022/09/16/165812.html</url>
    <content><![CDATA[<blockquote>
<p>Jar 文件打包成 exe 文件</p>
</blockquote>
<span id="more"></span>

<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ol>
<li><p>准备一个 jar包</p>
</li>
<li><p>下载 <a href="https://www.ej-technologies.com/download/exe4j/files">exe4j</a> 和 <a href="https://jrsoftware.org/isdl.php">innosetup</a></p>
</li>
</ol>
<h4 id="exe4j-使用"><a href="#exe4j-使用" class="headerlink" title="exe4j 使用"></a>exe4j 使用</h4><p>许可证密钥：<code>L-g782dn2d-1f1yqxx1rv1sqd</code></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-11-51.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_15-44-21.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_15-44-15.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_15-53-06.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_15-55-43.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_15-56-34.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_15-58-50.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_15-59-24.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-01-30.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-01-48.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-02-21.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-02-26.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-02-40.png" alt="image.png"></p>
<p>查看你的文件输出目录，已经有了 demo.exe 这个文件了，如果你有 jre 环境，则可以正常启动此程序</p>
<h4 id="innosetup-使用"><a href="#innosetup-使用" class="headerlink" title="innosetup 使用"></a>innosetup 使用</h4><p>innosetup 的作用是为了让没有 jre 环境的电脑使用此 exe 文件</p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-15-00.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-15-21.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-16-26.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-16-47.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-17-22.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-17-47.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-17-53.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-18-04.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-18-18.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-18-59.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-19-26.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-19-40.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-20-14.png" alt="image.png"></p>
<p>添加 <code>#define MyJreName &quot;jre&quot;</code></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-26-57.png" alt="image.png"></p>
<p>添加 <code>Source: &quot;自己本地JRE或JDK路径\*&quot;; DestDir: &quot;&#123;app&#125;\&#123;\#MyJreName&#125;&quot;; Flags: ignoreversion recursesubdirs createallsubdirs</code></p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-36-32.png" alt="image.png"></p>
<p>修改完成后选择编码脚本，可以选择保存脚本，以便下次使用</p>
<p><img data-src="/../../../../upload/2022/09/Snipaste_2022-09-16_16-28-25.png" alt="image.png"></p>
<p>绿色滚动条结束后，在文件输出目录可以看到已经有 mysetup.exe 这个文件了，安装执行即可</p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用软件安装脚本</title>
    <url>/2022/11/30/103745.html</url>
    <content><![CDATA[<blockquote>
<p>注意：使用 source 脚本名来执行，sh 会新创建子 shell，子 shell 设置的环境变量不会影响到父 shell</p>
</blockquote>
<span id="more"></span>

<h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">software_dir=<span class="string">&quot;/usr/local/software&quot;</span></span><br><span class="line">mysql_package=<span class="string">&quot;mysql-8.0.26-linux-glibc2.12-x86_64&quot;</span></span><br><span class="line">mysql_package_xz=<span class="variable">$&#123;mysql_package&#125;</span>.tar.xz</span><br><span class="line">mysql_package_url=<span class="string">&quot;https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.26-linux-glibc2.12-x86_64.tar.xz&quot;</span></span><br><span class="line">mysql_dir=<span class="string">&quot;/usr/local/mysql&quot;</span></span><br><span class="line">mysql_data_dir=<span class="variable">$&#123;mysql_dir&#125;</span>/data</span><br><span class="line">mysql_log_dir=<span class="variable">$&#123;mysql_dir&#125;</span>/log</span><br><span class="line">mysql_user=<span class="string">&quot;mysql&quot;</span></span><br><span class="line">mysql_user_group=<span class="string">&quot;mysql&quot;</span></span><br><span class="line">mysql_username=<span class="string">&quot;root&quot;</span> <span class="comment"># 不可改</span></span><br><span class="line">mysql_password=<span class="string">&quot;&quot;</span></span><br><span class="line">mysql_init_password=<span class="string">&quot;admin123456&quot;</span></span><br><span class="line">mysql_profile=<span class="string">&quot;/etc/profile.d/mysql.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_dir</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;创建文件夹:<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩包存储目录</span></span><br><span class="line">create_dir <span class="variable">$software_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$software_dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql安装包是否存在，不存在则下载</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$&#123;software_dir&#125;</span><span class="string">&#x27;/&#x27;</span><span class="variable">$&#123;mysql_package_xz&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="built_in">command</span> -v wget; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;安装wget命令&quot;</span></span><br><span class="line">        yum -y install wget &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=====&gt;下载mysql安装包到:<span class="variable">$software_dir</span>&quot;</span></span><br><span class="line">    wget <span class="variable">$mysql_package_url</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;解压缩mysql安装包&quot;</span></span><br><span class="line">tar -xf <span class="variable">$mysql_package_xz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件并创建目录</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$mysql_package</span> <span class="variable">$mysql_dir</span></span><br><span class="line">create_dir <span class="variable">$mysql_data_dir</span></span><br><span class="line">create_dir <span class="variable">$mysql_log_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$mysql_dir</span></span><br><span class="line"></span><br><span class="line">egrep <span class="string">&quot;^<span class="variable">$mysql_user_group</span>&quot;</span> /etc/group &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=====&gt;创建mysql用户组&quot;</span></span><br><span class="line">    groupadd <span class="variable">$mysql_user_group</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">egrep <span class="string">&quot;^<span class="variable">$mysql_user</span>&quot;</span> /etc/passwd &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=====&gt;创建mysql用户&quot;</span></span><br><span class="line">    useradd -g <span class="variable">$mysql_user_group</span> <span class="variable">$mysql_user</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;添加mysql用户权限&quot;</span></span><br><span class="line"><span class="built_in">chown</span> -R <span class="variable">$&#123;mysql_user_group&#125;</span><span class="string">&#x27;.&#x27;</span><span class="variable">$&#123;mysql_user&#125;</span> .</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;修改my.cnf配置文件&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[mysqld]</span></span><br><span class="line"><span class="string"># mysql 安装根目录</span></span><br><span class="line"><span class="string">basedir=<span class="variable">$mysql_dir</span></span></span><br><span class="line"><span class="string"># mysql 数据文件所在位置</span></span><br><span class="line"><span class="string">datadir=<span class="variable">$mysql_data_dir</span></span></span><br><span class="line"><span class="string"># socket 文件所在位置</span></span><br><span class="line"><span class="string">socket=<span class="variable">$mysql_dir</span>/mysql.sock</span></span><br><span class="line"><span class="string"># 日志文件</span></span><br><span class="line"><span class="string">log-error=<span class="variable">$mysql_log_dir</span>/mysql.log</span></span><br><span class="line"><span class="string"># pid</span></span><br><span class="line"><span class="string">pid-file=<span class="variable">$mysql_dir</span>/mysql.pid</span></span><br><span class="line"><span class="string"># 数据默认字符集</span></span><br><span class="line"><span class="string">character-set-server=utf8mb4</span></span><br><span class="line"><span class="string"># 数据库字符集对应一些排序等规则，注意要和 character-set-server 对应</span></span><br><span class="line"><span class="string">collation-server=utf8mb4_general_ci</span></span><br><span class="line"><span class="string"># 端口</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string"># sql 模式</span></span><br><span class="line"><span class="string">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span></span><br><span class="line"><span class="string"># 最大连接数</span></span><br><span class="line"><span class="string">max_connections=2048</span></span><br><span class="line"><span class="string"># 最大错误连接数</span></span><br><span class="line"><span class="string">max_connect_errors=1000</span></span><br><span class="line"><span class="string"># mysql 打开的文件描述符限制，当 open_files_limit 没有被配置的时候，比较 max_connections*5 和 ulimit -n 的值，哪个大用哪个</span></span><br><span class="line"><span class="string"># 当 open_file_limit 被配置的时候，比较 open_files_limit 和 max_connections*5 的值，哪个大用哪个</span></span><br><span class="line"><span class="string">open_files_limit = 65535</span></span><br><span class="line"><span class="string"># mysql 服务的唯一编号，每个 mysql 服务 id 需唯一</span></span><br><span class="line"><span class="string">server-id=1</span></span><br><span class="line"><span class="string"># sql 数据包发送的大小</span></span><br><span class="line"><span class="string">max_allowed_packet=128M</span></span><br><span class="line"><span class="string"># mysql 连接闲置超过一定时间后将会被强行关闭，默认为 8 个小时，interactive_timeout 参数需要同时配置才能生效</span></span><br><span class="line"><span class="string">interactive_timeout=1800</span></span><br><span class="line"><span class="string">wait_timeout=1800</span></span><br><span class="line"><span class="string"># 慢查询sql日志设置</span></span><br><span class="line"><span class="string">slow_query_log=1</span></span><br><span class="line"><span class="string">slow_query_log_file=<span class="variable">$mysql_log_dir</span>/mysqld_slow.log</span></span><br><span class="line"><span class="string"># 慢查询执行的秒数，必须达到此值可被记录</span></span><br><span class="line"><span class="string">long_query_time=2</span></span><br><span class="line"><span class="string"># 检索的行数必须达到此值才可被记为慢查询</span></span><br><span class="line"><span class="string">min_examined_row_limit=100</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[client]</span></span><br><span class="line"><span class="string">socket=<span class="variable">$mysql_dir</span>/mysql.sock</span></span><br><span class="line"><span class="string">default-character-set=utf8mb4&quot;</span> &gt; /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;数据库初始化&quot;</span></span><br><span class="line">./bin/mysqld --user=<span class="variable">$mysql_user</span> --basedir=<span class="variable">$mysql_dir</span> --datadir=<span class="variable">$mysql_data_dir</span> --initialize</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;设置服务开机自启动&quot;</span></span><br><span class="line"><span class="built_in">cp</span> -a <span class="variable">$&#123;mysql_dir&#125;</span>/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.d/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;配置环境变量&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MYSQL_HOME=<span class="variable">$mysql_dir</span></span></span><br><span class="line"><span class="string">PATH=\$PATH:\$MYSQL_HOME/bin&quot;</span> &gt; <span class="variable">$mysql_profile</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$mysql_profile</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;启动mysql服务&quot;</span></span><br><span class="line">systemctl restart mysql &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;设置mysql配置，修改密码，远程访问&quot;</span></span><br><span class="line">mysql_password=`awk <span class="string">&#x27;/A temporary password/&#123;print $NF&#125;&#x27;</span> ./log/mysql.log`</span><br><span class="line">mysql -uroot -p<span class="string">&quot;<span class="variable">$mysql_password</span>&quot;</span> -e <span class="string">&quot;</span></span><br><span class="line"><span class="string">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;<span class="variable">$mysql_init_password</span>&#x27;;</span></span><br><span class="line"><span class="string">use mysql;</span></span><br><span class="line"><span class="string">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27; limit 1;</span></span><br><span class="line"><span class="string">flush privileges;&quot;</span> --connect-expired-password &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;开启3306端口&quot;</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">firewall-cmd --reload &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 $(ps -ef | grep mysql | awk <span class="string">&#x27;&#123;printf &quot; &quot; $2&#125;&#x27;</span>) 2&gt;/dev/null</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/mysql</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/profile.d/mysql.sh</span><br></pre></td></tr></table></figure>

<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">software_dir=<span class="string">&quot;/usr/local/software&quot;</span></span><br><span class="line">redis_package=<span class="string">&quot;redis-6.2.6&quot;</span></span><br><span class="line">redis_package_gz=<span class="variable">$&#123;redis_package&#125;</span>.tar.gz</span><br><span class="line">redis_package_url=<span class="string">&quot;https://download.redis.io/releases/redis-6.2.6.tar.gz&quot;</span></span><br><span class="line">redis_dir=<span class="string">&quot;/usr/local/redis&quot;</span></span><br><span class="line">redis_initd=<span class="string">&quot;/etc/init.d/redis&quot;</span></span><br><span class="line">redis_config=<span class="variable">$&#123;redis_dir&#125;</span>/etc/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_dir</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;创建文件夹:<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩包存储目录</span></span><br><span class="line">create_dir <span class="variable">$software_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$software_dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis安装包是否存在，不存在则下载</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$&#123;software_dir&#125;</span><span class="string">&#x27;/&#x27;</span><span class="variable">$&#123;redis_package_gz&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="built_in">command</span> -v wget; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;安装wget命令&quot;</span></span><br><span class="line">        yum -y install wget &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=====&gt;下载redis安装包到:<span class="variable">$software_dir</span>&quot;</span></span><br><span class="line">    wget --no-check-certificate <span class="variable">$redis_package_url</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;解压缩redis安装包&quot;</span></span><br><span class="line">tar -xf <span class="variable">$redis_package_gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$redis_package</span> <span class="variable">$redis_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$redis_dir</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;安装redis必要依赖&quot;</span></span><br><span class="line">yum -y install gcc gcc-c++ &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;编译安装redis&quot;</span></span><br><span class="line">make &gt;/dev/null 2&gt;&amp;1 &amp;&amp; make install &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件统一管理</span></span><br><span class="line"><span class="built_in">mkdir</span> etc bin</span><br><span class="line"><span class="built_in">mv</span> redis.conf <span class="variable">$&#123;redis_dir&#125;</span>/etc</span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="built_in">mv</span> mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server <span class="variable">$&#123;redis_dir&#125;</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;设置redis自启动&quot;</span></span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$&#123;redis_dir&#125;</span>/utils/redis_init_script <span class="variable">$redis_initd</span></span><br><span class="line">sed <span class="string">&#x27;s:EXEC=/usr/local/bin/redis-server:EXEC=/usr/local/redis/bin/redis-server:&#x27;</span> -i <span class="variable">$redis_initd</span></span><br><span class="line">sed <span class="string">&#x27;s:CLIEXEC=/usr/local/bin/redis-cli:CLIEXEC=/usr/local/redis/bin/redis-cli:&#x27;</span> -i <span class="variable">$redis_initd</span></span><br><span class="line">sed <span class="string">&#x27;19c CONF=/usr/local/redis/etc/redis.conf&#x27;</span> -i <span class="variable">$redis_initd</span></span><br><span class="line">chkconfig redis on</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;修改redis配置&quot;</span></span><br><span class="line">sed <span class="string">&#x27;s:daemonize no:daemonize yes:&#x27;</span> -i <span class="variable">$redis_config</span></span><br><span class="line">sed <span class="string">&#x27;s:bind 127.0.0.1:# bind 127.0.0.1:&#x27;</span> -i <span class="variable">$redis_config</span></span><br><span class="line">sed <span class="string">&#x27;s:# requirepass foobared:requirepass admin123456:&#x27;</span> -i <span class="variable">$redis_config</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;启动redis服务&quot;</span></span><br><span class="line">systemctl start redis &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;开启6379端口&quot;</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">firewall-cmd --reload &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">software_dir=<span class="string">&quot;/usr/local/software&quot;</span></span><br><span class="line">nginx_package=<span class="string">&quot;nginx-1.22.0&quot;</span></span><br><span class="line">nginx_package_gz=<span class="string">&quot;<span class="variable">$&#123;nginx_package&#125;</span>.tar.gz&quot;</span></span><br><span class="line">nginx_package_url=<span class="string">&quot;http://nginx.org/download/nginx-1.22.0.tar.gz&quot;</span></span><br><span class="line">nginx_dir=<span class="string">&quot;/usr/local/nginx&quot;</span></span><br><span class="line">nginx_log_dir=<span class="variable">$nginx</span>/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_dir</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;创建文件夹:<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩包存储目录</span></span><br><span class="line">create_dir <span class="variable">$software_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$software_dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql安装包是否存在，不存在则下载</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$&#123;software_dir&#125;</span><span class="string">&#x27;/&#x27;</span><span class="variable">$&#123;nginx_package_gz&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="built_in">command</span> -v wget; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;安装wget命令&quot;</span></span><br><span class="line">        yum -y install wget &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=====&gt;下载nginx安装包到:<span class="variable">$software_dir</span>&quot;</span></span><br><span class="line">    wget <span class="variable">$nginx_package_url</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;解压缩nginx安装包&quot;</span></span><br><span class="line">tar -xf <span class="variable">$nginx_package_gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到指定目录</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$nginx_package</span> <span class="variable">$nginx_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$nginx_dir</span></span><br><span class="line">create_dir <span class="variable">$nginx_log_dir</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;安装nginx必要依赖&quot;</span></span><br><span class="line">yum install -y gcc pcre pcre-devel openssl openssl-devel gd gd-devel &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;生成makefile&quot;</span></span><br><span class="line">./configure --prefix=<span class="variable">$nginx_dir</span>  \</span><br><span class="line">--conf-path=<span class="variable">$&#123;nginx_dir&#125;</span>/conf/nginx.conf  \</span><br><span class="line">--pid-path=<span class="variable">$&#123;nginx_dir&#125;</span>/nginx.pid  \</span><br><span class="line">--error-log-path=<span class="variable">$&#123;nginx_log_dir&#125;</span>/error.log  \</span><br><span class="line">--http-log-path=<span class="variable">$&#123;nginx_log_dir&#125;</span>/access.log  \</span><br><span class="line">--with-http_ssl_module          \</span><br><span class="line">--with-http_stub_status_module      \</span><br><span class="line">--with-http_gzip_static_module      \</span><br><span class="line">--with-stream             \</span><br><span class="line">--with-http_realip_module       \</span><br><span class="line">--with-http_flv_module          \</span><br><span class="line">--with-http_random_index_module     \</span><br><span class="line">--with-mail               \</span><br><span class="line">--with-pcre &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;编译安装nginx&quot;</span></span><br><span class="line">make &gt;/dev/null 2&gt;&amp;1 &amp;&amp; make install &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;设置开机自启&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[Unit]</span></span><br><span class="line"><span class="string">Description=nginx</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">ExecStart=<span class="variable">$&#123;nginx_dir&#125;</span>/sbin/nginx -c <span class="variable">$&#123;nginx_dir&#125;</span>/conf/nginx.conf</span></span><br><span class="line"><span class="string">ExecReload=<span class="variable">$&#123;nginx_dir&#125;</span>/sbin/nginx -s reload -c <span class="variable">$&#123;nginx_dir&#125;</span>/conf/nginx.conf</span></span><br><span class="line"><span class="string">ExecStop=<span class="variable">$&#123;nginx_dir&#125;</span>/sbin/nginx -s quit</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target&quot;</span> &gt; /usr/lib/systemd/system/nginx.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;启动nginx&quot;</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;开启80端口&quot;</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">firewall-cmd --reload &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h4 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">software_dir=<span class="string">&quot;/usr/local/software&quot;</span></span><br><span class="line">minio_dir=<span class="string">&quot;/usr/local/minio&quot;</span></span><br><span class="line">minio_username=<span class="string">&quot;admin&quot;</span></span><br><span class="line">minio_password=<span class="string">&quot;admin123456&quot;</span></span><br><span class="line">minio_url=<span class="string">&quot;https://dl.minio.io/server/minio/release/linux-amd64/minio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># minio是否存在，不存在则下载</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$&#123;software_dir&#125;</span>/minio ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="built_in">command</span> -v wget; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;安装wget命令&quot;</span></span><br><span class="line">        yum -y install wget &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=====&gt;下载minio到:<span class="variable">$software_dir</span>&quot;</span></span><br><span class="line">    wget <span class="variable">$minio_url</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="variable">$minio_dir</span> <span class="variable">$&#123;minio_dir&#125;</span>/config <span class="variable">$&#123;minio_dir&#125;</span>/data</span><br><span class="line"><span class="built_in">cp</span> minio <span class="variable">$minio_dir</span> &amp;&amp; <span class="built_in">cd</span> <span class="variable">$minio_dir</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;赋予权限&quot;</span></span><br><span class="line"><span class="built_in">chmod</span> +x minio</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;设置minio自启动&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[Unit]</span></span><br><span class="line"><span class="string">Description=minio</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Environment=\&quot;MINIO_ROOT_USER=<span class="variable">$minio_username</span>\&quot;</span></span><br><span class="line"><span class="string">Environment=\&quot;MINIO_ROOT_PASSWORD=<span class="variable">$minio_password</span>\&quot;</span></span><br><span class="line"><span class="string">ExecStart=<span class="variable">$minio_dir</span>/minio server --console-address=:9001 --config-dir <span class="variable">$minio_dir</span>/config <span class="variable">$minio_dir</span>/data</span></span><br><span class="line"><span class="string">ExecReload=&quot;</span>/bin/kill -s HUP <span class="string">&#x27;$MAINPID&#x27;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">ExecStop=&quot;</span>/bin/kill -s QUIT <span class="string">&#x27;$MAINPID&#x27;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">StandardOutput=<span class="variable">$minio_dir</span>/minio.log</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target&quot;</span> &gt; /usr/lib/systemd/system/minio.service</span><br><span class="line">systemctl <span class="built_in">enable</span> minio &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;启动minio，访问 ip:9001&quot;</span></span><br><span class="line">systemctl start minio</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;开启端口&quot;</span></span><br><span class="line">firewall-cmd --zone=public --add-port=9000-9001/tcp --permanent &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">firewall-cmd --reload &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">software_dir=<span class="string">&quot;/usr/local/software&quot;</span></span><br><span class="line">java_package=<span class="string">&quot;jdk-17.0.5&quot;</span></span><br><span class="line">java_package_gz=<span class="variable">$&#123;java_package&#125;</span>_linux-x64_bin.tar.gz</span><br><span class="line">java_package_url=<span class="string">&quot;https://download.oracle.com/java/17/archive/jdk-17.0.5_linux-x64_bin.tar.gz&quot;</span></span><br><span class="line">java_dir=<span class="string">&quot;/usr/local/java&quot;</span></span><br><span class="line">java_version=<span class="string">&quot;17&quot;</span></span><br><span class="line">java_profile=<span class="string">&quot;/etc/profile.d/java.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_dir</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;创建文件夹:<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩包存储目录</span></span><br><span class="line">create_dir <span class="variable">$software_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$software_dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建java存储目录</span></span><br><span class="line">create_dir <span class="variable">$java_dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># java安装包是否存在，不存在则下载</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$&#123;software_dir&#125;</span><span class="string">&#x27;/&#x27;</span><span class="variable">$&#123;java_package_gz&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="built_in">command</span> -v wget; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;安装wget命令&quot;</span></span><br><span class="line">        yum -y install wget &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=====&gt;下载java安装包到:<span class="variable">$software_dir</span>&quot;</span></span><br><span class="line">    wget <span class="variable">$java_package_url</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;解压缩java安装包&quot;</span></span><br><span class="line">tar -xf <span class="variable">$java_package_gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$java_package</span> <span class="variable">$java_dir</span>/<span class="variable">$java_version</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;配置环境变量&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;JAVA_HOME=<span class="variable">$java_dir</span>/<span class="variable">$java_version</span></span></span><br><span class="line"><span class="string">PATH=\$PATH:\$JAVA_HOME/bin&quot;</span> &gt; <span class="variable">$java_profile</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$java_profile</span></span><br></pre></td></tr></table></figure>


<h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">software_dir=<span class="string">&quot;/usr/local/software&quot;</span></span><br><span class="line">nacos_package_gz=<span class="string">&quot;nacos-server-2.1.0.tar.gz&quot;</span></span><br><span class="line">nacos_package_url=<span class="string">&quot;https://github.com/alibaba/nacos/releases/download/2.1.0/nacos-server-2.1.0.tar.gz&quot;</span></span><br><span class="line">nacos_dir=<span class="string">&quot;/usr/local/nacos&quot;</span></span><br><span class="line">nacos_version=<span class="string">&quot;2.1.0&quot;</span></span><br><span class="line">nacos_conf_properties=<span class="variable">$nacos_dir</span>/<span class="variable">$nacos_version</span>/conf/application.properties</span><br><span class="line">nacos_conf_sql=<span class="variable">$nacos_dir</span>/<span class="variable">$nacos_version</span>/conf/nacos-mysql.sql</span><br><span class="line">java_home=<span class="string">&quot;/usr/local/java/17&quot;</span></span><br><span class="line">mysql_username=root</span><br><span class="line">mysql_password=admin123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_dir</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;创建文件夹:<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩包存储目录</span></span><br><span class="line">create_dir <span class="variable">$software_dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$software_dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos安装包是否存在，不存在则下载</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$&#123;software_dir&#125;</span><span class="string">&#x27;/&#x27;</span><span class="variable">$&#123;nacos_package_gz&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> ! <span class="built_in">command</span> -v wget; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;=====&gt;安装wget命令&quot;</span></span><br><span class="line">        yum -y install wget &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;=====&gt;下载nacos安装包到:<span class="variable">$software_dir</span>&quot;</span></span><br><span class="line">    wget <span class="variable">$nacos_package_url</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;解压缩nacos安装包&quot;</span></span><br><span class="line">tar -xf <span class="variable">$nacos_package_gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">create_dir <span class="variable">$nacos_dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line"><span class="built_in">mv</span> nacos <span class="variable">$nacos_dir</span>/<span class="variable">$nacos_version</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;执行sql&quot;</span></span><br><span class="line">mysql -u<span class="variable">$mysql_username</span> -p<span class="string">&quot;<span class="variable">$mysql_password</span>&quot;</span> -e <span class="string">&quot;create database nacos_config;&quot;</span> --connect-expired-password &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">mysql -u<span class="variable">$mysql_username</span> -p<span class="string">&quot;<span class="variable">$mysql_password</span>&quot;</span> -Dnacos_config &lt; <span class="variable">$nacos_conf_sql</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;修改配置文件&quot;</span></span><br><span class="line">sed <span class="string">&#x27;33c spring.datasource.platform=mysql&#x27;</span> -i <span class="variable">$nacos_conf_properties</span></span><br><span class="line">sed <span class="string">&#x27;36c db.num=1&#x27;</span> -i <span class="variable">$nacos_conf_properties</span></span><br><span class="line">sed <span class="string">&#x27;39c db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&#x27;</span> -i <span class="variable">$nacos_conf_properties</span></span><br><span class="line">sed <span class="string">&#x27;40c db.user.0=&#x27;</span><span class="variable">$mysql_username</span> -i <span class="variable">$nacos_conf_properties</span></span><br><span class="line">sed <span class="string">&#x27;41c db.password.0=&#x27;</span><span class="variable">$mysql_password</span> -i <span class="variable">$nacos_conf_properties</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;设置开机自启动&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[Unit]</span></span><br><span class="line"><span class="string">Description=nacos</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">Environment=&quot;</span>JAVA_HOME=<span class="variable">$JAVA_HOME</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">ExecStart=<span class="variable">$nacos_dir</span>/<span class="variable">$nacos_version</span>/bin/startup.sh -m standalone</span></span><br><span class="line"><span class="string">ExecReload=<span class="variable">$nacos_dir</span>/<span class="variable">$nacos_version</span>/bin/shutdown.sh</span></span><br><span class="line"><span class="string">ExecStop=<span class="variable">$nacos_dir</span>/<span class="variable">$nacos_version</span>/bin/shutdown.sh</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target&quot;</span> &gt; /usr/lib/systemd/system/nacos.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nacos &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;启动nacos&quot;</span></span><br><span class="line">systemctl start nacos</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=====&gt;开启8848端口&quot;</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8848/tcp --permanent &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">firewall-cmd --reload &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常见问题整理</title>
    <url>/2022/12/19/114223.html</url>
    <content><![CDATA[<blockquote>
<p>Git 常见问题整理</p>
</blockquote>
<span id="more"></span>

<h4 id="修改-commit-的注释"><a href="#修改-commit-的注释" class="headerlink" title="修改 commit 的注释"></a>修改 commit 的注释</h4><ul>
<li>pick：保留该 commit（缩写:p）</li>
<li>reword：保留该 commit，但我需要修改该 commit 的注释（缩写:r）</li>
<li>edit：保留该 commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</li>
<li>squash：将该 commit 和前一个 commit 合并（缩写:s）</li>
<li>fixup：将该 commit 和前一个 commit 合并，但我不要保留该提交的注释信息（缩写:f）</li>
<li>exec：执行 shell 命令（缩写:x）</li>
<li>drop：我要丢弃该 commit（缩写:d）</li>
</ul>
<h5 id="最新的一次提交"><a href="#最新的一次提交" class="headerlink" title="最新的一次提交"></a>最新的一次提交</h5><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">git commit --amend </span><br><span class="line">or</span><br><span class="line">git commit --amend --message=&quot;update msg&quot; --author=&quot;chenkaixin12121@163.com&quot;</span><br></pre></td></tr></table></figure>

<h5 id="修改历史提交"><a href="#修改历史提交" class="headerlink" title="修改历史提交"></a>修改历史提交</h5><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># 列出你最近的 3 个 commit</span><br><span class="line">git rebase -i HEAD~3 </span><br><span class="line"># 将对应的 pick 改为 e，保存并退出，重复执行以下命令，也可执行路过或退出 rebase，git rebase --skip、git rebase --abort</span><br><span class="line">git commit --amend --message=&quot;update msg&quot;</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>

<h5 id="合并历史提交"><a href="#合并历史提交" class="headerlink" title="合并历史提交"></a>合并历史提交</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 查看提交记录</span><br><span class="line">git log --oneline</span><br><span class="line"># 列出从 startpoint 到 endpoint 的多个 commit，前开后闭</span><br><span class="line"># 如果有想合并到第一个 commit 的需求，使用 git rebase -i --root</span><br><span class="line">git rebase -i be3ae5dc b16b3917</span><br><span class="line"># 在文本编辑器中，你会看到这样的内容（commit 的哈希值和消息会有所不同）：</span><br><span class="line">pick 1fc6c95 do something</span><br><span class="line">pick 6b2481b do something else</span><br><span class="line">pick dd1475d do a third thing</span><br><span class="line"># 将你想要合并到前一个 commit 的 pick 改为 squash 或者 s。例如：</span><br><span class="line">pick 1fc6c95 do something</span><br><span class="line">s 6b2481b do something else</span><br><span class="line">s dd1475d do a third thing</span><br><span class="line"># 保存并关闭编辑器后 Git 会打开另一个编辑器，让你修改新的 commit 消息。它会包含你刚才合并的所有 commit 的消息。你可以编辑这个消息，然后保存并关闭编辑器</span><br><span class="line"># 此时查询提交记录已经合并了，如果你已经把你的 commit 推送到了远程仓库，就需要用 git push -f 命令来强制推送</span><br></pre></td></tr></table></figure>

<h4 id="更新-gitignore-后如何提交"><a href="#更新-gitignore-后如何提交" class="headerlink" title="更新 .gitignore 后如何提交"></a>更新 .gitignore 后如何提交</h4><ol>
<li>清空缓存，<code>git rm -r --cached .</code></li>
<li>重新提交，<code>git add .</code> ，<code>git commit -m &quot;update .gitignore&quot;</code>，<code>git push</code></li>
</ol>
<h4 id="暂存文件"><a href="#暂存文件" class="headerlink" title="暂存文件"></a>暂存文件</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 将当前的未提交更改（已经添加到暂存区和工作区的更改）保存到一个新的 stash 中，并附带一个描述信息。这将让你的工作区回到最后一次 commit 的状态。</span><br><span class="line">git stash save &quot;message&quot;</span><br><span class="line"># 列出所有的 stash。</span><br><span class="line">git stash list</span><br><span class="line"># 应用指定的 stash 到当前的工作区，但是不删除这个 stash。这里的 n 是你在 git stash list 命令中看到的编号。</span><br><span class="line">git stash apply stash@&#123;n&#125;</span><br><span class="line"># 应用指定的 stash 到当前的工作区，并删除这个 stash。</span><br><span class="line">git stash pop stash@&#123;n&#125;</span><br><span class="line"># 删除指定的 stash。</span><br><span class="line">git stash drop stash@&#123;n&#125;</span><br><span class="line"># 删除所有的 stash。</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<h4 id="将已经忽略的文件加入版本控制"><a href="#将已经忽略的文件加入版本控制" class="headerlink" title="将已经忽略的文件加入版本控制"></a>将已经忽略的文件加入版本控制</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">git add -f D:\project\activiti-workflow\src\main\resources\static\bpmnjs\dist</span><br></pre></td></tr></table></figure>

<h4 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -am &#x27;init&#x27;</span><br><span class="line">git remote add origin https://github.com/chenkaixin12121/doublemint-cloud.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h4 id="修改邮箱"><a href="#修改邮箱" class="headerlink" title="修改邮箱"></a>修改邮箱</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;chenkaixin12121@163.com&quot;</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure>

<h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<h4 id="git-生成-ssh-key-并配置到-GitLab"><a href="#git-生成-ssh-key-并配置到-GitLab" class="headerlink" title="git 生成 ssh key 并配置到 GitLab"></a>git 生成 ssh key 并配置到 GitLab</h4><ol>
<li>控制台输入命令 <code>ssh-keygen -t rsa -C &#39;chenkaixin12121@163.com&#39;</code></li>
<li>提示输入 rsa 文件保存位置及密码，这里使用默认保存位置并且不设置密码（设置密码后每次拉取代码都需要输入密码）</li>
<li>打开并复制内容 rsa文件地址&#x2F;.ssh&#x2F;id_rsa.pub</li>
<li>打开 GabLab，用户设置 -&gt; SSH密钥 -&gt; 添加密钥并设置过期时间即可</li>
</ol>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Jsoup爬取全球时区</title>
    <url>/2023/01/05/204734.html</url>
    <content><![CDATA[<blockquote>
<p>Jsoup 爬取全球时区</p>
</blockquote>
<span id="more"></span>

<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.jsoup&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsoup&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.14.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.8.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="爬取全球时区"><a href="#爬取全球时区" class="headerlink" title="爬取全球时区"></a>爬取全球时区</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenkaixin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;TimeZone&gt; timeZoneList = crawlerTimeZone(<span class="string">&quot;https://www.zeitverschiebung.net/cn/all-time-zones.html&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;基础数据：&quot;</span> + JSONUtil.toJsonStr(timeZoneList));</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;国家：&quot;</span> + timeZoneList.stream().map(TimeZone::getCountry).collect(Collectors.toSet()).size());</span><br><span class="line">        System.out.println(<span class="string">&quot;城市：&quot;</span> + timeZoneList.stream().flatMap(e -&gt; e.getCityList().stream()).collect(Collectors.toSet()).size());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;TimeZone&gt; <span class="title function_">crawlerTimeZone</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(url)</span><br><span class="line">                .timeout(<span class="number">5000</span>)</span><br><span class="line">                .headers(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;() &#123;&#123;</span><br><span class="line">                    put(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>);</span><br><span class="line">                &#125;&#125;)</span><br><span class="line">                .proxy(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7890</span>) <span class="comment">// 设置代理</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> document.select(<span class="string">&quot;tbody tr&quot;</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .map(e -&gt; &#123;</span><br><span class="line">                    <span class="type">TimeZone</span> <span class="variable">timeZone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimeZone</span>();</span><br><span class="line"></span><br><span class="line">                    <span class="type">Element</span> <span class="variable">strong</span> <span class="operator">=</span> e.selectFirst(<span class="string">&quot;td strong&quot;</span>);</span><br><span class="line">                    String[] zones = strong.text().substring(<span class="number">3</span>).split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                    timeZone.setUtc(zones[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">                    <span class="type">LocalDateTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalDateTime.now().minusSeconds(java.util.TimeZone.getDefault().getRawOffset() / <span class="number">1000</span>).plusHours(Long.parseLong(zones[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (zones.length != <span class="number">1</span>) &#123;</span><br><span class="line">                        timeZone.setUtc(timeZone.getUtc() + <span class="string">&quot;:&quot;</span> + zones[<span class="number">1</span>]);</span><br><span class="line">                        currentTime = zones[<span class="number">0</span>].contains(<span class="string">&quot;+&quot;</span>) ? currentTime.plusMinutes(Long.parseLong(zones[<span class="number">1</span>])) : currentTime.minusMinutes(Long.parseLong(zones[<span class="number">1</span>]));</span><br><span class="line">                    &#125;</span><br><span class="line">                    timeZone.setCurrentTime(DateUtil.formatLocalDateTime(currentTime));</span><br><span class="line"></span><br><span class="line">                    <span class="type">Elements</span> <span class="variable">tdElements</span> <span class="operator">=</span> e.select(<span class="string">&quot;td a&quot;</span>);</span><br><span class="line">                    timeZone.setTimezone(tdElements.get(<span class="number">0</span>).text());</span><br><span class="line">                    timeZone.setCountry(tdElements.get(<span class="number">1</span>).text());</span><br><span class="line">                    timeZone.setCityList(tdElements.stream().skip(<span class="number">2</span>).map(Element::text).collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> timeZone;</span><br><span class="line">                &#125;).sorted(Comparator.comparing(TimeZone::getCountry)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeZone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String utc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String timezone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; cityList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String currentTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---------------</span><br><span class="line">基础数据：[&#123;&quot;country&quot;:&quot;Afghanistan&quot;,&quot;utc&quot;:&quot;+4:30&quot;,&quot;timezone&quot;:&quot;Asia/Kabul&quot;,&quot;cityList&quot;:[&quot;Kabul&quot;,&quot;Kandahār&quot;,&quot;Mazār-e Sharīf&quot;,&quot;Herāt&quot;,&quot;Jalālābād&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Aland Islands&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Mariehamn&quot;,&quot;cityList&quot;:[&quot;Mariehamn&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Albania&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Tirane&quot;,&quot;cityList&quot;:[&quot;Tirana&quot;,&quot;Durrës&quot;,&quot;Elbasan&quot;,&quot;Vlorë&quot;,&quot;Shkodër&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Algeria&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Algiers&quot;,&quot;cityList&quot;:[&quot;Algiers&quot;,&quot;Boumerdas&quot;,&quot;Oran&quot;,&quot;Tébessa&quot;,&quot;Constantine&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;American Samoa&quot;,&quot;utc&quot;:&quot;-11&quot;,&quot;timezone&quot;:&quot;Pacific/Pago_Pago&quot;,&quot;cityList&quot;:[&quot;Pago Pago&quot;,&quot;Tāfuna&quot;,&quot;Ta`ū&quot;,&quot;Taulaga&quot;],&quot;currentTime&quot;:&quot;2023-01-05 01:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Andorra&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Andorra&quot;,&quot;cityList&quot;:[&quot;Andorra la Vella&quot;,&quot;les Escaldes&quot;,&quot;Encamp&quot;,&quot;Sant Julià de Lòria&quot;,&quot;la Massana&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Angola&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Luanda&quot;,&quot;cityList&quot;:[&quot;Luanda&quot;,&quot;N’dalatando&quot;,&quot;Huambo&quot;,&quot;Lobito&quot;,&quot;Benguela&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Anguilla&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Anguilla&quot;,&quot;cityList&quot;:[&quot;The Valley&quot;,&quot;Blowing Point Village&quot;,&quot;Sandy Ground Village&quot;,&quot;The Quarter&quot;,&quot;Sandy Hill&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;Antarctica/Palmer&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;Antarctica/Rothera&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Antarctica/Troll&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Antarctica/Syowa&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Antarctica/Mawson&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Antarctica/Vostok&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Antarctica/Davis&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Antarctica/DumontDUrville&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Antarctica/Casey&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antarctica&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Antarctica/McMurdo&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Antigua and Barbuda&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Antigua&quot;,&quot;cityList&quot;:[&quot;Saint John’s&quot;,&quot;Piggotts&quot;,&quot;Bolands&quot;,&quot;Codrington&quot;,&quot;Parham&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Buenos_Aires&quot;,&quot;cityList&quot;:[&quot;Buenos Aires&quot;,&quot;La Plata&quot;,&quot;Mar del Plata&quot;,&quot;Morón&quot;,&quot;Bahía Blanca&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Catamarca&quot;,&quot;cityList&quot;:[&quot;San Fernando del Valle de Catamarca&quot;,&quot;Trelew&quot;,&quot;Puerto Madryn&quot;,&quot;Esquel&quot;,&quot;Rawson&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Cordoba&quot;,&quot;cityList&quot;:[&quot;Córdoba&quot;,&quot;Rosario&quot;,&quot;Santa Fe&quot;,&quot;Resistencia&quot;,&quot;Santiago del Estero&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Jujuy&quot;,&quot;cityList&quot;:[&quot;San Salvador de Jujuy&quot;,&quot;San Pedro de Jujuy&quot;,&quot;Libertador General San Martín&quot;,&quot;Palpalá&quot;,&quot;La Quiaca&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/La_Rioja&quot;,&quot;cityList&quot;:[&quot;La Rioja&quot;,&quot;Chilecito&quot;,&quot;Arauco&quot;,&quot;Chamical&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Mendoza&quot;,&quot;cityList&quot;:[&quot;Mendoza&quot;,&quot;San Rafael&quot;,&quot;San Martín&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Rio_Gallegos&quot;,&quot;cityList&quot;:[&quot;Comodoro Rivadavia&quot;,&quot;Río Gallegos&quot;,&quot;Caleta Olivia&quot;,&quot;Pico Truncado&quot;,&quot;Puerto Deseado&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Salta&quot;,&quot;cityList&quot;:[&quot;Salta&quot;,&quot;Neuquén&quot;,&quot;Santa Rosa&quot;,&quot;San Carlos de Bariloche&quot;,&quot;Cipolletti&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/San_Juan&quot;,&quot;cityList&quot;:[&quot;San Juan&quot;,&quot;Chimbas&quot;,&quot;Santa Lucía&quot;,&quot;Pocito&quot;,&quot;Caucete&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/San_Luis&quot;,&quot;cityList&quot;:[&quot;San Luis&quot;,&quot;Villa Mercedes&quot;,&quot;La Punta&quot;,&quot;Merlo&quot;,&quot;Justo Daract&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Tucuman&quot;,&quot;cityList&quot;:[&quot;San Miguel de Tucumán&quot;,&quot;Yerba Buena&quot;,&quot;Tafí Viejo&quot;,&quot;Alderetes&quot;,&quot;Aguilares&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Argentina&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Argentina/Ushuaia&quot;,&quot;cityList&quot;:[&quot;Ushuaia&quot;,&quot;Río Grande&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Armenia&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Asia/Yerevan&quot;,&quot;cityList&quot;:[&quot;Yerevan&quot;,&quot;Gyumri&quot;,&quot;Vanadzor&quot;,&quot;Vagharshapat&quot;,&quot;Hrazdan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Aruba&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Aruba&quot;,&quot;cityList&quot;:[&quot;Oranjestad&quot;,&quot;Tanki Leendert&quot;,&quot;San Nicolas&quot;,&quot;Santa Cruz&quot;,&quot;Paradera&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Australia/Perth&quot;,&quot;cityList&quot;:[&quot;Perth&quot;,&quot;Rockingham&quot;,&quot;Mandurah&quot;,&quot;Bunbury&quot;,&quot;Albany&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+8:45&quot;,&quot;timezone&quot;:&quot;Australia/Eucla&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 21:32:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+9:30&quot;,&quot;timezone&quot;:&quot;Australia/Adelaide&quot;,&quot;cityList&quot;:[&quot;Adelaide&quot;,&quot;Adelaide Hills&quot;,&quot;Mount Gambier&quot;,&quot;Morphett Vale&quot;,&quot;Gawler&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+9:30&quot;,&quot;timezone&quot;:&quot;Australia/Broken_Hill&quot;,&quot;cityList&quot;:[&quot;Broken Hill&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+9:30&quot;,&quot;timezone&quot;:&quot;Australia/Darwin&quot;,&quot;cityList&quot;:[&quot;Darwin&quot;,&quot;Alice Springs&quot;,&quot;Palmerston&quot;,&quot;Howard Springs&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Antarctica/Macquarie&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Australia/Brisbane&quot;,&quot;cityList&quot;:[&quot;Brisbane&quot;,&quot;Gold Coast&quot;,&quot;Logan City&quot;,&quot;Townsville&quot;,&quot;Cairns&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Australia/Currie&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Australia/Hobart&quot;,&quot;cityList&quot;:[&quot;Hobart&quot;,&quot;Launceston&quot;,&quot;Burnie&quot;,&quot;Devonport&quot;,&quot;Sandy Bay&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Australia/Lindeman&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Australia/Melbourne&quot;,&quot;cityList&quot;:[&quot;Melbourne&quot;,&quot;Geelong&quot;,&quot;Bendigo&quot;,&quot;Ballarat&quot;,&quot;Melbourne City Centre&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Australia/Sydney&quot;,&quot;cityList&quot;:[&quot;Sydney&quot;,&quot;Canberra&quot;,&quot;Newcastle&quot;,&quot;Wollongong&quot;,&quot;Maitland&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Australia&quot;,&quot;utc&quot;:&quot;+10:30&quot;,&quot;timezone&quot;:&quot;Australia/Lord_Howe&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 23:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Austria&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Vienna&quot;,&quot;cityList&quot;:[&quot;Vienna&quot;,&quot;Graz&quot;,&quot;Linz&quot;,&quot;Favoriten&quot;,&quot;Donaustadt&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Azerbaijan&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Asia/Baku&quot;,&quot;cityList&quot;:[&quot;Baku&quot;,&quot;Ganja&quot;,&quot;Sumqayıt&quot;,&quot;Lankaran&quot;,&quot;Yevlakh&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bahamas&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Nassau&quot;,&quot;cityList&quot;:[&quot;Nassau&quot;,&quot;Lucaya&quot;,&quot;Freeport&quot;,&quot;West End&quot;,&quot;Cooper’s Town&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bahrain&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Asia/Bahrain&quot;,&quot;cityList&quot;:[&quot;Manama&quot;,&quot;Al Muharraq&quot;,&quot;Ar Rifā‘&quot;,&quot;Dār Kulayb&quot;,&quot;Madīnat Ḩamad&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bangladesh&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Asia/Dhaka&quot;,&quot;cityList&quot;:[&quot;Dhaka&quot;,&quot;Chattogram&quot;,&quot;Khulna&quot;,&quot;Rājshāhi&quot;,&quot;Comilla&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Barbados&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Barbados&quot;,&quot;cityList&quot;:[&quot;Bridgetown&quot;,&quot;Speightstown&quot;,&quot;Oistins&quot;,&quot;Bathsheba&quot;,&quot;Holetown&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Belarus&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Europe/Minsk&quot;,&quot;cityList&quot;:[&quot;Minsk&quot;,&quot;Homyel&#x27;&quot;,&quot;Mahilyow&quot;,&quot;Vitebsk&quot;,&quot;Hrodna&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Belgium&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Brussels&quot;,&quot;cityList&quot;:[&quot;Brussels&quot;,&quot;Antwerpen&quot;,&quot;Gent&quot;,&quot;Charleroi&quot;,&quot;Liège&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Belize&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Belize&quot;,&quot;cityList&quot;:[&quot;Belize City&quot;,&quot;San Ignacio&quot;,&quot;Orange Walk&quot;,&quot;Belmopan&quot;,&quot;Dangriga&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Benin&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Porto-Novo&quot;,&quot;cityList&quot;:[&quot;Cotonou&quot;,&quot;Abomey-Calavi&quot;,&quot;Djougou&quot;,&quot;Porto-Novo&quot;,&quot;Parakou&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bermuda&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;Atlantic/Bermuda&quot;,&quot;cityList&quot;:[&quot;Hamilton&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bhutan&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Asia/Thimphu&quot;,&quot;cityList&quot;:[&quot;Thimphu&quot;,&quot;Punākha&quot;,&quot;Tsirang&quot;,&quot;Phuntsholing&quot;,&quot;Pemagatshel&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bolivia&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/La_Paz&quot;,&quot;cityList&quot;:[&quot;Santa Cruz de la Sierra&quot;,&quot;Cochabamba&quot;,&quot;La Paz&quot;,&quot;Sucre&quot;,&quot;Oruro&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bonaire, Saint Eustatius and Saba&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Kralendijk&quot;,&quot;cityList&quot;:[&quot;Kralendijk&quot;,&quot;Oranjestad&quot;,&quot;The Bottom&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bosnia and Herzegovina&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Sarajevo&quot;,&quot;cityList&quot;:[&quot;Sarajevo&quot;,&quot;Banja Luka&quot;,&quot;Zenica&quot;,&quot;Tuzla&quot;,&quot;Mostar&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Botswana&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Gaborone&quot;,&quot;cityList&quot;:[&quot;Gaborone&quot;,&quot;Francistown&quot;,&quot;Molepolole&quot;,&quot;Selebi-Phikwe&quot;,&quot;Maun&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Eirunepe&quot;,&quot;cityList&quot;:[&quot;Eirunepé&quot;,&quot;Benjamin Constant&quot;,&quot;Envira&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Rio_Branco&quot;,&quot;cityList&quot;:[&quot;Rio Branco&quot;,&quot;Cruzeiro do Sul&quot;,&quot;Sena Madureira&quot;,&quot;Tarauacá&quot;,&quot;Feijó&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Boa_Vista&quot;,&quot;cityList&quot;:[&quot;Boa Vista&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Campo_Grande&quot;,&quot;cityList&quot;:[&quot;Campo Grande&quot;,&quot;Dourados&quot;,&quot;Corumbá&quot;,&quot;Três Lagoas&quot;,&quot;Ponta Porã&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Cuiaba&quot;,&quot;cityList&quot;:[&quot;Cuiabá&quot;,&quot;Várzea Grande&quot;,&quot;Rondonópolis&quot;,&quot;Sinop&quot;,&quot;Barra do Garças&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Manaus&quot;,&quot;cityList&quot;:[&quot;Manaus&quot;,&quot;Itacoatiara&quot;,&quot;Parintins&quot;,&quot;Manacapuru&quot;,&quot;Coari&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Porto_Velho&quot;,&quot;cityList&quot;:[&quot;Porto Velho&quot;,&quot;Ji Paraná&quot;,&quot;Vilhena&quot;,&quot;Ariquemes&quot;,&quot;Cacoal&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Araguaina&quot;,&quot;cityList&quot;:[&quot;Palmas&quot;,&quot;Araguaína&quot;,&quot;Gurupi&quot;,&quot;Miracema do Tocantins&quot;,&quot;Porto Franco&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Bahia&quot;,&quot;cityList&quot;:[&quot;Salvador&quot;,&quot;Feira de Santana&quot;,&quot;Vitória da Conquista&quot;,&quot;Itabuna&quot;,&quot;Camaçari&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Belem&quot;,&quot;cityList&quot;:[&quot;Belém&quot;,&quot;Ananindeua&quot;,&quot;Macapá&quot;,&quot;Parauapebas&quot;,&quot;Marabá&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Fortaleza&quot;,&quot;cityList&quot;:[&quot;Fortaleza&quot;,&quot;São Luís&quot;,&quot;Natal&quot;,&quot;Teresina&quot;,&quot;João Pessoa&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Maceio&quot;,&quot;cityList&quot;:[&quot;Maceió&quot;,&quot;Aracaju&quot;,&quot;Arapiraca&quot;,&quot;Nossa Senhora do Socorro&quot;,&quot;São Cristóvão&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Recife&quot;,&quot;cityList&quot;:[&quot;Recife&quot;,&quot;Jaboatão&quot;,&quot;Jaboatão dos Guararapes&quot;,&quot;Olinda&quot;,&quot;Paulista&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Santarem&quot;,&quot;cityList&quot;:[&quot;Santarém&quot;,&quot;Altamira&quot;,&quot;Itaituba&quot;,&quot;Oriximiná&quot;,&quot;Alenquer&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Sao_Paulo&quot;,&quot;cityList&quot;:[&quot;São Paulo&quot;,&quot;Rio de Janeiro&quot;,&quot;Belo Horizonte&quot;,&quot;Brasília&quot;,&quot;Curitiba&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brazil&quot;,&quot;utc&quot;:&quot;-2&quot;,&quot;timezone&quot;:&quot;America/Noronha&quot;,&quot;cityList&quot;:[&quot;Itamaracá&quot;],&quot;currentTime&quot;:&quot;2023-01-05 10:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;British Indian Ocean Territory&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Indian/Chagos&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;British Virgin Islands&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Tortola&quot;,&quot;cityList&quot;:[&quot;Road Town&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Brunei&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Brunei&quot;,&quot;cityList&quot;:[&quot;Bandar Seri Begawan&quot;,&quot;Kuala Belait&quot;,&quot;Seria&quot;,&quot;Tutong&quot;,&quot;Bangar&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Bulgaria&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Sofia&quot;,&quot;cityList&quot;:[&quot;Sofia&quot;,&quot;Plovdiv&quot;,&quot;Varna&quot;,&quot;Burgas&quot;,&quot;Ruse&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Burkina Faso&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Ouagadougou&quot;,&quot;cityList&quot;:[&quot;Ouagadougou&quot;,&quot;Bobo-Dioulasso&quot;,&quot;Koudougou&quot;,&quot;Ouahigouya&quot;,&quot;Banfora&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Burundi&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Bujumbura&quot;,&quot;cityList&quot;:[&quot;Bujumbura&quot;,&quot;Muyinga&quot;,&quot;Gitega&quot;,&quot;Ruyigi&quot;,&quot;Ngozi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cabo Verde&quot;,&quot;utc&quot;:&quot;-1&quot;,&quot;timezone&quot;:&quot;Atlantic/Cape_Verde&quot;,&quot;cityList&quot;:[&quot;Praia&quot;,&quot;Mindelo&quot;,&quot;Santa Maria&quot;,&quot;Cova Figueira&quot;,&quot;Santa Cruz&quot;],&quot;currentTime&quot;:&quot;2023-01-05 11:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cambodia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Phnom_Penh&quot;,&quot;cityList&quot;:[&quot;Phnom Penh&quot;,&quot;Takeo&quot;,&quot;Sihanoukville&quot;,&quot;Battambang&quot;,&quot;Siem Reap&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cameroon&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Douala&quot;,&quot;cityList&quot;:[&quot;Douala&quot;,&quot;Yaoundé&quot;,&quot;Garoua&quot;,&quot;Kousséri&quot;,&quot;Bamenda&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-8&quot;,&quot;timezone&quot;:&quot;America/Vancouver&quot;,&quot;cityList&quot;:[&quot;Vancouver&quot;,&quot;Surrey&quot;,&quot;Okanagan&quot;,&quot;Victoria&quot;,&quot;Burnaby&quot;],&quot;currentTime&quot;:&quot;2023-01-05 04:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Cambridge_Bay&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Creston&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Dawson&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Dawson_Creek&quot;,&quot;cityList&quot;:[&quot;Fort St. John&quot;,&quot;Dawson Creek&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Edmonton&quot;,&quot;cityList&quot;:[&quot;Calgary&quot;,&quot;Edmonton&quot;,&quot;Fort McMurray&quot;,&quot;Red Deer&quot;,&quot;Lethbridge&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Fort_Nelson&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Inuvik&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Whitehorse&quot;,&quot;cityList&quot;:[&quot;Whitehorse&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Yellowknife&quot;,&quot;cityList&quot;:[&quot;Yellowknife&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Rainy_River&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Rankin_Inlet&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Regina&quot;,&quot;cityList&quot;:[&quot;Saskatoon&quot;,&quot;Regina&quot;,&quot;Prince Albert&quot;,&quot;Moose Jaw&quot;,&quot;North Battleford&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Resolute&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Swift_Current&quot;,&quot;cityList&quot;:[&quot;Swift Current&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Winnipeg&quot;,&quot;cityList&quot;:[&quot;Winnipeg&quot;,&quot;Brandon&quot;,&quot;Kenora&quot;,&quot;Portage la Prairie&quot;,&quot;Thompson&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Atikokan&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Iqaluit&quot;,&quot;cityList&quot;:[&quot;Iqaluit&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Nipigon&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Pangnirtung&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Thunder_Bay&quot;,&quot;cityList&quot;:[&quot;Thunder Bay&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Toronto&quot;,&quot;cityList&quot;:[&quot;Toronto&quot;,&quot;Montréal&quot;,&quot;Ottawa&quot;,&quot;Mississauga&quot;,&quot;Québec&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Blanc-Sablon&quot;,&quot;cityList&quot;:[&quot;Lévis&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Glace_Bay&quot;,&quot;cityList&quot;:[&quot;Sydney&quot;,&quot;Glace Bay&quot;,&quot;Sydney Mines&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Goose_Bay&quot;,&quot;cityList&quot;:[&quot;Labrador City&quot;,&quot;Happy Valley-Goose Bay&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Halifax&quot;,&quot;cityList&quot;:[&quot;Halifax&quot;,&quot;Dartmouth&quot;,&quot;Charlottetown&quot;,&quot;Lower Sackville&quot;,&quot;Truro&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Moncton&quot;,&quot;cityList&quot;:[&quot;Moncton&quot;,&quot;Saint John&quot;,&quot;Fredericton&quot;,&quot;Dieppe&quot;,&quot;Miramichi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Canada&quot;,&quot;utc&quot;:&quot;-3:30&quot;,&quot;timezone&quot;:&quot;America/St_Johns&quot;,&quot;cityList&quot;:[&quot;St. John&#x27;s&quot;,&quot;Mount Pearl&quot;,&quot;Corner Brook&quot;,&quot;Conception Bay South&quot;,&quot;Bay Roberts&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cayman Islands&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Cayman&quot;,&quot;cityList&quot;:[&quot;George Town&quot;,&quot;West Bay&quot;,&quot;Bodden Town&quot;,&quot;East End&quot;,&quot;North Side&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Central African Republic&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Bangui&quot;,&quot;cityList&quot;:[&quot;Bangui&quot;,&quot;Bimbo&quot;,&quot;Mbaïki&quot;,&quot;Berbérati&quot;,&quot;Kaga Bandoro&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Chad&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Ndjamena&quot;,&quot;cityList&quot;:[&quot;N&#x27;Djamena&quot;,&quot;Moundou&quot;,&quot;Sarh&quot;,&quot;Abéché&quot;,&quot;Kelo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Chile&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;Pacific/Easter&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Chile&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Santiago&quot;,&quot;cityList&quot;:[&quot;Santiago&quot;,&quot;Puente Alto&quot;,&quot;Antofagasta&quot;,&quot;Viña del Mar&quot;,&quot;Valparaíso&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Chile&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Punta_Arenas&quot;,&quot;cityList&quot;:[&quot;Punta Arenas&quot;,&quot;Puerto Natales&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;China&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Asia/Urumqi&quot;,&quot;cityList&quot;:[&quot;Zhongshan&quot;,&quot;Ürümqi&quot;,&quot;Zhanjiang&quot;,&quot;Shihezi&quot;,&quot;Huocheng&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;China&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Shanghai&quot;,&quot;cityList&quot;:[&quot;Shanghai&quot;,&quot;Beijing&quot;,&quot;Tianjin&quot;,&quot;Guangzhou&quot;,&quot;Shenzhen&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Christmas Island&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Indian/Christmas&quot;,&quot;cityList&quot;:[&quot;Flying Fish Cove&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cocos Islands&quot;,&quot;utc&quot;:&quot;+6:30&quot;,&quot;timezone&quot;:&quot;Indian/Cocos&quot;,&quot;cityList&quot;:[&quot;West Island&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Colombia&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Bogota&quot;,&quot;cityList&quot;:[&quot;Bogotá&quot;,&quot;Cali&quot;,&quot;Medellín&quot;,&quot;Barranquilla&quot;,&quot;Cartagena&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Comoros&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Indian/Comoro&quot;,&quot;cityList&quot;:[&quot;Moroni&quot;,&quot;Moutsamoudou&quot;,&quot;Fomboni&quot;,&quot;Domoni&quot;,&quot;Tsimbeo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cook Islands&quot;,&quot;utc&quot;:&quot;-10&quot;,&quot;timezone&quot;:&quot;Pacific/Rarotonga&quot;,&quot;cityList&quot;:[&quot;Avarua&quot;],&quot;currentTime&quot;:&quot;2023-01-05 02:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Costa Rica&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Costa_Rica&quot;,&quot;cityList&quot;:[&quot;San José&quot;,&quot;Limón&quot;,&quot;San Francisco&quot;,&quot;Alajuela&quot;,&quot;Liberia&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Croatia&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Zagreb&quot;,&quot;cityList&quot;:[&quot;Zagreb&quot;,&quot;Split&quot;,&quot;Rijeka&quot;,&quot;Osijek&quot;,&quot;Zadar&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cuba&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Havana&quot;,&quot;cityList&quot;:[&quot;Havana&quot;,&quot;Santiago de Cuba&quot;,&quot;Camagüey&quot;,&quot;Holguín&quot;,&quot;Guantánamo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Curacao&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Curacao&quot;,&quot;cityList&quot;:[&quot;Willemstad&quot;,&quot;Sint Michiel Liber&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cyprus&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Asia/Famagusta&quot;,&quot;cityList&quot;:[&quot;Famagusta&quot;,&quot;Kyrenia&quot;,&quot;Protaras&quot;,&quot;Paralímni&quot;,&quot;Lápithos&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Cyprus&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Asia/Nicosia&quot;,&quot;cityList&quot;:[&quot;Nicosia&quot;,&quot;Limassol&quot;,&quot;Larnaca&quot;,&quot;Stróvolos&quot;,&quot;Paphos&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Czechia&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Prague&quot;,&quot;cityList&quot;:[&quot;Prague&quot;,&quot;Brno&quot;,&quot;Ostrava&quot;,&quot;Pilsen&quot;,&quot;Olomouc&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Democratic Republic of the Congo&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Kinshasa&quot;,&quot;cityList&quot;:[&quot;Kinshasa&quot;,&quot;Masina&quot;,&quot;Kikwit&quot;,&quot;Mbandaka&quot;,&quot;Matadi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Democratic Republic of the Congo&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Lubumbashi&quot;,&quot;cityList&quot;:[&quot;Lubumbashi&quot;,&quot;Mbuji-Mayi&quot;,&quot;Kisangani&quot;,&quot;Kananga&quot;,&quot;Likasi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Denmark&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Copenhagen&quot;,&quot;cityList&quot;:[&quot;Copenhagen&quot;,&quot;Århus&quot;,&quot;Odense&quot;,&quot;Aalborg&quot;,&quot;Frederiksberg&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Djibouti&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Africa/Djibouti&quot;,&quot;cityList&quot;:[&quot;Djibouti&quot;,&quot;&#x27;Ali Sabieh&quot;,&quot;Tadjourah&quot;,&quot;Obock&quot;,&quot;Dikhil&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Dominica&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Dominica&quot;,&quot;cityList&quot;:[&quot;Roseau&quot;,&quot;Portsmouth&quot;,&quot;Berekua&quot;,&quot;Saint Joseph&quot;,&quot;Wesley&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Dominican Republic&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Santo_Domingo&quot;,&quot;cityList&quot;:[&quot;Santo Domingo&quot;,&quot;Santiago de los Caballeros&quot;,&quot;Santo Domingo Oeste&quot;,&quot;Santo Domingo Este&quot;,&quot;San Pedro de Macorís&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ecuador&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;Pacific/Galapagos&quot;,&quot;cityList&quot;:[&quot;Puerto Ayora&quot;,&quot;Puerto Baquerizo Moreno&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ecuador&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Guayaquil&quot;,&quot;cityList&quot;:[&quot;Guayaquil&quot;,&quot;Quito&quot;,&quot;Cuenca&quot;,&quot;Santo Domingo de los Colorados&quot;,&quot;Machala&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Egypt&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Cairo&quot;,&quot;cityList&quot;:[&quot;Cairo&quot;,&quot;Alexandria&quot;,&quot;Giza&quot;,&quot;Port Said&quot;,&quot;Suez&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;El Salvador&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/El_Salvador&quot;,&quot;cityList&quot;:[&quot;San Salvador&quot;,&quot;Soyapango&quot;,&quot;Santa Ana&quot;,&quot;San Miguel&quot;,&quot;Mejicanos&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Equatorial Guinea&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Malabo&quot;,&quot;cityList&quot;:[&quot;Bata&quot;,&quot;Malabo&quot;,&quot;Ebebiyin&quot;,&quot;Aconibe&quot;,&quot;Añisoc&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Eritrea&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Africa/Asmara&quot;,&quot;cityList&quot;:[&quot;Asmara&quot;,&quot;Keren&quot;,&quot;Massawa&quot;,&quot;Assab&quot;,&quot;Mendefera&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Estonia&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Tallinn&quot;,&quot;cityList&quot;:[&quot;Tallinn&quot;,&quot;Tartu&quot;,&quot;Narva&quot;,&quot;Kohtla-Järve&quot;,&quot;Pärnu&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Eswatini&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Mbabane&quot;,&quot;cityList&quot;:[&quot;Manzini&quot;,&quot;Mbabane&quot;,&quot;Big Bend&quot;,&quot;Malkerns&quot;,&quot;Nhlangano&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ethiopia&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Africa/Addis_Ababa&quot;,&quot;cityList&quot;:[&quot;Addis Ababa&quot;,&quot;Dire Dawa&quot;,&quot;Mek&#x27;ele&quot;,&quot;Nazrēt&quot;,&quot;Bahir Dar&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Falkland Islands&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;Atlantic/Stanley&quot;,&quot;cityList&quot;:[&quot;Stanley&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Faroe Islands&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Atlantic/Faroe&quot;,&quot;cityList&quot;:[&quot;Tórshavn&quot;,&quot;Klaksvík&quot;,&quot;Fuglafjørður&quot;,&quot;Tvøroyri&quot;,&quot;Miðvágur&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Fiji&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Fiji&quot;,&quot;cityList&quot;:[&quot;Suva&quot;,&quot;Lautoka&quot;,&quot;Nadi&quot;,&quot;Labasa&quot;,&quot;Ba&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Finland&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Helsinki&quot;,&quot;cityList&quot;:[&quot;Helsinki&quot;,&quot;Espoo&quot;,&quot;Tampere&quot;,&quot;Vantaa&quot;,&quot;Turku&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;France&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Paris&quot;,&quot;cityList&quot;:[&quot;Paris&quot;,&quot;Marseille&quot;,&quot;Lyon&quot;,&quot;Toulouse&quot;,&quot;Nice&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;French Guiana&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Cayenne&quot;,&quot;cityList&quot;:[&quot;Cayenne&quot;,&quot;Matoury&quot;,&quot;Saint-Laurent-du-Maroni&quot;,&quot;Kourou&quot;,&quot;Rémire-Montjoly&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;French Polynesia&quot;,&quot;utc&quot;:&quot;-10&quot;,&quot;timezone&quot;:&quot;Pacific/Tahiti&quot;,&quot;cityList&quot;:[&quot;Faaa&quot;,&quot;Papeete&quot;,&quot;Punaauia&quot;,&quot;Pirae&quot;,&quot;Mahina&quot;],&quot;currentTime&quot;:&quot;2023-01-05 02:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;French Polynesia&quot;,&quot;utc&quot;:&quot;-9:30&quot;,&quot;timezone&quot;:&quot;Pacific/Marquesas&quot;,&quot;cityList&quot;:[&quot;Taiohae&quot;],&quot;currentTime&quot;:&quot;2023-01-05 03:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;French Polynesia&quot;,&quot;utc&quot;:&quot;-9&quot;,&quot;timezone&quot;:&quot;Pacific/Gambier&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 03:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;French Southern Territories&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Indian/Kerguelen&quot;,&quot;cityList&quot;:[&quot;Port-aux-Français&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Gabon&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Libreville&quot;,&quot;cityList&quot;:[&quot;Libreville&quot;,&quot;Port-Gentil&quot;,&quot;Franceville&quot;,&quot;Oyem&quot;,&quot;Moanda&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Gambia&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Banjul&quot;,&quot;cityList&quot;:[&quot;Serekunda&quot;,&quot;Brikama&quot;,&quot;Bakau&quot;,&quot;Banjul&quot;,&quot;Farafenni&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Georgia&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Asia/Tbilisi&quot;,&quot;cityList&quot;:[&quot;Tbilisi&quot;,&quot;Kutaisi&quot;,&quot;Batumi&quot;,&quot;Sokhumi&quot;,&quot;Zugdidi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Germany&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Berlin&quot;,&quot;cityList&quot;:[&quot;Berlin&quot;,&quot;Hamburg&quot;,&quot;Munich&quot;,&quot;Köln&quot;,&quot;Frankfurt am Main&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ghana&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Accra&quot;,&quot;cityList&quot;:[&quot;Accra&quot;,&quot;Kumasi&quot;,&quot;Tamale&quot;,&quot;Takoradi&quot;,&quot;Atsiaman&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Gibraltar&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Gibraltar&quot;,&quot;cityList&quot;:[&quot;Gibraltar&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Greece&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Athens&quot;,&quot;cityList&quot;:[&quot;Athens&quot;,&quot;Thessaloníki&quot;,&quot;Pátra&quot;,&quot;Piraeus&quot;,&quot;Lárisa&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Greenland&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Thule&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Greenland&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Godthab&quot;,&quot;cityList&quot;:[&quot;Nuuk&quot;,&quot;Sisimiut&quot;,&quot;Ilulissat&quot;,&quot;Qaqortoq&quot;,&quot;Aasiaat&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Greenland&quot;,&quot;utc&quot;:&quot;-1&quot;,&quot;timezone&quot;:&quot;America/Scoresbysund&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 11:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Greenland&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;America/Danmarkshavn&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Grenada&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Grenada&quot;,&quot;cityList&quot;:[&quot;Saint George&#x27;s&quot;,&quot;Gouyave&quot;,&quot;Grenville&quot;,&quot;Victoria&quot;,&quot;Saint David’s&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Guadeloupe&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Guadeloupe&quot;,&quot;cityList&quot;:[&quot;Les Abymes&quot;,&quot;Baie-Mahault&quot;,&quot;Le Gosier&quot;,&quot;Petit-Bourg&quot;,&quot;Sainte-Anne&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Guam&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Pacific/Guam&quot;,&quot;cityList&quot;:[&quot;Dededo Village&quot;,&quot;Yigo Village&quot;,&quot;Tamuning&quot;,&quot;Tamuning-Tumon-Harmon Village&quot;,&quot;Mangilao Village&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Guatemala&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Guatemala&quot;,&quot;cityList&quot;:[&quot;Guatemala City&quot;,&quot;Mixco&quot;,&quot;Villa Nueva&quot;,&quot;Petapa&quot;,&quot;San Juan Sacatepéquez&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Guernsey&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Europe/Guernsey&quot;,&quot;cityList&quot;:[&quot;Saint Peter Port&quot;,&quot;St Martin&quot;,&quot;Saint Sampson&quot;,&quot;St Anne&quot;,&quot;Saint Saviour&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Guinea&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Conakry&quot;,&quot;cityList&quot;:[&quot;Camayenne&quot;,&quot;Conakry&quot;,&quot;Nzérékoré&quot;,&quot;Kindia&quot;,&quot;Kankan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Guinea-Bissau&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Bissau&quot;,&quot;cityList&quot;:[&quot;Bissau&quot;,&quot;Bafatá&quot;,&quot;Gabú&quot;,&quot;Bissorã&quot;,&quot;Bolama&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Guyana&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Guyana&quot;,&quot;cityList&quot;:[&quot;Georgetown&quot;,&quot;Linden&quot;,&quot;New Amsterdam&quot;,&quot;Anna Regina&quot;,&quot;Bartica&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Haiti&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Port-au-Prince&quot;,&quot;cityList&quot;:[&quot;Port-au-Prince&quot;,&quot;Carrefour&quot;,&quot;Delmas 73&quot;,&quot;Pétionville&quot;,&quot;Port-de-Paix&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Honduras&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Tegucigalpa&quot;,&quot;cityList&quot;:[&quot;Tegucigalpa&quot;,&quot;San Pedro Sula&quot;,&quot;Choloma&quot;,&quot;La Ceiba&quot;,&quot;El Progreso&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Hong Kong&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Hong_Kong&quot;,&quot;cityList&quot;:[&quot;Hong Kong&quot;,&quot;Kowloon&quot;,&quot;Tsuen Wan&quot;,&quot;Yuen Long Kau Hui&quot;,&quot;Tung Chung&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Hungary&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Budapest&quot;,&quot;cityList&quot;:[&quot;Budapest&quot;,&quot;Debrecen&quot;,&quot;Miskolc&quot;,&quot;Szeged&quot;,&quot;Pécs&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Iceland&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Atlantic/Reykjavik&quot;,&quot;cityList&quot;:[&quot;Reykjavík&quot;,&quot;Kópavogur&quot;,&quot;Hafnarfjörður&quot;,&quot;Akureyri&quot;,&quot;Garðabær&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;India&quot;,&quot;utc&quot;:&quot;+5:30&quot;,&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;cityList&quot;:[&quot;Mumbai&quot;,&quot;Delhi&quot;,&quot;Bengaluru&quot;,&quot;Kolkata&quot;,&quot;Chennai&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Indonesia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Jakarta&quot;,&quot;cityList&quot;:[&quot;Jakarta&quot;,&quot;Surabaya&quot;,&quot;Medan&quot;,&quot;Bandung&quot;,&quot;Bekasi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Indonesia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Pontianak&quot;,&quot;cityList&quot;:[&quot;Pontianak&quot;,&quot;Tanjung Pinang&quot;,&quot;Palangkaraya&quot;,&quot;Singkawang&quot;,&quot;Sampit&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Indonesia&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Makassar&quot;,&quot;cityList&quot;:[&quot;Makassar&quot;,&quot;Denpasar&quot;,&quot;City of Balikpapan&quot;,&quot;Banjarmasin&quot;,&quot;Manado&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Indonesia&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Asia/Jayapura&quot;,&quot;cityList&quot;:[&quot;Ambon&quot;,&quot;Jayapura&quot;,&quot;Sorong&quot;,&quot;Ternate&quot;,&quot;Abepura&quot;],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Iran&quot;,&quot;utc&quot;:&quot;+3:30&quot;,&quot;timezone&quot;:&quot;Asia/Tehran&quot;,&quot;cityList&quot;:[&quot;Tehran&quot;,&quot;Mashhad&quot;,&quot;Isfahan&quot;,&quot;Karaj&quot;,&quot;Tabriz&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Iraq&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Asia/Baghdad&quot;,&quot;cityList&quot;:[&quot;Baghdad&quot;,&quot;Basrah&quot;,&quot;Al Mawşil al Jadīdah&quot;,&quot;Al Başrah al Qadīmah&quot;,&quot;Mosul&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ireland&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Europe/Dublin&quot;,&quot;cityList&quot;:[&quot;Dublin&quot;,&quot;Cork&quot;,&quot;Luimneach&quot;,&quot;Gaillimh&quot;,&quot;Tallaght&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Isle of Man&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Europe/Isle_of_Man&quot;,&quot;cityList&quot;:[&quot;Douglas&quot;,&quot;Ramsey&quot;,&quot;Peel&quot;,&quot;Port Erin&quot;,&quot;Castletown&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Israel&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Asia/Jerusalem&quot;,&quot;cityList&quot;:[&quot;Jerusalem&quot;,&quot;Tel Aviv&quot;,&quot;West Jerusalem&quot;,&quot;Haifa&quot;,&quot;Ashdod&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Italy&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Rome&quot;,&quot;cityList&quot;:[&quot;Rome&quot;,&quot;Milan&quot;,&quot;Naples&quot;,&quot;Turin&quot;,&quot;Palermo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ivory Coast&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Abidjan&quot;,&quot;cityList&quot;:[&quot;Abidjan&quot;,&quot;Abobo&quot;,&quot;Bouaké&quot;,&quot;Daloa&quot;,&quot;San-Pédro&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Jamaica&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Jamaica&quot;,&quot;cityList&quot;:[&quot;Kingston&quot;,&quot;New Kingston&quot;,&quot;Spanish Town&quot;,&quot;Portmore&quot;,&quot;Montego Bay&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Japan&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Asia/Tokyo&quot;,&quot;cityList&quot;:[&quot;Tokyo&quot;,&quot;Yokohama&quot;,&quot;Osaka&quot;,&quot;Nagoya&quot;,&quot;Sapporo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Jersey&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Europe/Jersey&quot;,&quot;cityList&quot;:[&quot;Saint Helier&quot;,&quot;Le Hocq&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Jordan&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Asia/Amman&quot;,&quot;cityList&quot;:[&quot;Amman&quot;,&quot;Zarqa&quot;,&quot;Irbid&quot;,&quot;Russeifa&quot;,&quot;Wādī as Sīr&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kazakhstan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Aqtau&quot;,&quot;cityList&quot;:[&quot;Shevchenko&quot;,&quot;Zhanaozen&quot;,&quot;Beyneu&quot;,&quot;Shetpe&quot;,&quot;Yeraliyev&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kazakhstan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Aqtobe&quot;,&quot;cityList&quot;:[&quot;Aktobe&quot;,&quot;Kandyagash&quot;,&quot;Shalqar&quot;,&quot;Khromtau&quot;,&quot;Embi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kazakhstan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Atyrau&quot;,&quot;cityList&quot;:[&quot;Atyrau&quot;,&quot;Qulsary&quot;,&quot;Shalkar&quot;,&quot;Balykshi&quot;,&quot;Maqat&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kazakhstan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Oral&quot;,&quot;cityList&quot;:[&quot;Oral&quot;,&quot;Aqsay&quot;,&quot;Zhänibek&quot;,&quot;Tasqala&quot;,&quot;Zhumysker&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kazakhstan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Qyzylorda&quot;,&quot;cityList&quot;:[&quot;Kyzylorda&quot;,&quot;Baikonur&quot;,&quot;Novokazalinsk&quot;,&quot;Aral&quot;,&quot;Chiili&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kazakhstan&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Asia/Almaty&quot;,&quot;cityList&quot;:[&quot;Almaty&quot;,&quot;Karagandy&quot;,&quot;Shymkent&quot;,&quot;Taraz&quot;,&quot;Nur-Sultan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kazakhstan&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Asia/Qostanay&quot;,&quot;cityList&quot;:[&quot;Kostanay&quot;,&quot;Rudnyy&quot;,&quot;Dzhetygara&quot;,&quot;Arkalyk&quot;,&quot;Lisakovsk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kenya&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Africa/Nairobi&quot;,&quot;cityList&quot;:[&quot;Nairobi&quot;,&quot;Mombasa&quot;,&quot;Nakuru&quot;,&quot;Eldoret&quot;,&quot;Kisumu&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kiribati&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Tarawa&quot;,&quot;cityList&quot;:[&quot;Tarawa&quot;,&quot;Betio Village&quot;,&quot;Bikenibeu Village&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kiribati&quot;,&quot;utc&quot;:&quot;+13&quot;,&quot;timezone&quot;:&quot;Pacific/Enderbury&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-06 01:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kiribati&quot;,&quot;utc&quot;:&quot;+14&quot;,&quot;timezone&quot;:&quot;Pacific/Kiritimati&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-06 02:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kuwait&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Asia/Kuwait&quot;,&quot;cityList&quot;:[&quot;Al Aḩmadī&quot;,&quot;Ḩawallī&quot;,&quot;As Sālimīyah&quot;,&quot;Şabāḩ as Sālim&quot;,&quot;Al Farwānīyah&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Kyrgyzstan&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Asia/Bishkek&quot;,&quot;cityList&quot;:[&quot;Bishkek&quot;,&quot;Osh&quot;,&quot;Jalal-Abad&quot;,&quot;Karakol&quot;,&quot;Tokmok&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Laos&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Vientiane&quot;,&quot;cityList&quot;:[&quot;Vientiane&quot;,&quot;Pakse&quot;,&quot;Thakhèk&quot;,&quot;Savannakhet&quot;,&quot;Luang Prabang&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Latvia&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Riga&quot;,&quot;cityList&quot;:[&quot;Riga&quot;,&quot;Daugavpils&quot;,&quot;Liepāja&quot;,&quot;Jelgava&quot;,&quot;Jūrmala&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Lebanon&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Asia/Beirut&quot;,&quot;cityList&quot;:[&quot;Beirut&quot;,&quot;Ra’s Bayrūt&quot;,&quot;Tripoli&quot;,&quot;Sidon&quot;,&quot;Tyre&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Lesotho&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Maseru&quot;,&quot;cityList&quot;:[&quot;Maseru&quot;,&quot;Mafeteng&quot;,&quot;Leribe&quot;,&quot;Maputsoe&quot;,&quot;Mohale’s Hoek&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Liberia&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Monrovia&quot;,&quot;cityList&quot;:[&quot;Monrovia&quot;,&quot;Gbarnga&quot;,&quot;Kakata&quot;,&quot;Bensonville&quot;,&quot;Harper&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Libya&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Tripoli&quot;,&quot;cityList&quot;:[&quot;Tripoli&quot;,&quot;Benghazi&quot;,&quot;Mişrātah&quot;,&quot;Tarhuna&quot;,&quot;Al Khums&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Liechtenstein&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Vaduz&quot;,&quot;cityList&quot;:[&quot;Schaan&quot;,&quot;Vaduz&quot;,&quot;Triesen&quot;,&quot;Balzers&quot;,&quot;Eschen&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Lithuania&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Vilnius&quot;,&quot;cityList&quot;:[&quot;Vilnius&quot;,&quot;Kaunas&quot;,&quot;Klaipėda&quot;,&quot;Šiauliai&quot;,&quot;Panevėžys&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Luxembourg&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Luxembourg&quot;,&quot;cityList&quot;:[&quot;Luxembourg&quot;,&quot;Esch-sur-Alzette&quot;,&quot;Dudelange&quot;,&quot;Schifflange&quot;,&quot;Bettembourg&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Macao&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Macau&quot;,&quot;cityList&quot;:[&quot;Macau&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Madagascar&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Indian/Antananarivo&quot;,&quot;cityList&quot;:[&quot;Antananarivo&quot;,&quot;Toamasina&quot;,&quot;Antsirabe&quot;,&quot;Fianarantsoa&quot;,&quot;Mahajanga&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Malawi&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Blantyre&quot;,&quot;cityList&quot;:[&quot;Lilongwe&quot;,&quot;Blantyre&quot;,&quot;Mzuzu&quot;,&quot;Zomba&quot;,&quot;Kasungu&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Malaysia&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Kuala_Lumpur&quot;,&quot;cityList&quot;:[&quot;Kota Bharu&quot;,&quot;Kuala Lumpur&quot;,&quot;Klang&quot;,&quot;Kampung Baru Subang&quot;,&quot;Johor Bahru&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Malaysia&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Kuching&quot;,&quot;cityList&quot;:[&quot;Kuching&quot;,&quot;Kota Kinabalu&quot;,&quot;Sandakan&quot;,&quot;Tawau&quot;,&quot;Miri&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Maldives&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Indian/Maldives&quot;,&quot;cityList&quot;:[&quot;Male&quot;,&quot;Fuvahmulah&quot;,&quot;Hithadhoo&quot;,&quot;Kulhudhuffushi&quot;,&quot;Thinadhoo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mali&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Bamako&quot;,&quot;cityList&quot;:[&quot;Bamako&quot;,&quot;Sikasso&quot;,&quot;Mopti&quot;,&quot;Koutiala&quot;,&quot;Ségou&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Malta&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Malta&quot;,&quot;cityList&quot;:[&quot;Birkirkara&quot;,&quot;Qormi&quot;,&quot;Mosta&quot;,&quot;Żabbar&quot;,&quot;San Pawl il-Baħar&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Marshall Islands&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Kwajalein&quot;,&quot;cityList&quot;:[&quot;Ebaye&quot;,&quot;Jabat&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Marshall Islands&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Majuro&quot;,&quot;cityList&quot;:[&quot;Majuro&quot;,&quot;Arno&quot;,&quot;Jabor&quot;,&quot;Wotje&quot;,&quot;Mili&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Martinique&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Martinique&quot;,&quot;cityList&quot;:[&quot;Fort-de-France&quot;,&quot;Le Lamentin&quot;,&quot;Le Robert&quot;,&quot;Sainte-Marie&quot;,&quot;Le François&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mauritania&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Nouakchott&quot;,&quot;cityList&quot;:[&quot;Nouakchott&quot;,&quot;Nouadhibou&quot;,&quot;Néma&quot;,&quot;Kaédi&quot;,&quot;Rosso&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mauritius&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Indian/Mauritius&quot;,&quot;cityList&quot;:[&quot;Port Louis&quot;,&quot;Beau Bassin-Rose Hill&quot;,&quot;Vacoas&quot;,&quot;Curepipe&quot;,&quot;Quatre Bornes&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mayotte&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Indian/Mayotte&quot;,&quot;cityList&quot;:[&quot;Mamoudzou&quot;,&quot;Koungou&quot;,&quot;Dzaoudzi&quot;,&quot;Dembeni&quot;,&quot;Sada&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-8&quot;,&quot;timezone&quot;:&quot;America/Tijuana&quot;,&quot;cityList&quot;:[&quot;Tijuana&quot;,&quot;Mexicali&quot;,&quot;Ensenada&quot;,&quot;Rosarito&quot;,&quot;Tecate&quot;],&quot;currentTime&quot;:&quot;2023-01-05 04:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Chihuahua&quot;,&quot;cityList&quot;:[&quot;Chihuahua&quot;,&quot;Ciudad Delicias&quot;,&quot;Cuauhtémoc&quot;,&quot;Parral&quot;,&quot;Nuevo Casas Grandes&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Hermosillo&quot;,&quot;cityList&quot;:[&quot;Hermosillo&quot;,&quot;Ciudad Obregón&quot;,&quot;Nogales&quot;,&quot;San Luis Río Colorado&quot;,&quot;Navojoa&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Mazatlan&quot;,&quot;cityList&quot;:[&quot;Culiacán&quot;,&quot;Mazatlán&quot;,&quot;Tepic&quot;,&quot;Los Mochis&quot;,&quot;La Paz&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Ojinaga&quot;,&quot;cityList&quot;:[&quot;Ciudad Juárez&quot;,&quot;Manuel Ojinaga&quot;,&quot;Ojinaga&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Bahia_Banderas&quot;,&quot;cityList&quot;:[&quot;Mezcales&quot;,&quot;San Vicente&quot;,&quot;Bucerías&quot;,&quot;Valle de Banderas&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Matamoros&quot;,&quot;cityList&quot;:[&quot;Reynosa&quot;,&quot;Heroica Matamoros&quot;,&quot;Nuevo Laredo&quot;,&quot;Piedras Negras&quot;,&quot;Ciudad Acuña&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Merida&quot;,&quot;cityList&quot;:[&quot;Mérida&quot;,&quot;Campeche&quot;,&quot;Ciudad del Carmen&quot;,&quot;Kanasín&quot;,&quot;Valladolid&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Mexico_City&quot;,&quot;cityList&quot;:[&quot;Mexico City&quot;,&quot;Iztapalapa&quot;,&quot;Ecatepec de Morelos&quot;,&quot;Guadalajara&quot;,&quot;Puebla&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Monterrey&quot;,&quot;cityList&quot;:[&quot;Monterrey&quot;,&quot;Saltillo&quot;,&quot;Guadalupe&quot;,&quot;Torreón&quot;,&quot;Victoria de Durango&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mexico&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Cancun&quot;,&quot;cityList&quot;:[&quot;Cancún&quot;,&quot;Chetumal&quot;,&quot;Playa del Carmen&quot;,&quot;Cozumel&quot;,&quot;Felipe Carrillo Puerto&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Micronesia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Pacific/Chuuk&quot;,&quot;cityList&quot;:[&quot;Weno&quot;,&quot;Colonia&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Micronesia&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Pacific/Kosrae&quot;,&quot;cityList&quot;:[&quot;Tofol&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Micronesia&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Pacific/Pohnpei&quot;,&quot;cityList&quot;:[&quot;Kolonia&quot;,&quot;Kolonia Town&quot;,&quot;Palikir - National Government Center&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Moldova&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Chisinau&quot;,&quot;cityList&quot;:[&quot;Chisinau&quot;,&quot;Tiraspol&quot;,&quot;Bălţi&quot;,&quot;Bender&quot;,&quot;Rîbniţa&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Monaco&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Monaco&quot;,&quot;cityList&quot;:[&quot;Monaco&quot;,&quot;Monte-Carlo&quot;,&quot;La Condamine&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mongolia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Hovd&quot;,&quot;cityList&quot;:[&quot;Khovd&quot;,&quot;Ölgii&quot;,&quot;Ulaangom&quot;,&quot;Uliastay&quot;,&quot;Altai&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mongolia&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Choibalsan&quot;,&quot;cityList&quot;:[&quot;Baruun-Urt&quot;,&quot;Choibalsan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mongolia&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Ulaanbaatar&quot;,&quot;cityList&quot;:[&quot;Ulan Bator&quot;,&quot;Erdenet&quot;,&quot;Darhan&quot;,&quot;Hovd&quot;,&quot;Mörön&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Montenegro&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Podgorica&quot;,&quot;cityList&quot;:[&quot;Podgorica&quot;,&quot;Nikšić&quot;,&quot;Herceg Novi&quot;,&quot;Pljevlja&quot;,&quot;Budva&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Montserrat&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Montserrat&quot;,&quot;cityList&quot;:[&quot;Brades&quot;,&quot;Saint Peters&quot;,&quot;Plymouth&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Morocco&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Casablanca&quot;,&quot;cityList&quot;:[&quot;Casablanca&quot;,&quot;Rabat&quot;,&quot;Fès&quot;,&quot;Sale&quot;,&quot;Marrakesh&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Mozambique&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Maputo&quot;,&quot;cityList&quot;:[&quot;Maputo&quot;,&quot;Matola&quot;,&quot;Beira&quot;,&quot;Nampula&quot;,&quot;Chimoio&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Myanmar&quot;,&quot;utc&quot;:&quot;+6:30&quot;,&quot;timezone&quot;:&quot;Asia/Yangon&quot;,&quot;cityList&quot;:[&quot;Yangon&quot;,&quot;Mandalay&quot;,&quot;Nay Pyi Taw&quot;,&quot;Mawlamyine&quot;,&quot;Kyain Seikgyi Township&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Namibia&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Windhoek&quot;,&quot;cityList&quot;:[&quot;Windhoek&quot;,&quot;Rundu&quot;,&quot;Walvis Bay&quot;,&quot;Oshakati&quot;,&quot;Swakopmund&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Nauru&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Nauru&quot;,&quot;cityList&quot;:[&quot;Yaren&quot;,&quot;Baiti&quot;,&quot;Anabar&quot;,&quot;Uaboe&quot;,&quot;Ijuw&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Nepal&quot;,&quot;utc&quot;:&quot;+5:45&quot;,&quot;timezone&quot;:&quot;Asia/Kathmandu&quot;,&quot;cityList&quot;:[&quot;Kathmandu&quot;,&quot;Pokhara&quot;,&quot;Pātan&quot;,&quot;Biratnagar&quot;,&quot;Birgañj&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:32:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Netherlands&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Amsterdam&quot;,&quot;cityList&quot;:[&quot;Amsterdam&quot;,&quot;Rotterdam&quot;,&quot;The Hague&quot;,&quot;Utrecht&quot;,&quot;Eindhoven&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;New Caledonia&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Pacific/Noumea&quot;,&quot;cityList&quot;:[&quot;Nouméa&quot;,&quot;Mont-Dore&quot;,&quot;Dumbéa&quot;,&quot;Païta&quot;,&quot;Wé&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;New Zealand&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Auckland&quot;,&quot;cityList&quot;:[&quot;Auckland&quot;,&quot;Wellington&quot;,&quot;Christchurch&quot;,&quot;Manukau City&quot;,&quot;North Shore&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;New Zealand&quot;,&quot;utc&quot;:&quot;+12:45&quot;,&quot;timezone&quot;:&quot;Pacific/Chatham&quot;,&quot;cityList&quot;:[&quot;Waitangi&quot;],&quot;currentTime&quot;:&quot;2023-01-06 01:32:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Nicaragua&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Managua&quot;,&quot;cityList&quot;:[&quot;Managua&quot;,&quot;León&quot;,&quot;Masaya&quot;,&quot;Chinandega&quot;,&quot;Matagalpa&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Niger&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Niamey&quot;,&quot;cityList&quot;:[&quot;Niamey&quot;,&quot;Zinder&quot;,&quot;Maradi&quot;,&quot;Agadez&quot;,&quot;Alaghsas&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Nigeria&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Lagos&quot;,&quot;cityList&quot;:[&quot;Lagos&quot;,&quot;Kano&quot;,&quot;Ibadan&quot;,&quot;Kaduna&quot;,&quot;Port Harcourt&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Niue&quot;,&quot;utc&quot;:&quot;-11&quot;,&quot;timezone&quot;:&quot;Pacific/Niue&quot;,&quot;cityList&quot;:[&quot;Alofi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 01:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Norfolk Island&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Pacific/Norfolk&quot;,&quot;cityList&quot;:[&quot;Kingston&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;North Korea&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Asia/Pyongyang&quot;,&quot;cityList&quot;:[&quot;Pyongyang&quot;,&quot;Hamhŭng&quot;,&quot;Namp’o&quot;,&quot;Sunch’ŏn&quot;,&quot;Hŭngnam&quot;],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;North Macedonia&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Skopje&quot;,&quot;cityList&quot;:[&quot;Skopje&quot;,&quot;Bitola&quot;,&quot;Kumanovo&quot;,&quot;Prilep&quot;,&quot;Tetovo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Northern Mariana Islands&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Pacific/Saipan&quot;,&quot;cityList&quot;:[&quot;Saipan&quot;,&quot;San Jose Village&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Norway&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Oslo&quot;,&quot;cityList&quot;:[&quot;Oslo&quot;,&quot;Bergen&quot;,&quot;Trondheim&quot;,&quot;Stavanger&quot;,&quot;Drammen&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Oman&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Asia/Muscat&quot;,&quot;cityList&quot;:[&quot;Muscat&quot;,&quot;Seeb&quot;,&quot;Şalālah&quot;,&quot;Bawshar&quot;,&quot;Sohar&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Pakistan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Karachi&quot;,&quot;cityList&quot;:[&quot;Karachi&quot;,&quot;Lahore&quot;,&quot;Faisalabad&quot;,&quot;Rawalpindi&quot;,&quot;Multan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Palau&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Pacific/Palau&quot;,&quot;cityList&quot;:[&quot;Koror&quot;,&quot;Koror Town&quot;,&quot;Kloulklubed&quot;,&quot;Ulimang&quot;,&quot;Mengellang&quot;],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Palestinian Territory&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Asia/Gaza&quot;,&quot;cityList&quot;:[&quot;Gaza&quot;,&quot;Khān Yūnis&quot;,&quot;Jabālyā&quot;,&quot;Rafaḩ&quot;,&quot;Dayr al Balaḩ&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Palestinian Territory&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Asia/Hebron&quot;,&quot;cityList&quot;:[&quot;East Jerusalem&quot;,&quot;Hebron&quot;,&quot;Nablus&quot;,&quot;Battir&quot;,&quot;Ţūlkarm&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Panama&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Panama&quot;,&quot;cityList&quot;:[&quot;Panamá&quot;,&quot;San Miguelito&quot;,&quot;Juan Díaz&quot;,&quot;David&quot;,&quot;Arraiján&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Papua New Guinea&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Pacific/Port_Moresby&quot;,&quot;cityList&quot;:[&quot;Port Moresby&quot;,&quot;Lae&quot;,&quot;Mount Hagen&quot;,&quot;Popondetta&quot;,&quot;Madang&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Papua New Guinea&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Pacific/Bougainville&quot;,&quot;cityList&quot;:[&quot;Arawa&quot;,&quot;Buka&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Paraguay&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Asuncion&quot;,&quot;cityList&quot;:[&quot;Asunción&quot;,&quot;Ciudad del Este&quot;,&quot;San Lorenzo&quot;,&quot;Capiatá&quot;,&quot;Lambaré&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Peru&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Lima&quot;,&quot;cityList&quot;:[&quot;Lima&quot;,&quot;Arequipa&quot;,&quot;Callao&quot;,&quot;Trujillo&quot;,&quot;Chiclayo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Philippines&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Manila&quot;,&quot;cityList&quot;:[&quot;Quezon City&quot;,&quot;Manila&quot;,&quot;Caloocan City&quot;,&quot;Budta&quot;,&quot;Davao&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Pitcairn&quot;,&quot;utc&quot;:&quot;-8&quot;,&quot;timezone&quot;:&quot;Pacific/Pitcairn&quot;,&quot;cityList&quot;:[&quot;Adamstown&quot;],&quot;currentTime&quot;:&quot;2023-01-05 04:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Poland&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Warsaw&quot;,&quot;cityList&quot;:[&quot;Warsaw&quot;,&quot;Łódź&quot;,&quot;Kraków&quot;,&quot;Wrocław&quot;,&quot;Poznań&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Portugal&quot;,&quot;utc&quot;:&quot;-1&quot;,&quot;timezone&quot;:&quot;Atlantic/Azores&quot;,&quot;cityList&quot;:[&quot;Ponta Delgada&quot;,&quot;Lagoa&quot;,&quot;Angra do Heroísmo&quot;,&quot;Rosto de Cão&quot;,&quot;Rabo de Peixe&quot;],&quot;currentTime&quot;:&quot;2023-01-05 11:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Portugal&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Atlantic/Madeira&quot;,&quot;cityList&quot;:[&quot;Funchal&quot;,&quot;Câmara de Lobos&quot;,&quot;São Martinho&quot;,&quot;Caniço&quot;,&quot;Machico&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Portugal&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Europe/Lisbon&quot;,&quot;cityList&quot;:[&quot;Lisbon&quot;,&quot;Porto&quot;,&quot;Amadora&quot;,&quot;Braga&quot;,&quot;Setúbal&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Puerto Rico&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Puerto_Rico&quot;,&quot;cityList&quot;:[&quot;San Juan&quot;,&quot;Bayamón&quot;,&quot;Carolina&quot;,&quot;Ponce&quot;,&quot;Caguas&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Qatar&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Asia/Qatar&quot;,&quot;cityList&quot;:[&quot;Doha&quot;,&quot;Ar Rayyān&quot;,&quot;Umm Şalāl Muḩammad&quot;,&quot;Al Wakrah&quot;,&quot;Al Khawr&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Republic of the Congo&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Brazzaville&quot;,&quot;cityList&quot;:[&quot;Brazzaville&quot;,&quot;Pointe-Noire&quot;,&quot;Dolisie&quot;,&quot;Kayes&quot;,&quot;Owando&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Reunion&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Indian/Reunion&quot;,&quot;cityList&quot;:[&quot;Saint-Denis&quot;,&quot;Saint-Paul&quot;,&quot;Saint-Pierre&quot;,&quot;Le Tampon&quot;,&quot;Saint-André&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Romania&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Bucharest&quot;,&quot;cityList&quot;:[&quot;Bucharest&quot;,&quot;Sector 3&quot;,&quot;Sector 6&quot;,&quot;Sector 2&quot;,&quot;Iaşi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Kaliningrad&quot;,&quot;cityList&quot;:[&quot;Kaliningrad&quot;,&quot;Chernyakhovsk&quot;,&quot;Sovetsk&quot;,&quot;Baltiysk&quot;,&quot;Gusev&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Europe/Kirov&quot;,&quot;cityList&quot;:[&quot;Kirov&quot;,&quot;Kirovo-Chepetsk&quot;,&quot;Vyatskiye Polyany&quot;,&quot;Slobodskoy&quot;,&quot;Kotel’nich&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Europe/Moscow&quot;,&quot;cityList&quot;:[&quot;Moscow&quot;,&quot;Saint Petersburg&quot;,&quot;Nizhniy Novgorod&quot;,&quot;Kazan&quot;,&quot;Rostov-na-Donu&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Europe/Simferopol&quot;,&quot;cityList&quot;:[&quot;Simferopol&quot;,&quot;Kerch&quot;,&quot;Yevpatoriya&quot;,&quot;Yalta&quot;,&quot;Feodosiya&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Europe/Volgograd&quot;,&quot;cityList&quot;:[&quot;Volgograd&quot;,&quot;Volzhskiy&quot;,&quot;Kamyshin&quot;,&quot;Mikhaylovka&quot;,&quot;Uryupinsk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Europe/Astrakhan&quot;,&quot;cityList&quot;:[&quot;Astrakhan&quot;,&quot;Akhtubinsk&quot;,&quot;Znamensk&quot;,&quot;Kharabali&quot;,&quot;Kamyzyak&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Europe/Samara&quot;,&quot;cityList&quot;:[&quot;Samara&quot;,&quot;Togliatti-on-the-Volga&quot;,&quot;Izhevsk&quot;,&quot;Syzran’&quot;,&quot;Novokuybyshevsk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Europe/Saratov&quot;,&quot;cityList&quot;:[&quot;Saratov&quot;,&quot;Balakovo&quot;,&quot;Engel’s&quot;,&quot;Balashov&quot;,&quot;Vol’sk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Europe/Ulyanovsk&quot;,&quot;cityList&quot;:[&quot;Ulyanovsk&quot;,&quot;Dimitrovgrad&quot;,&quot;Inza&quot;,&quot;Barysh&quot;,&quot;Novoul’yanovsk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Yekaterinburg&quot;,&quot;cityList&quot;:[&quot;Yekaterinburg&quot;,&quot;Chelyabinsk&quot;,&quot;Ufa&quot;,&quot;Perm&quot;,&quot;Orenburg&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+6&quot;,&quot;timezone&quot;:&quot;Asia/Omsk&quot;,&quot;cityList&quot;:[&quot;Omsk&quot;,&quot;Tara&quot;,&quot;Kalachinsk&quot;,&quot;Znamenskoye&quot;,&quot;Tavricheskoye&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Barnaul&quot;,&quot;cityList&quot;:[&quot;Barnaul&quot;,&quot;Biysk&quot;,&quot;Rubtsovsk&quot;,&quot;Novoaltaysk&quot;,&quot;Gorno-Altaysk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Krasnoyarsk&quot;,&quot;cityList&quot;:[&quot;Krasnoyarsk&quot;,&quot;Abakan&quot;,&quot;Norilsk&quot;,&quot;Achinsk&quot;,&quot;Kyzyl&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Novokuznetsk&quot;,&quot;cityList&quot;:[&quot;Novokuznetsk&quot;,&quot;Kemerovo&quot;,&quot;Prokop’yevsk&quot;,&quot;Leninsk-Kuznetsky&quot;,&quot;Kiselëvsk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Novosibirsk&quot;,&quot;cityList&quot;:[&quot;Novosibirsk&quot;,&quot;Berdsk&quot;,&quot;Iskitim&quot;,&quot;Akademgorodok&quot;,&quot;Kuybyshev&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Tomsk&quot;,&quot;cityList&quot;:[&quot;Tomsk&quot;,&quot;Seversk&quot;,&quot;Strezhevoy&quot;,&quot;Kolpashevo&quot;,&quot;Asino&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Irkutsk&quot;,&quot;cityList&quot;:[&quot;Irkutsk&quot;,&quot;Ulan-Ude&quot;,&quot;Bratsk&quot;,&quot;Angarsk&quot;,&quot;Ust’-Ilimsk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Asia/Chita&quot;,&quot;cityList&quot;:[&quot;Chita&quot;,&quot;Krasnokamensk&quot;,&quot;Borzya&quot;,&quot;Petrovsk-Zabaykal’skiy&quot;,&quot;Aginskoye&quot;],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Asia/Khandyga&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Asia/Yakutsk&quot;,&quot;cityList&quot;:[&quot;Yakutsk&quot;,&quot;Blagoveshchensk&quot;,&quot;Belogorsk&quot;,&quot;Neryungri&quot;,&quot;Svobodnyy&quot;],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Asia/Ust-Nera&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+10&quot;,&quot;timezone&quot;:&quot;Asia/Vladivostok&quot;,&quot;cityList&quot;:[&quot;Vladivostok&quot;,&quot;Khabarovsk&quot;,&quot;Khabarovsk Vtoroy&quot;,&quot;Komsomolsk-on-Amur&quot;,&quot;Ussuriysk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 22:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Asia/Magadan&quot;,&quot;cityList&quot;:[&quot;Magadan&quot;,&quot;Ust-Nera&quot;,&quot;Susuman&quot;,&quot;Ola&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Asia/Sakhalin&quot;,&quot;cityList&quot;:[&quot;Yuzhno-Sakhalinsk&quot;,&quot;Korsakov&quot;,&quot;Kholmsk&quot;,&quot;Okha&quot;,&quot;Nevel’sk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Asia/Srednekolymsk&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Asia/Anadyr&quot;,&quot;cityList&quot;:[&quot;Anadyr&quot;,&quot;Bilibino&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Russia&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Asia/Kamchatka&quot;,&quot;cityList&quot;:[&quot;Petropavlovsk-Kamchatsky&quot;,&quot;Yelizovo&quot;,&quot;Vilyuchinsk&quot;,&quot;Klyuchi&quot;,&quot;Mil’kovo&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Rwanda&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Kigali&quot;,&quot;cityList&quot;:[&quot;Kigali&quot;,&quot;Butare&quot;,&quot;Gitarama&quot;,&quot;Musanze&quot;,&quot;Gisenyi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Saint Barthelemy&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/St_Barthelemy&quot;,&quot;cityList&quot;:[&quot;Gustavia&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Saint Helena&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Atlantic/St_Helena&quot;,&quot;cityList&quot;:[&quot;Jamestown&quot;,&quot;Georgetown&quot;,&quot;Edinburgh of the Seven Seas&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Saint Kitts and Nevis&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/St_Kitts&quot;,&quot;cityList&quot;:[&quot;Basseterre&quot;,&quot;Fig Tree&quot;,&quot;Market Shop&quot;,&quot;Saint Paul’s&quot;,&quot;Middle Island&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Saint Lucia&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/St_Lucia&quot;,&quot;cityList&quot;:[&quot;Castries&quot;,&quot;Bisee&quot;,&quot;Vieux Fort&quot;,&quot;Micoud&quot;,&quot;Soufrière&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Saint Martin&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Marigot&quot;,&quot;cityList&quot;:[&quot;Marigot&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Saint Pierre and Miquelon&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Miquelon&quot;,&quot;cityList&quot;:[&quot;Saint-Pierre&quot;,&quot;Miquelon&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Saint Vincent and the Grenadines&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/St_Vincent&quot;,&quot;cityList&quot;:[&quot;Kingstown&quot;,&quot;Kingstown Park&quot;,&quot;Georgetown&quot;,&quot;Barrouallie&quot;,&quot;Port Elizabeth&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Samoa&quot;,&quot;utc&quot;:&quot;+13&quot;,&quot;timezone&quot;:&quot;Pacific/Apia&quot;,&quot;cityList&quot;:[&quot;Apia&quot;,&quot;Asau&quot;,&quot;Mulifanua&quot;,&quot;Afega&quot;,&quot;Leulumoega&quot;],&quot;currentTime&quot;:&quot;2023-01-06 01:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;San Marino&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/San_Marino&quot;,&quot;cityList&quot;:[&quot;Serravalle&quot;,&quot;Borgo Maggiore&quot;,&quot;San Marino&quot;,&quot;Domagnano&quot;,&quot;Fiorentino&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Sao Tome and Principe&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Sao_Tome&quot;,&quot;cityList&quot;:[&quot;São Tomé&quot;,&quot;Santo António&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Saudi Arabia&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Asia/Riyadh&quot;,&quot;cityList&quot;:[&quot;Riyadh&quot;,&quot;Jeddah&quot;,&quot;Mecca&quot;,&quot;Medina&quot;,&quot;Sulţānah&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Senegal&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Dakar&quot;,&quot;cityList&quot;:[&quot;Dakar&quot;,&quot;Pikine&quot;,&quot;Touba&quot;,&quot;Thiès&quot;,&quot;Thiès Nones&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Serbia&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Belgrade&quot;,&quot;cityList&quot;:[&quot;Belgrade&quot;,&quot;Pristina&quot;,&quot;Niš&quot;,&quot;Novi Sad&quot;,&quot;Prizren&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Seychelles&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Indian/Mahe&quot;,&quot;cityList&quot;:[&quot;Victoria&quot;,&quot;Anse Boileau&quot;,&quot;Bel Ombre&quot;,&quot;Beau Vallon&quot;,&quot;Cascade&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Sierra Leone&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Freetown&quot;,&quot;cityList&quot;:[&quot;Freetown&quot;,&quot;Bo&quot;,&quot;Kenema&quot;,&quot;Koidu&quot;,&quot;Makeni&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Singapore&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Singapore&quot;,&quot;cityList&quot;:[&quot;Singapore&quot;,&quot;Woodlands&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Sint Maarten&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Lower_Princes&quot;,&quot;cityList&quot;:[&quot;Cul de Sac&quot;,&quot;Lower Prince’s Quarter&quot;,&quot;Koolbaai&quot;,&quot;Philipsburg&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Slovakia&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Bratislava&quot;,&quot;cityList&quot;:[&quot;Bratislava&quot;,&quot;Košice&quot;,&quot;Prešov&quot;,&quot;Nitra&quot;,&quot;Žilina&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Slovenia&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Ljubljana&quot;,&quot;cityList&quot;:[&quot;Ljubljana&quot;,&quot;Maribor&quot;,&quot;Celje&quot;,&quot;Kranj&quot;,&quot;Velenje&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Solomon Islands&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Pacific/Guadalcanal&quot;,&quot;cityList&quot;:[&quot;Honiara&quot;,&quot;Malango&quot;,&quot;Auki&quot;,&quot;Gizo&quot;,&quot;Buala&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Somalia&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Africa/Mogadishu&quot;,&quot;cityList&quot;:[&quot;Mogadishu&quot;,&quot;Hargeysa&quot;,&quot;Berbera&quot;,&quot;Kismayo&quot;,&quot;Marka&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;South Africa&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Johannesburg&quot;,&quot;cityList&quot;:[&quot;Cape Town&quot;,&quot;Durban&quot;,&quot;Johannesburg&quot;,&quot;Soweto&quot;,&quot;Pretoria&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;South Georgia and the South Sandwich Islands&quot;,&quot;utc&quot;:&quot;-2&quot;,&quot;timezone&quot;:&quot;Atlantic/South_Georgia&quot;,&quot;cityList&quot;:[&quot;Grytviken&quot;],&quot;currentTime&quot;:&quot;2023-01-05 10:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;South Korea&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Asia/Seoul&quot;,&quot;cityList&quot;:[&quot;Seoul&quot;,&quot;Busan&quot;,&quot;Incheon&quot;,&quot;Daegu&quot;,&quot;Daejeon&quot;],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;South Sudan&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Juba&quot;,&quot;cityList&quot;:[&quot;Juba&quot;,&quot;Winejok&quot;,&quot;Malakal&quot;,&quot;Wau&quot;,&quot;Kuacjok&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Spain&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Atlantic/Canary&quot;,&quot;cityList&quot;:[&quot;Las Palmas de Gran Canaria&quot;,&quot;Santa Cruz de Tenerife&quot;,&quot;La Laguna&quot;,&quot;Telde&quot;,&quot;Arona&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Spain&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Ceuta&quot;,&quot;cityList&quot;:[&quot;Ceuta&quot;,&quot;Melilla&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Spain&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Madrid&quot;,&quot;cityList&quot;:[&quot;Madrid&quot;,&quot;Barcelona&quot;,&quot;Valencia&quot;,&quot;Sevilla&quot;,&quot;Zaragoza&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Sri Lanka&quot;,&quot;utc&quot;:&quot;+5:30&quot;,&quot;timezone&quot;:&quot;Asia/Colombo&quot;,&quot;cityList&quot;:[&quot;Colombo&quot;,&quot;Dehiwala-Mount Lavinia&quot;,&quot;Moratuwa&quot;,&quot;Jaffna&quot;,&quot;Negombo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 18:17:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Sudan&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Khartoum&quot;,&quot;cityList&quot;:[&quot;Khartoum&quot;,&quot;Omdurman&quot;,&quot;Nyala&quot;,&quot;Port Sudan&quot;,&quot;Kassala&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Suriname&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Paramaribo&quot;,&quot;cityList&quot;:[&quot;Paramaribo&quot;,&quot;Lelydorp&quot;,&quot;Brokopondo&quot;,&quot;Nieuw Nickerie&quot;,&quot;Moengo&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Svalbard and Jan Mayen&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Arctic/Longyearbyen&quot;,&quot;cityList&quot;:[&quot;Longyearbyen&quot;,&quot;Olonkinbyen&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Sweden&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Stockholm&quot;,&quot;cityList&quot;:[&quot;Stockholm&quot;,&quot;Göteborg&quot;,&quot;Malmö&quot;,&quot;Uppsala&quot;,&quot;Sollentuna&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Switzerland&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Zurich&quot;,&quot;cityList&quot;:[&quot;Zürich&quot;,&quot;Genève&quot;,&quot;Basel&quot;,&quot;Lausanne&quot;,&quot;Bern&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Syria&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Asia/Damascus&quot;,&quot;cityList&quot;:[&quot;Aleppo&quot;,&quot;Damascus&quot;,&quot;Homs&quot;,&quot;Ḩamāh&quot;,&quot;Latakia&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Taiwan&quot;,&quot;utc&quot;:&quot;+8&quot;,&quot;timezone&quot;:&quot;Asia/Taipei&quot;,&quot;cityList&quot;:[&quot;Taipei&quot;,&quot;Kaohsiung&quot;,&quot;Taichung&quot;,&quot;Tainan&quot;,&quot;Banqiao&quot;],&quot;currentTime&quot;:&quot;2023-01-05 20:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Tajikistan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Dushanbe&quot;,&quot;cityList&quot;:[&quot;Dushanbe&quot;,&quot;Khujand&quot;,&quot;Kŭlob&quot;,&quot;Bokhtar&quot;,&quot;Istaravshan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Tanzania&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Africa/Dar_es_Salaam&quot;,&quot;cityList&quot;:[&quot;Dar es Salaam&quot;,&quot;Mwanza&quot;,&quot;Zanzibar&quot;,&quot;Arusha&quot;,&quot;Mbeya&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Thailand&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Bangkok&quot;,&quot;cityList&quot;:[&quot;Bangkok&quot;,&quot;Hanoi&quot;,&quot;Haiphong&quot;,&quot;Samut Prakan&quot;,&quot;Mueang Nonthaburi&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Timor Leste&quot;,&quot;utc&quot;:&quot;+9&quot;,&quot;timezone&quot;:&quot;Asia/Dili&quot;,&quot;cityList&quot;:[&quot;Dili&quot;,&quot;Maliana&quot;,&quot;Suai&quot;,&quot;Likisá&quot;,&quot;Aileu&quot;],&quot;currentTime&quot;:&quot;2023-01-05 21:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Togo&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/Lome&quot;,&quot;cityList&quot;:[&quot;Lomé&quot;,&quot;Sokodé&quot;,&quot;Kara&quot;,&quot;Atakpamé&quot;,&quot;Kpalimé&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Tokelau&quot;,&quot;utc&quot;:&quot;+13&quot;,&quot;timezone&quot;:&quot;Pacific/Fakaofo&quot;,&quot;cityList&quot;:[&quot;Atafu Village&quot;,&quot;Nukunonu&quot;,&quot;Fale old settlement&quot;],&quot;currentTime&quot;:&quot;2023-01-06 01:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Tonga&quot;,&quot;utc&quot;:&quot;+13&quot;,&quot;timezone&quot;:&quot;Pacific/Tongatapu&quot;,&quot;cityList&quot;:[&quot;Nuku‘alofa&quot;,&quot;Lapaha&quot;,&quot;Neiafu&quot;,&quot;Pangai&quot;,&quot;‘Ohonua&quot;],&quot;currentTime&quot;:&quot;2023-01-06 01:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Trinidad and Tobago&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Port_of_Spain&quot;,&quot;cityList&quot;:[&quot;Chaguanas&quot;,&quot;Mon Repos&quot;,&quot;San Fernando&quot;,&quot;Port of Spain&quot;,&quot;Rio Claro&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Tunisia&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Africa/Tunis&quot;,&quot;cityList&quot;:[&quot;Tunis&quot;,&quot;Sfax&quot;,&quot;Sousse&quot;,&quot;Kairouan&quot;,&quot;Bizerte&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Turkey&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Europe/Istanbul&quot;,&quot;cityList&quot;:[&quot;Istanbul&quot;,&quot;Ankara&quot;,&quot;İzmir&quot;,&quot;Bursa&quot;,&quot;Adana&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Turkmenistan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Ashgabat&quot;,&quot;cityList&quot;:[&quot;Ashgabat&quot;,&quot;Türkmenabat&quot;,&quot;Daşoguz&quot;,&quot;Mary&quot;,&quot;Balkanabat&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Turks and Caicos Islands&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Grand_Turk&quot;,&quot;cityList&quot;:[&quot;Cockburn Town&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Tuvalu&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Funafuti&quot;,&quot;cityList&quot;:[&quot;Funafuti&quot;,&quot;Savave Village&quot;,&quot;Tanrake Village&quot;,&quot;Toga Village&quot;,&quot;Asau Village&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;U.S. Virgin Islands&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/St_Thomas&quot;,&quot;cityList&quot;:[&quot;Saint Croix&quot;,&quot;Charlotte Amalie&quot;,&quot;Cruz Bay&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Uganda&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Africa/Kampala&quot;,&quot;cityList&quot;:[&quot;Kampala&quot;,&quot;Gulu&quot;,&quot;Lira&quot;,&quot;Mbarara&quot;,&quot;Jinja&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ukraine&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Kiev&quot;,&quot;cityList&quot;:[&quot;Kyiv&quot;,&quot;Kharkiv&quot;,&quot;Donetsk&quot;,&quot;Odessa&quot;,&quot;Dnipro&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ukraine&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Uzhgorod&quot;,&quot;cityList&quot;:[&quot;Uzhgorod&quot;,&quot;Mukachevo&quot;,&quot;Khust&quot;,&quot;Berehove&quot;,&quot;Tyachiv&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Ukraine&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Europe/Zaporozhye&quot;,&quot;cityList&quot;:[&quot;Luhansk&quot;,&quot;Sevastopol&quot;,&quot;Sievierodonetsk&quot;,&quot;Alchevsk&quot;,&quot;Lysychansk&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United Arab Emirates&quot;,&quot;utc&quot;:&quot;+4&quot;,&quot;timezone&quot;:&quot;Asia/Dubai&quot;,&quot;cityList&quot;:[&quot;Dubai&quot;,&quot;Sharjah&quot;,&quot;Abu Dhabi&quot;,&quot;Ajman City&quot;,&quot;Ras Al Khaimah City&quot;],&quot;currentTime&quot;:&quot;2023-01-05 16:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United Kingdom&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Europe/London&quot;,&quot;cityList&quot;:[&quot;London&quot;,&quot;Birmingham&quot;,&quot;Liverpool&quot;,&quot;Sheffield&quot;,&quot;Bristol&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-10&quot;,&quot;timezone&quot;:&quot;America/Adak&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 02:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-10&quot;,&quot;timezone&quot;:&quot;Pacific/Honolulu&quot;,&quot;cityList&quot;:[&quot;Honolulu&quot;,&quot;East Honolulu&quot;,&quot;Pearl City&quot;,&quot;Hilo&quot;,&quot;Kailua&quot;],&quot;currentTime&quot;:&quot;2023-01-05 02:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-9&quot;,&quot;timezone&quot;:&quot;America/Anchorage&quot;,&quot;cityList&quot;:[&quot;Anchorage&quot;,&quot;Fairbanks&quot;,&quot;Eagle River&quot;,&quot;Badger&quot;,&quot;Knik-Fairview&quot;],&quot;currentTime&quot;:&quot;2023-01-05 03:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-9&quot;,&quot;timezone&quot;:&quot;America/Juneau&quot;,&quot;cityList&quot;:[&quot;Juneau&quot;],&quot;currentTime&quot;:&quot;2023-01-05 03:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-9&quot;,&quot;timezone&quot;:&quot;America/Metlakatla&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 03:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-9&quot;,&quot;timezone&quot;:&quot;America/Nome&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 03:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-9&quot;,&quot;timezone&quot;:&quot;America/Sitka&quot;,&quot;cityList&quot;:[&quot;Sitka&quot;,&quot;Ketchikan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 03:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-9&quot;,&quot;timezone&quot;:&quot;America/Yakutat&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 03:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-8&quot;,&quot;timezone&quot;:&quot;America/Los_Angeles&quot;,&quot;cityList&quot;:[&quot;Los Angeles&quot;,&quot;San Diego&quot;,&quot;San Jose&quot;,&quot;San Francisco&quot;,&quot;Seattle&quot;],&quot;currentTime&quot;:&quot;2023-01-05 04:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Boise&quot;,&quot;cityList&quot;:[&quot;Boise&quot;,&quot;Meridian&quot;,&quot;Nampa&quot;,&quot;Idaho Falls&quot;,&quot;Pocatello&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Denver&quot;,&quot;cityList&quot;:[&quot;Denver&quot;,&quot;El Paso&quot;,&quot;Albuquerque&quot;,&quot;Colorado Springs&quot;,&quot;Aurora&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-7&quot;,&quot;timezone&quot;:&quot;America/Phoenix&quot;,&quot;cityList&quot;:[&quot;Phoenix&quot;,&quot;Tucson&quot;,&quot;Mesa&quot;,&quot;Chandler&quot;,&quot;Gilbert&quot;],&quot;currentTime&quot;:&quot;2023-01-05 05:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Chicago&quot;,&quot;cityList&quot;:[&quot;Chicago&quot;,&quot;Houston&quot;,&quot;San Antonio&quot;,&quot;Dallas&quot;,&quot;Austin&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Indiana/Knox&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Indiana/Tell_City&quot;,&quot;cityList&quot;:[&quot;Tell City&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/Menominee&quot;,&quot;cityList&quot;:[&quot;Menominee&quot;,&quot;Iron Mountain&quot;,&quot;Kingsford&quot;,&quot;Ironwood&quot;,&quot;Iron River&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/North_Dakota/Beulah&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/North_Dakota/Center&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-6&quot;,&quot;timezone&quot;:&quot;America/North_Dakota/New_Salem&quot;,&quot;cityList&quot;:[&quot;Mandan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 06:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Detroit&quot;,&quot;cityList&quot;:[&quot;Detroit&quot;,&quot;Grand Rapids&quot;,&quot;Warren&quot;,&quot;Sterling Heights&quot;,&quot;Ann Arbor&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Indiana/Indianapolis&quot;,&quot;cityList&quot;:[&quot;Indianapolis&quot;,&quot;Fort Wayne&quot;,&quot;South Bend&quot;,&quot;Carmel&quot;,&quot;Bloomington&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Indiana/Marengo&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Indiana/Petersburg&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Indiana/Vevay&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Indiana/Vincennes&quot;,&quot;cityList&quot;:[&quot;Vincennes&quot;,&quot;Jasper&quot;,&quot;Washington&quot;,&quot;Huntingburg&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Indiana/Winamac&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Kentucky/Louisville&quot;,&quot;cityList&quot;:[&quot;Louisville&quot;,&quot;Jeffersonville&quot;,&quot;New Albany&quot;,&quot;Jeffersontown&quot;,&quot;Pleasure Ridge Park&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/Kentucky/Monticello&quot;,&quot;cityList&quot;:[&quot;Monticello&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States&quot;,&quot;utc&quot;:&quot;-5&quot;,&quot;timezone&quot;:&quot;America/New_York&quot;,&quot;cityList&quot;:[&quot;New York City&quot;,&quot;Brooklyn&quot;,&quot;Queens&quot;,&quot;Philadelphia&quot;,&quot;Manhattan&quot;],&quot;currentTime&quot;:&quot;2023-01-05 07:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States Minor Outlying Islands&quot;,&quot;utc&quot;:&quot;-11&quot;,&quot;timezone&quot;:&quot;Pacific/Midway&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-05 01:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;United States Minor Outlying Islands&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Wake&quot;,&quot;cityList&quot;:[],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Uruguay&quot;,&quot;utc&quot;:&quot;-3&quot;,&quot;timezone&quot;:&quot;America/Montevideo&quot;,&quot;cityList&quot;:[&quot;Montevideo&quot;,&quot;Salto&quot;,&quot;Paysandú&quot;,&quot;Las Piedras&quot;,&quot;Rivera&quot;],&quot;currentTime&quot;:&quot;2023-01-05 09:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Uzbekistan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Samarkand&quot;,&quot;cityList&quot;:[&quot;Samarkand&quot;,&quot;Bukhara&quot;,&quot;Nukus&quot;,&quot;Qarshi&quot;,&quot;Jizzax&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Uzbekistan&quot;,&quot;utc&quot;:&quot;+5&quot;,&quot;timezone&quot;:&quot;Asia/Tashkent&quot;,&quot;cityList&quot;:[&quot;Tashkent&quot;,&quot;Namangan&quot;,&quot;Andijon&quot;,&quot;Qo‘qon&quot;,&quot;Chirchiq&quot;],&quot;currentTime&quot;:&quot;2023-01-05 17:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Vanuatu&quot;,&quot;utc&quot;:&quot;+11&quot;,&quot;timezone&quot;:&quot;Pacific/Efate&quot;,&quot;cityList&quot;:[&quot;Port-Vila&quot;,&quot;Luganville&quot;,&quot;Isangel&quot;,&quot;Sola&quot;,&quot;Lakatoro&quot;],&quot;currentTime&quot;:&quot;2023-01-05 23:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Vatican&quot;,&quot;utc&quot;:&quot;+1&quot;,&quot;timezone&quot;:&quot;Europe/Vatican&quot;,&quot;cityList&quot;:[&quot;Vatican City&quot;],&quot;currentTime&quot;:&quot;2023-01-05 13:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Venezuela&quot;,&quot;utc&quot;:&quot;-4&quot;,&quot;timezone&quot;:&quot;America/Caracas&quot;,&quot;cityList&quot;:[&quot;Caracas&quot;,&quot;Maracaibo&quot;,&quot;Maracay&quot;,&quot;Valencia&quot;,&quot;Barquisimeto&quot;],&quot;currentTime&quot;:&quot;2023-01-05 08:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Vietnam&quot;,&quot;utc&quot;:&quot;+7&quot;,&quot;timezone&quot;:&quot;Asia/Ho_Chi_Minh&quot;,&quot;cityList&quot;:[&quot;Ho Chi Minh City&quot;,&quot;Da Nang&quot;,&quot;Biên Hòa&quot;,&quot;Nha Trang&quot;,&quot;Cần Thơ&quot;],&quot;currentTime&quot;:&quot;2023-01-05 19:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Wallis and Futuna&quot;,&quot;utc&quot;:&quot;+12&quot;,&quot;timezone&quot;:&quot;Pacific/Wallis&quot;,&quot;cityList&quot;:[&quot;Mata-Utu&quot;,&quot;Leava&quot;,&quot;Alo&quot;],&quot;currentTime&quot;:&quot;2023-01-06 00:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Western Sahara&quot;,&quot;utc&quot;:&quot;+0&quot;,&quot;timezone&quot;:&quot;Africa/El_Aaiun&quot;,&quot;cityList&quot;:[&quot;Laayoune&quot;,&quot;Dakhla&quot;,&quot;Laayoune Plage&quot;],&quot;currentTime&quot;:&quot;2023-01-05 12:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Yemen&quot;,&quot;utc&quot;:&quot;+3&quot;,&quot;timezone&quot;:&quot;Asia/Aden&quot;,&quot;cityList&quot;:[&quot;Sanaa&quot;,&quot;Al Ḩudaydah&quot;,&quot;Taiz&quot;,&quot;Aden&quot;,&quot;Mukalla&quot;],&quot;currentTime&quot;:&quot;2023-01-05 15:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Zambia&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Lusaka&quot;,&quot;cityList&quot;:[&quot;Lusaka&quot;,&quot;Kitwe&quot;,&quot;Ndola&quot;,&quot;Kabwe&quot;,&quot;Chingola&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;,&#123;&quot;country&quot;:&quot;Zimbabwe&quot;,&quot;utc&quot;:&quot;+2&quot;,&quot;timezone&quot;:&quot;Africa/Harare&quot;,&quot;cityList&quot;:[&quot;Harare&quot;,&quot;Bulawayo&quot;,&quot;Chitungwiza&quot;,&quot;Mutare&quot;,&quot;Gweru&quot;],&quot;currentTime&quot;:&quot;2023-01-05 14:47:08&quot;&#125;]</span><br><span class="line">---------------</span><br><span class="line">国家：247</span><br><span class="line">城市：1628</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure>

<h4 id="爬取国家代码"><a href="#爬取国家代码" class="headerlink" title="爬取国家代码"></a>爬取国家代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenkaixin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/1/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Country&gt; countryList = crawlerCode(<span class="string">&quot;https://en.wikipedia.org/wiki/ISO_3166-1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;基础数据：&quot;</span> + JSONUtil.toJsonStr(countryList));</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;国家：&quot;</span> + countryList.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Country&gt; <span class="title function_">crawlerCode</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(url)</span><br><span class="line">                .timeout(<span class="number">5000</span>)</span><br><span class="line">                .headers(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;() &#123;&#123;</span><br><span class="line">                    put(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>);</span><br><span class="line">                &#125;&#125;)</span><br><span class="line">                .proxy(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7890</span>) <span class="comment">// 设置代理</span></span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> document.select(<span class="string">&quot;table:has(caption) tbody tr:gt(0)&quot;</span>)</span><br><span class="line">                .stream()</span><br><span class="line">                .map(e -&gt; &#123;</span><br><span class="line">                    <span class="type">Country</span> <span class="variable">country</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Country</span>();</span><br><span class="line"></span><br><span class="line">                    country.setCn(e.select(<span class="string">&quot;td:eq(0) a[title]&quot;</span>).text());</span><br><span class="line">                    country.setCode(e.select(<span class="string">&quot;td:eq(1) span.monospaced&quot;</span>).text());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> country;</span><br><span class="line">                &#125;).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String cn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---------------</span><br><span class="line">基础数据：[&#123;&quot;code&quot;:&quot;AF&quot;,&quot;cn&quot;:&quot;Afghanistan&quot;&#125;,&#123;&quot;code&quot;:&quot;AX&quot;,&quot;cn&quot;:&quot;Åland Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;AL&quot;,&quot;cn&quot;:&quot;Albania&quot;&#125;,&#123;&quot;code&quot;:&quot;DZ&quot;,&quot;cn&quot;:&quot;Algeria&quot;&#125;,&#123;&quot;code&quot;:&quot;AS&quot;,&quot;cn&quot;:&quot;American Samoa&quot;&#125;,&#123;&quot;code&quot;:&quot;AD&quot;,&quot;cn&quot;:&quot;Andorra&quot;&#125;,&#123;&quot;code&quot;:&quot;AO&quot;,&quot;cn&quot;:&quot;Angola&quot;&#125;,&#123;&quot;code&quot;:&quot;AI&quot;,&quot;cn&quot;:&quot;Anguilla&quot;&#125;,&#123;&quot;code&quot;:&quot;AQ&quot;,&quot;cn&quot;:&quot;Antarctica&quot;&#125;,&#123;&quot;code&quot;:&quot;AG&quot;,&quot;cn&quot;:&quot;Antigua and Barbuda&quot;&#125;,&#123;&quot;code&quot;:&quot;AR&quot;,&quot;cn&quot;:&quot;Argentina&quot;&#125;,&#123;&quot;code&quot;:&quot;AM&quot;,&quot;cn&quot;:&quot;Armenia&quot;&#125;,&#123;&quot;code&quot;:&quot;AW&quot;,&quot;cn&quot;:&quot;Aruba&quot;&#125;,&#123;&quot;code&quot;:&quot;AU&quot;,&quot;cn&quot;:&quot;Australia&quot;&#125;,&#123;&quot;code&quot;:&quot;AT&quot;,&quot;cn&quot;:&quot;Austria&quot;&#125;,&#123;&quot;code&quot;:&quot;AZ&quot;,&quot;cn&quot;:&quot;Azerbaijan&quot;&#125;,&#123;&quot;code&quot;:&quot;BS&quot;,&quot;cn&quot;:&quot;Bahamas&quot;&#125;,&#123;&quot;code&quot;:&quot;BH&quot;,&quot;cn&quot;:&quot;Bahrain&quot;&#125;,&#123;&quot;code&quot;:&quot;BD&quot;,&quot;cn&quot;:&quot;Bangladesh&quot;&#125;,&#123;&quot;code&quot;:&quot;BB&quot;,&quot;cn&quot;:&quot;Barbados&quot;&#125;,&#123;&quot;code&quot;:&quot;BY&quot;,&quot;cn&quot;:&quot;Belarus&quot;&#125;,&#123;&quot;code&quot;:&quot;BE&quot;,&quot;cn&quot;:&quot;Belgium&quot;&#125;,&#123;&quot;code&quot;:&quot;BZ&quot;,&quot;cn&quot;:&quot;Belize&quot;&#125;,&#123;&quot;code&quot;:&quot;BJ&quot;,&quot;cn&quot;:&quot;Benin&quot;&#125;,&#123;&quot;code&quot;:&quot;BM&quot;,&quot;cn&quot;:&quot;Bermuda&quot;&#125;,&#123;&quot;code&quot;:&quot;BT&quot;,&quot;cn&quot;:&quot;Bhutan&quot;&#125;,&#123;&quot;code&quot;:&quot;BO&quot;,&quot;cn&quot;:&quot;Bolivia (Plurinational State of)&quot;&#125;,&#123;&quot;code&quot;:&quot;BQ&quot;,&quot;cn&quot;:&quot;Bonaire, Sint Eustatius and Saba&quot;&#125;,&#123;&quot;code&quot;:&quot;BA&quot;,&quot;cn&quot;:&quot;Bosnia and Herzegovina&quot;&#125;,&#123;&quot;code&quot;:&quot;BW&quot;,&quot;cn&quot;:&quot;Botswana&quot;&#125;,&#123;&quot;code&quot;:&quot;BV&quot;,&quot;cn&quot;:&quot;Bouvet Island&quot;&#125;,&#123;&quot;code&quot;:&quot;BR&quot;,&quot;cn&quot;:&quot;Brazil&quot;&#125;,&#123;&quot;code&quot;:&quot;IO&quot;,&quot;cn&quot;:&quot;British Indian Ocean Territory&quot;&#125;,&#123;&quot;code&quot;:&quot;BN&quot;,&quot;cn&quot;:&quot;Brunei Darussalam&quot;&#125;,&#123;&quot;code&quot;:&quot;BG&quot;,&quot;cn&quot;:&quot;Bulgaria&quot;&#125;,&#123;&quot;code&quot;:&quot;BF&quot;,&quot;cn&quot;:&quot;Burkina Faso&quot;&#125;,&#123;&quot;code&quot;:&quot;BI&quot;,&quot;cn&quot;:&quot;Burundi&quot;&#125;,&#123;&quot;code&quot;:&quot;CV&quot;,&quot;cn&quot;:&quot;Cabo Verde&quot;&#125;,&#123;&quot;code&quot;:&quot;KH&quot;,&quot;cn&quot;:&quot;Cambodia&quot;&#125;,&#123;&quot;code&quot;:&quot;CM&quot;,&quot;cn&quot;:&quot;Cameroon&quot;&#125;,&#123;&quot;code&quot;:&quot;CA&quot;,&quot;cn&quot;:&quot;Canada&quot;&#125;,&#123;&quot;code&quot;:&quot;KY&quot;,&quot;cn&quot;:&quot;Cayman Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;CF&quot;,&quot;cn&quot;:&quot;Central African Republic&quot;&#125;,&#123;&quot;code&quot;:&quot;TD&quot;,&quot;cn&quot;:&quot;Chad&quot;&#125;,&#123;&quot;code&quot;:&quot;CL&quot;,&quot;cn&quot;:&quot;Chile&quot;&#125;,&#123;&quot;code&quot;:&quot;CN&quot;,&quot;cn&quot;:&quot;China&quot;&#125;,&#123;&quot;code&quot;:&quot;CX&quot;,&quot;cn&quot;:&quot;Christmas Island&quot;&#125;,&#123;&quot;code&quot;:&quot;CC&quot;,&quot;cn&quot;:&quot;Cocos (Keeling) Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;CO&quot;,&quot;cn&quot;:&quot;Colombia&quot;&#125;,&#123;&quot;code&quot;:&quot;KM&quot;,&quot;cn&quot;:&quot;Comoros&quot;&#125;,&#123;&quot;code&quot;:&quot;CG&quot;,&quot;cn&quot;:&quot;Congo&quot;&#125;,&#123;&quot;code&quot;:&quot;CD&quot;,&quot;cn&quot;:&quot;Congo, Democratic Republic of the&quot;&#125;,&#123;&quot;code&quot;:&quot;CK&quot;,&quot;cn&quot;:&quot;Cook Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;CR&quot;,&quot;cn&quot;:&quot;Costa Rica&quot;&#125;,&#123;&quot;code&quot;:&quot;CI&quot;,&quot;cn&quot;:&quot;Côte d&#x27;Ivoire&quot;&#125;,&#123;&quot;code&quot;:&quot;HR&quot;,&quot;cn&quot;:&quot;Croatia&quot;&#125;,&#123;&quot;code&quot;:&quot;CU&quot;,&quot;cn&quot;:&quot;Cuba&quot;&#125;,&#123;&quot;code&quot;:&quot;CW&quot;,&quot;cn&quot;:&quot;Curaçao&quot;&#125;,&#123;&quot;code&quot;:&quot;CY&quot;,&quot;cn&quot;:&quot;Cyprus&quot;&#125;,&#123;&quot;code&quot;:&quot;CZ&quot;,&quot;cn&quot;:&quot;Czechia&quot;&#125;,&#123;&quot;code&quot;:&quot;DK&quot;,&quot;cn&quot;:&quot;Denmark&quot;&#125;,&#123;&quot;code&quot;:&quot;DJ&quot;,&quot;cn&quot;:&quot;Djibouti&quot;&#125;,&#123;&quot;code&quot;:&quot;DM&quot;,&quot;cn&quot;:&quot;Dominica&quot;&#125;,&#123;&quot;code&quot;:&quot;DO&quot;,&quot;cn&quot;:&quot;Dominican Republic&quot;&#125;,&#123;&quot;code&quot;:&quot;EC&quot;,&quot;cn&quot;:&quot;Ecuador&quot;&#125;,&#123;&quot;code&quot;:&quot;EG&quot;,&quot;cn&quot;:&quot;Egypt&quot;&#125;,&#123;&quot;code&quot;:&quot;SV&quot;,&quot;cn&quot;:&quot;El Salvador&quot;&#125;,&#123;&quot;code&quot;:&quot;GQ&quot;,&quot;cn&quot;:&quot;Equatorial Guinea&quot;&#125;,&#123;&quot;code&quot;:&quot;ER&quot;,&quot;cn&quot;:&quot;Eritrea&quot;&#125;,&#123;&quot;code&quot;:&quot;EE&quot;,&quot;cn&quot;:&quot;Estonia&quot;&#125;,&#123;&quot;code&quot;:&quot;SZ&quot;,&quot;cn&quot;:&quot;Eswatini&quot;&#125;,&#123;&quot;code&quot;:&quot;ET&quot;,&quot;cn&quot;:&quot;Ethiopia&quot;&#125;,&#123;&quot;code&quot;:&quot;FK&quot;,&quot;cn&quot;:&quot;Falkland Islands (Malvinas)&quot;&#125;,&#123;&quot;code&quot;:&quot;FO&quot;,&quot;cn&quot;:&quot;Faroe Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;FJ&quot;,&quot;cn&quot;:&quot;Fiji&quot;&#125;,&#123;&quot;code&quot;:&quot;FI&quot;,&quot;cn&quot;:&quot;Finland&quot;&#125;,&#123;&quot;code&quot;:&quot;FR&quot;,&quot;cn&quot;:&quot;France&quot;&#125;,&#123;&quot;code&quot;:&quot;GF&quot;,&quot;cn&quot;:&quot;French Guiana&quot;&#125;,&#123;&quot;code&quot;:&quot;PF&quot;,&quot;cn&quot;:&quot;French Polynesia&quot;&#125;,&#123;&quot;code&quot;:&quot;TF&quot;,&quot;cn&quot;:&quot;French Southern Territories&quot;&#125;,&#123;&quot;code&quot;:&quot;GA&quot;,&quot;cn&quot;:&quot;Gabon&quot;&#125;,&#123;&quot;code&quot;:&quot;GM&quot;,&quot;cn&quot;:&quot;Gambia&quot;&#125;,&#123;&quot;code&quot;:&quot;GE&quot;,&quot;cn&quot;:&quot;Georgia&quot;&#125;,&#123;&quot;code&quot;:&quot;DE&quot;,&quot;cn&quot;:&quot;Germany&quot;&#125;,&#123;&quot;code&quot;:&quot;GH&quot;,&quot;cn&quot;:&quot;Ghana&quot;&#125;,&#123;&quot;code&quot;:&quot;GI&quot;,&quot;cn&quot;:&quot;Gibraltar&quot;&#125;,&#123;&quot;code&quot;:&quot;GR&quot;,&quot;cn&quot;:&quot;Greece&quot;&#125;,&#123;&quot;code&quot;:&quot;GL&quot;,&quot;cn&quot;:&quot;Greenland&quot;&#125;,&#123;&quot;code&quot;:&quot;GD&quot;,&quot;cn&quot;:&quot;Grenada&quot;&#125;,&#123;&quot;code&quot;:&quot;GP&quot;,&quot;cn&quot;:&quot;Guadeloupe&quot;&#125;,&#123;&quot;code&quot;:&quot;GU&quot;,&quot;cn&quot;:&quot;Guam&quot;&#125;,&#123;&quot;code&quot;:&quot;GT&quot;,&quot;cn&quot;:&quot;Guatemala&quot;&#125;,&#123;&quot;code&quot;:&quot;GG&quot;,&quot;cn&quot;:&quot;Guernsey&quot;&#125;,&#123;&quot;code&quot;:&quot;GN&quot;,&quot;cn&quot;:&quot;Guinea&quot;&#125;,&#123;&quot;code&quot;:&quot;GW&quot;,&quot;cn&quot;:&quot;Guinea-Bissau&quot;&#125;,&#123;&quot;code&quot;:&quot;GY&quot;,&quot;cn&quot;:&quot;Guyana&quot;&#125;,&#123;&quot;code&quot;:&quot;HT&quot;,&quot;cn&quot;:&quot;Haiti&quot;&#125;,&#123;&quot;code&quot;:&quot;HM&quot;,&quot;cn&quot;:&quot;Heard Island and McDonald Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;VA&quot;,&quot;cn&quot;:&quot;Holy See&quot;&#125;,&#123;&quot;code&quot;:&quot;HN&quot;,&quot;cn&quot;:&quot;Honduras&quot;&#125;,&#123;&quot;code&quot;:&quot;HK&quot;,&quot;cn&quot;:&quot;Hong Kong&quot;&#125;,&#123;&quot;code&quot;:&quot;HU&quot;,&quot;cn&quot;:&quot;Hungary&quot;&#125;,&#123;&quot;code&quot;:&quot;IS&quot;,&quot;cn&quot;:&quot;Iceland&quot;&#125;,&#123;&quot;code&quot;:&quot;IN&quot;,&quot;cn&quot;:&quot;India&quot;&#125;,&#123;&quot;code&quot;:&quot;ID&quot;,&quot;cn&quot;:&quot;Indonesia&quot;&#125;,&#123;&quot;code&quot;:&quot;IR&quot;,&quot;cn&quot;:&quot;Iran (Islamic Republic of)&quot;&#125;,&#123;&quot;code&quot;:&quot;IQ&quot;,&quot;cn&quot;:&quot;Iraq&quot;&#125;,&#123;&quot;code&quot;:&quot;IE&quot;,&quot;cn&quot;:&quot;Ireland&quot;&#125;,&#123;&quot;code&quot;:&quot;IM&quot;,&quot;cn&quot;:&quot;Isle of Man&quot;&#125;,&#123;&quot;code&quot;:&quot;IL&quot;,&quot;cn&quot;:&quot;Israel&quot;&#125;,&#123;&quot;code&quot;:&quot;IT&quot;,&quot;cn&quot;:&quot;Italy&quot;&#125;,&#123;&quot;code&quot;:&quot;JM&quot;,&quot;cn&quot;:&quot;Jamaica&quot;&#125;,&#123;&quot;code&quot;:&quot;JP&quot;,&quot;cn&quot;:&quot;Japan&quot;&#125;,&#123;&quot;code&quot;:&quot;JE&quot;,&quot;cn&quot;:&quot;Jersey&quot;&#125;,&#123;&quot;code&quot;:&quot;JO&quot;,&quot;cn&quot;:&quot;Jordan&quot;&#125;,&#123;&quot;code&quot;:&quot;KZ&quot;,&quot;cn&quot;:&quot;Kazakhstan&quot;&#125;,&#123;&quot;code&quot;:&quot;KE&quot;,&quot;cn&quot;:&quot;Kenya&quot;&#125;,&#123;&quot;code&quot;:&quot;KI&quot;,&quot;cn&quot;:&quot;Kiribati&quot;&#125;,&#123;&quot;code&quot;:&quot;KP&quot;,&quot;cn&quot;:&quot;Korea (Democratic People&#x27;s Republic of)&quot;&#125;,&#123;&quot;code&quot;:&quot;KR&quot;,&quot;cn&quot;:&quot;Korea, Republic of&quot;&#125;,&#123;&quot;code&quot;:&quot;KW&quot;,&quot;cn&quot;:&quot;Kuwait&quot;&#125;,&#123;&quot;code&quot;:&quot;KG&quot;,&quot;cn&quot;:&quot;Kyrgyzstan&quot;&#125;,&#123;&quot;code&quot;:&quot;LA&quot;,&quot;cn&quot;:&quot;Lao People&#x27;s Democratic Republic&quot;&#125;,&#123;&quot;code&quot;:&quot;LV&quot;,&quot;cn&quot;:&quot;Latvia&quot;&#125;,&#123;&quot;code&quot;:&quot;LB&quot;,&quot;cn&quot;:&quot;Lebanon&quot;&#125;,&#123;&quot;code&quot;:&quot;LS&quot;,&quot;cn&quot;:&quot;Lesotho&quot;&#125;,&#123;&quot;code&quot;:&quot;LR&quot;,&quot;cn&quot;:&quot;Liberia&quot;&#125;,&#123;&quot;code&quot;:&quot;LY&quot;,&quot;cn&quot;:&quot;Libya&quot;&#125;,&#123;&quot;code&quot;:&quot;LI&quot;,&quot;cn&quot;:&quot;Liechtenstein&quot;&#125;,&#123;&quot;code&quot;:&quot;LT&quot;,&quot;cn&quot;:&quot;Lithuania&quot;&#125;,&#123;&quot;code&quot;:&quot;LU&quot;,&quot;cn&quot;:&quot;Luxembourg&quot;&#125;,&#123;&quot;code&quot;:&quot;MO&quot;,&quot;cn&quot;:&quot;Macao&quot;&#125;,&#123;&quot;code&quot;:&quot;MG&quot;,&quot;cn&quot;:&quot;Madagascar&quot;&#125;,&#123;&quot;code&quot;:&quot;MW&quot;,&quot;cn&quot;:&quot;Malawi&quot;&#125;,&#123;&quot;code&quot;:&quot;MY&quot;,&quot;cn&quot;:&quot;Malaysia&quot;&#125;,&#123;&quot;code&quot;:&quot;MV&quot;,&quot;cn&quot;:&quot;Maldives&quot;&#125;,&#123;&quot;code&quot;:&quot;ML&quot;,&quot;cn&quot;:&quot;Mali&quot;&#125;,&#123;&quot;code&quot;:&quot;MT&quot;,&quot;cn&quot;:&quot;Malta&quot;&#125;,&#123;&quot;code&quot;:&quot;MH&quot;,&quot;cn&quot;:&quot;Marshall Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;MQ&quot;,&quot;cn&quot;:&quot;Martinique&quot;&#125;,&#123;&quot;code&quot;:&quot;MR&quot;,&quot;cn&quot;:&quot;Mauritania&quot;&#125;,&#123;&quot;code&quot;:&quot;MU&quot;,&quot;cn&quot;:&quot;Mauritius&quot;&#125;,&#123;&quot;code&quot;:&quot;YT&quot;,&quot;cn&quot;:&quot;Mayotte&quot;&#125;,&#123;&quot;code&quot;:&quot;MX&quot;,&quot;cn&quot;:&quot;Mexico&quot;&#125;,&#123;&quot;code&quot;:&quot;FM&quot;,&quot;cn&quot;:&quot;Micronesia (Federated States of)&quot;&#125;,&#123;&quot;code&quot;:&quot;MD&quot;,&quot;cn&quot;:&quot;Moldova, Republic of&quot;&#125;,&#123;&quot;code&quot;:&quot;MC&quot;,&quot;cn&quot;:&quot;Monaco&quot;&#125;,&#123;&quot;code&quot;:&quot;MN&quot;,&quot;cn&quot;:&quot;Mongolia&quot;&#125;,&#123;&quot;code&quot;:&quot;ME&quot;,&quot;cn&quot;:&quot;Montenegro&quot;&#125;,&#123;&quot;code&quot;:&quot;MS&quot;,&quot;cn&quot;:&quot;Montserrat&quot;&#125;,&#123;&quot;code&quot;:&quot;MA&quot;,&quot;cn&quot;:&quot;Morocco&quot;&#125;,&#123;&quot;code&quot;:&quot;MZ&quot;,&quot;cn&quot;:&quot;Mozambique&quot;&#125;,&#123;&quot;code&quot;:&quot;MM&quot;,&quot;cn&quot;:&quot;Myanmar&quot;&#125;,&#123;&quot;code&quot;:&quot;NA&quot;,&quot;cn&quot;:&quot;Namibia&quot;&#125;,&#123;&quot;code&quot;:&quot;NR&quot;,&quot;cn&quot;:&quot;Nauru&quot;&#125;,&#123;&quot;code&quot;:&quot;NP&quot;,&quot;cn&quot;:&quot;Nepal&quot;&#125;,&#123;&quot;code&quot;:&quot;NL&quot;,&quot;cn&quot;:&quot;Netherlands&quot;&#125;,&#123;&quot;code&quot;:&quot;NC&quot;,&quot;cn&quot;:&quot;New Caledonia&quot;&#125;,&#123;&quot;code&quot;:&quot;NZ&quot;,&quot;cn&quot;:&quot;New Zealand&quot;&#125;,&#123;&quot;code&quot;:&quot;NI&quot;,&quot;cn&quot;:&quot;Nicaragua&quot;&#125;,&#123;&quot;code&quot;:&quot;NE&quot;,&quot;cn&quot;:&quot;Niger&quot;&#125;,&#123;&quot;code&quot;:&quot;NG&quot;,&quot;cn&quot;:&quot;Nigeria&quot;&#125;,&#123;&quot;code&quot;:&quot;NU&quot;,&quot;cn&quot;:&quot;Niue&quot;&#125;,&#123;&quot;code&quot;:&quot;NF&quot;,&quot;cn&quot;:&quot;Norfolk Island&quot;&#125;,&#123;&quot;code&quot;:&quot;MK&quot;,&quot;cn&quot;:&quot;North Macedonia&quot;&#125;,&#123;&quot;code&quot;:&quot;MP&quot;,&quot;cn&quot;:&quot;Northern Mariana Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;NO&quot;,&quot;cn&quot;:&quot;Norway&quot;&#125;,&#123;&quot;code&quot;:&quot;OM&quot;,&quot;cn&quot;:&quot;Oman&quot;&#125;,&#123;&quot;code&quot;:&quot;PK&quot;,&quot;cn&quot;:&quot;Pakistan&quot;&#125;,&#123;&quot;code&quot;:&quot;PW&quot;,&quot;cn&quot;:&quot;Palau&quot;&#125;,&#123;&quot;code&quot;:&quot;PS&quot;,&quot;cn&quot;:&quot;Palestine, State of&quot;&#125;,&#123;&quot;code&quot;:&quot;PA&quot;,&quot;cn&quot;:&quot;Panama&quot;&#125;,&#123;&quot;code&quot;:&quot;PG&quot;,&quot;cn&quot;:&quot;Papua New Guinea&quot;&#125;,&#123;&quot;code&quot;:&quot;PY&quot;,&quot;cn&quot;:&quot;Paraguay&quot;&#125;,&#123;&quot;code&quot;:&quot;PE&quot;,&quot;cn&quot;:&quot;Peru&quot;&#125;,&#123;&quot;code&quot;:&quot;PH&quot;,&quot;cn&quot;:&quot;Philippines&quot;&#125;,&#123;&quot;code&quot;:&quot;PN&quot;,&quot;cn&quot;:&quot;Pitcairn&quot;&#125;,&#123;&quot;code&quot;:&quot;PL&quot;,&quot;cn&quot;:&quot;Poland&quot;&#125;,&#123;&quot;code&quot;:&quot;PT&quot;,&quot;cn&quot;:&quot;Portugal&quot;&#125;,&#123;&quot;code&quot;:&quot;PR&quot;,&quot;cn&quot;:&quot;Puerto Rico&quot;&#125;,&#123;&quot;code&quot;:&quot;QA&quot;,&quot;cn&quot;:&quot;Qatar&quot;&#125;,&#123;&quot;code&quot;:&quot;RE&quot;,&quot;cn&quot;:&quot;Réunion&quot;&#125;,&#123;&quot;code&quot;:&quot;RO&quot;,&quot;cn&quot;:&quot;Romania&quot;&#125;,&#123;&quot;code&quot;:&quot;RU&quot;,&quot;cn&quot;:&quot;Russian Federation&quot;&#125;,&#123;&quot;code&quot;:&quot;RW&quot;,&quot;cn&quot;:&quot;Rwanda&quot;&#125;,&#123;&quot;code&quot;:&quot;BL&quot;,&quot;cn&quot;:&quot;Saint Barthélemy&quot;&#125;,&#123;&quot;code&quot;:&quot;SH&quot;,&quot;cn&quot;:&quot;Saint Helena, Ascension and Tristan da Cunha&quot;&#125;,&#123;&quot;code&quot;:&quot;KN&quot;,&quot;cn&quot;:&quot;Saint Kitts and Nevis&quot;&#125;,&#123;&quot;code&quot;:&quot;LC&quot;,&quot;cn&quot;:&quot;Saint Lucia&quot;&#125;,&#123;&quot;code&quot;:&quot;MF&quot;,&quot;cn&quot;:&quot;Saint Martin (French part)&quot;&#125;,&#123;&quot;code&quot;:&quot;PM&quot;,&quot;cn&quot;:&quot;Saint Pierre and Miquelon&quot;&#125;,&#123;&quot;code&quot;:&quot;VC&quot;,&quot;cn&quot;:&quot;Saint Vincent and the Grenadines&quot;&#125;,&#123;&quot;code&quot;:&quot;WS&quot;,&quot;cn&quot;:&quot;Samoa&quot;&#125;,&#123;&quot;code&quot;:&quot;SM&quot;,&quot;cn&quot;:&quot;San Marino&quot;&#125;,&#123;&quot;code&quot;:&quot;ST&quot;,&quot;cn&quot;:&quot;Sao Tome and Principe&quot;&#125;,&#123;&quot;code&quot;:&quot;SA&quot;,&quot;cn&quot;:&quot;Saudi Arabia&quot;&#125;,&#123;&quot;code&quot;:&quot;SN&quot;,&quot;cn&quot;:&quot;Senegal&quot;&#125;,&#123;&quot;code&quot;:&quot;RS&quot;,&quot;cn&quot;:&quot;Serbia&quot;&#125;,&#123;&quot;code&quot;:&quot;SC&quot;,&quot;cn&quot;:&quot;Seychelles&quot;&#125;,&#123;&quot;code&quot;:&quot;SL&quot;,&quot;cn&quot;:&quot;Sierra Leone&quot;&#125;,&#123;&quot;code&quot;:&quot;SG&quot;,&quot;cn&quot;:&quot;Singapore&quot;&#125;,&#123;&quot;code&quot;:&quot;SX&quot;,&quot;cn&quot;:&quot;Sint Maarten (Dutch part)&quot;&#125;,&#123;&quot;code&quot;:&quot;SK&quot;,&quot;cn&quot;:&quot;Slovakia&quot;&#125;,&#123;&quot;code&quot;:&quot;SI&quot;,&quot;cn&quot;:&quot;Slovenia&quot;&#125;,&#123;&quot;code&quot;:&quot;SB&quot;,&quot;cn&quot;:&quot;Solomon Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;SO&quot;,&quot;cn&quot;:&quot;Somalia&quot;&#125;,&#123;&quot;code&quot;:&quot;ZA&quot;,&quot;cn&quot;:&quot;South Africa&quot;&#125;,&#123;&quot;code&quot;:&quot;GS&quot;,&quot;cn&quot;:&quot;South Georgia and the South Sandwich Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;SS&quot;,&quot;cn&quot;:&quot;South Sudan&quot;&#125;,&#123;&quot;code&quot;:&quot;ES&quot;,&quot;cn&quot;:&quot;Spain&quot;&#125;,&#123;&quot;code&quot;:&quot;LK&quot;,&quot;cn&quot;:&quot;Sri Lanka&quot;&#125;,&#123;&quot;code&quot;:&quot;SD&quot;,&quot;cn&quot;:&quot;Sudan&quot;&#125;,&#123;&quot;code&quot;:&quot;SR&quot;,&quot;cn&quot;:&quot;Suriname&quot;&#125;,&#123;&quot;code&quot;:&quot;SJ&quot;,&quot;cn&quot;:&quot;Svalbard and Jan Mayen&quot;&#125;,&#123;&quot;code&quot;:&quot;SE&quot;,&quot;cn&quot;:&quot;Sweden&quot;&#125;,&#123;&quot;code&quot;:&quot;CH&quot;,&quot;cn&quot;:&quot;Switzerland&quot;&#125;,&#123;&quot;code&quot;:&quot;SY&quot;,&quot;cn&quot;:&quot;Syrian Arab Republic&quot;&#125;,&#123;&quot;code&quot;:&quot;TW&quot;,&quot;cn&quot;:&quot;Taiwan, Province of China&quot;&#125;,&#123;&quot;code&quot;:&quot;TJ&quot;,&quot;cn&quot;:&quot;Tajikistan&quot;&#125;,&#123;&quot;code&quot;:&quot;TZ&quot;,&quot;cn&quot;:&quot;Tanzania, United Republic of&quot;&#125;,&#123;&quot;code&quot;:&quot;TH&quot;,&quot;cn&quot;:&quot;Thailand&quot;&#125;,&#123;&quot;code&quot;:&quot;TL&quot;,&quot;cn&quot;:&quot;Timor-Leste&quot;&#125;,&#123;&quot;code&quot;:&quot;TG&quot;,&quot;cn&quot;:&quot;Togo&quot;&#125;,&#123;&quot;code&quot;:&quot;TK&quot;,&quot;cn&quot;:&quot;Tokelau&quot;&#125;,&#123;&quot;code&quot;:&quot;TO&quot;,&quot;cn&quot;:&quot;Tonga&quot;&#125;,&#123;&quot;code&quot;:&quot;TT&quot;,&quot;cn&quot;:&quot;Trinidad and Tobago&quot;&#125;,&#123;&quot;code&quot;:&quot;TN&quot;,&quot;cn&quot;:&quot;Tunisia&quot;&#125;,&#123;&quot;code&quot;:&quot;TR&quot;,&quot;cn&quot;:&quot;Türkiye&quot;&#125;,&#123;&quot;code&quot;:&quot;TM&quot;,&quot;cn&quot;:&quot;Turkmenistan&quot;&#125;,&#123;&quot;code&quot;:&quot;TC&quot;,&quot;cn&quot;:&quot;Turks and Caicos Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;TV&quot;,&quot;cn&quot;:&quot;Tuvalu&quot;&#125;,&#123;&quot;code&quot;:&quot;UG&quot;,&quot;cn&quot;:&quot;Uganda&quot;&#125;,&#123;&quot;code&quot;:&quot;UA&quot;,&quot;cn&quot;:&quot;Ukraine&quot;&#125;,&#123;&quot;code&quot;:&quot;AE&quot;,&quot;cn&quot;:&quot;United Arab Emirates&quot;&#125;,&#123;&quot;code&quot;:&quot;GB&quot;,&quot;cn&quot;:&quot;United Kingdom of Great Britain and Northern Ireland&quot;&#125;,&#123;&quot;code&quot;:&quot;US&quot;,&quot;cn&quot;:&quot;United States of America&quot;&#125;,&#123;&quot;code&quot;:&quot;UM&quot;,&quot;cn&quot;:&quot;United States Minor Outlying Islands&quot;&#125;,&#123;&quot;code&quot;:&quot;UY&quot;,&quot;cn&quot;:&quot;Uruguay&quot;&#125;,&#123;&quot;code&quot;:&quot;UZ&quot;,&quot;cn&quot;:&quot;Uzbekistan&quot;&#125;,&#123;&quot;code&quot;:&quot;VU&quot;,&quot;cn&quot;:&quot;Vanuatu&quot;&#125;,&#123;&quot;code&quot;:&quot;VE&quot;,&quot;cn&quot;:&quot;Venezuela (Bolivarian Republic of)&quot;&#125;,&#123;&quot;code&quot;:&quot;VN&quot;,&quot;cn&quot;:&quot;Viet Nam&quot;&#125;,&#123;&quot;code&quot;:&quot;VG&quot;,&quot;cn&quot;:&quot;Virgin Islands (British)&quot;&#125;,&#123;&quot;code&quot;:&quot;VI&quot;,&quot;cn&quot;:&quot;Virgin Islands (U.S.)&quot;&#125;,&#123;&quot;code&quot;:&quot;WF&quot;,&quot;cn&quot;:&quot;Wallis and Futuna&quot;&#125;,&#123;&quot;code&quot;:&quot;EH&quot;,&quot;cn&quot;:&quot;Western Sahara&quot;&#125;,&#123;&quot;code&quot;:&quot;YE&quot;,&quot;cn&quot;:&quot;Yemen&quot;&#125;,&#123;&quot;code&quot;:&quot;ZM&quot;,&quot;cn&quot;:&quot;Zambia&quot;&#125;,&#123;&quot;code&quot;:&quot;ZW&quot;,&quot;cn&quot;:&quot;Zimbabwe&quot;&#125;]</span><br><span class="line">---------------</span><br><span class="line">国家：249</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure>

<h4 id="全球城市信息"><a href="#全球城市信息" class="headerlink" title="全球城市信息"></a>全球城市信息</h4><p><a href="https://www.alipan.com/s/MPLBej2WuEM">点击此处下载，城市个数 209579</a></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>Jsoup</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2023/03/19/163022.html</url>
    <content><![CDATA[<blockquote>
<p>Hexo 博客搭建</p>
</blockquote>
<span id="more"></span>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 安装 hexo</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"># 初始化</span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"># 安装 next</span><br><span class="line">cd blog</span><br><span class="line">npm install hexo-theme-next</span><br><span class="line">or</span><br><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 版本</span><br><span class="line">hexo v</span><br><span class="line"># 生成静态文件</span><br><span class="line">hexo g</span><br><span class="line"># 启动服务器</span><br><span class="line">hexo s</span><br><span class="line"># 部署网站</span><br><span class="line">hexo d</span><br><span class="line"># 清除缓存文件和已生成的静态文件</span><br><span class="line">hexo clean</span><br><span class="line"># 创建文章</span><br><span class="line">hexo new filename</span><br><span class="line"># 创建分类</span><br><span class="line"># type: categories</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<h4 id="配置-config-next-yml"><a href="#配置-config-next-yml" class="headerlink" title="配置 _config.next.yml"></a>配置 _config.next.yml</h4><p>更多配置：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">开心</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;盛年不重来，一日难再晨。&#x27;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">开心</span></span><br><span class="line"><span class="comment"># 语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment"># 博客地址</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.ckx.ink</span></span><br><span class="line"><span class="comment"># 永久链接</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:hour:minute:second.html</span></span><br><span class="line"><span class="comment"># 文件名</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:day/:title.md</span></span><br><span class="line"><span class="comment"># 选择主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"><span class="comment"># 一键部署</span></span><br><span class="line"><span class="comment"># npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="comment"># hexo clean &amp;&amp; hexo d</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/chenkaixin12121/chenkaixin12121.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line"><span class="comment"># 友链</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">James Blog:</span> <span class="string">https://dev-james.xyz</span></span><br><span class="line">  <span class="attr">Abalone:</span> <span class="string">https://abalone.life</span></span><br><span class="line">  <span class="string">木子李:</span> <span class="string">https://blog.levnli.cn</span></span><br><span class="line">  <span class="string">柒月是ni的谎言:</span> <span class="string">https://huangdf.xyz/</span></span><br><span class="line">  <span class="attr">Kiritoghy:</span> <span class="string">https://www.kiritoghy.cn/</span></span><br><span class="line"><span class="comment"># 社交链接</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/chenkaixin12121</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:chenkaixin12121@163.com</span></span><br><span class="line"><span class="comment"># 关注我</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/chenkaixin12121</span></span><br><span class="line"><span class="comment"># 主题设定</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"><span class="comment"># 头像</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/upload/2020/04/微信图片_20200424230314-953bf9e05fa94cf5bedc5acf2e25b8c5.jpg</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 博客图标</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/upload/2020/04/微信图片_20200424230314-95-32x32.jpg</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/upload/2020/04/微信图片_20200424230314-95-32x32.jpg</span></span><br><span class="line"><span class="comment"># 页脚</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># 站点建立时间</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2020</span></span><br><span class="line">  <span class="comment"># 备案</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">icp:</span> <span class="string">豫ICP备20013274号-1</span></span><br><span class="line"><span class="comment"># 来必力评论</span></span><br><span class="line"><span class="comment"># comments: false 指定页面不显示评论 </span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">abc</span></span><br><span class="line"><span class="comment"># 搜索</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 字数统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br><span class="line"><span class="comment"># 不蒜子</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br><span class="line"><span class="comment"># 阅读进度</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 加载进度</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">blue</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br><span class="line"><span class="comment"># 版权声明</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">small</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 返回顶部</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 书签</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br><span class="line"><span class="comment"># 懒加载</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 图片操作，放大，快速浏览</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 中英文添加空格</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 代码块</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">stackoverflow-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">default</span></span><br><span class="line"><span class="comment"># 本地 CDN</span></span><br><span class="line"><span class="comment"># npm install @next-theme/plugins</span></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">plugins:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><ol>
<li>source 目录下创建 CNAME 文件，添加内容 blog.ck.ink</li>
<li>Github 配置<br><img data-src="/../../../../upload/2023/03/Snipaste_2023-03-20_21-51-53.png" alt="image.png"></li>
<li>域名解析 配置<br><img data-src="/../../../../upload/2023/03/Snipaste_2023-03-20_22-02-07.png" alt="image.png"></li>
<li>配置完成之后，访问 <a href="https://blog.ckx.ink/">https://blog.ckx.ink</a></li>
</ol>
<h4 id="腾讯云-CDN-加速"><a href="#腾讯云-CDN-加速" class="headerlink" title="腾讯云 CDN 加速"></a>腾讯云 CDN 加速</h4><ol>
<li>基础配置（回源地址 ping yourname.github.io）<br><img data-src="/../../../../upload/2023/03/Snipaste_2023-03-20_22-13-44.png" alt="image.png"><br><img data-src="/../../../../upload/2023/03/Snipaste_2023-03-20_22-15-03.png" alt="image.png"></li>
<li>HTTPS 配置<br><img data-src="/../../../../upload/2023/03/Snipaste_2023-03-20_22-16-55.png" alt="image.png"></li>
<li>修改 blog 域名解析为 CDN 的 CNAME<br><img data-src="/../../../../upload/2023/03/Snipaste_2023-03-20_22-22-15.png" alt="image.png"></li>
<li>配置完成之后，访问 <a href="https://blog.ckx.ink/">https://blog.ckx.ink</a></li>
</ol>
]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ChatGPT网页服务搭建</title>
    <url>/2023/04/17/145450.html</url>
    <content><![CDATA[<blockquote>
<p>使用 ChatGPT Next Web 搭建自己的 ChatGPT 网页服务</p>
</blockquote>
<span id="more"></span>

<h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><ol>
<li>准备一个国外的手机号，<a href="https://sms-activate.org/cn/getNumber">https://sms-activate.org/cn/getNumber</a></li>
<li>清除浏览器 cookie，VPN 使用国外节点（非香港台湾）</li>
<li>访问 <a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a> 进行注册</li>
</ol>
<h4 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h4><ol>
<li><p>获取 OpenAI API Key：<a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a><br><img data-src="/../../../../upload/2023/04/Snipaste_2023-04-17_14-39-21.png" alt="image.png"></p>
</li>
<li><p>在开源项目中 <a href="https://github.com/Yidadaa/ChatGPT-Next-Web">https://github.com/Yidadaa/ChatGPT-Next-Web</a> 的 README 中点击 Deploy</p>
</li>
<li><p>进入 vercel 页面后，使用 Github 账户登录并验证手机号</p>
</li>
<li><p>在 Configure Project 中，输入步骤 1 中的 API Key，在 CODE 框中输入密码。多个密码用”;”分隔<br><img data-src="/../../../../upload/2023/04/Snipaste_2023-04-17_14-41-14.png" alt="image.png"></p>
</li>
<li><p>查看效果<br><img data-src="/../../../../upload/2023/04/Snipaste_2023-04-17_15-01-24.png" alt="image.png"></p>
</li>
<li><p>进入配置页面修改为自己的域名<br><img data-src="/../../../../upload/2023/04/Snipaste_2023-04-17_14-51-38.png" alt="image.png"></p>
</li>
<li><p>配置 DNS 解析，设置 CNAME 为 cname.vercel-dns.com</p>
</li>
</ol>
]]></content>
      <categories>
        <category>安装配置</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS源阅读IPA文件重签名</title>
    <url>/2023/04/17/154155.html</url>
    <content><![CDATA[<blockquote>
<p>源阅读是阅读的 iOS 版，支持自定义书源</p>
</blockquote>
<span id="more"></span>

<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p><a href="https://pan.baidu.com/s/1ISK1tTpmgezfsYUdxKznCQ?pwd=a519">源阅读IPA文件</a></p>
<h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><ol>
<li><p>打开爱思助手，选择 IPA 文件，添加 Apple ID 签名<br><img data-src="/../../../../upload/2023/04/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230417153315.png" alt="image.png"><br><img data-src="/../../../../upload/2023/04/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230417153352.png" alt="image.png"><br><img data-src="/../../../../upload/2023/04/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230417153654.png" alt="image.png"></p>
</li>
<li><p>安装应用<br><img data-src="/../../../../upload/2023/04/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230417153810.png" alt="image.png"></p>
</li>
<li><p>如提示不受信息的开发者，打开设置-&gt;通用-&gt;VPN与设备管理-&gt;开发者APP，添加验证即可</p>
</li>
</ol>
<h4 id="导入书源"><a href="#导入书源" class="headerlink" title="导入书源"></a>导入书源</h4><ol>
<li><a href="https://pan.baidu.com/s/1R50RcbuTJfrcbMaFTZeuTQ?pwd=7ie4">下载书源</a></li>
<li>我的-&gt;书源管理-&gt;本地导入</li>
</ol>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
  </entry>
  <entry>
    <title>使用Filebeat实现日志采集</title>
    <url>/2023/06/07/175658.html</url>
    <content><![CDATA[<blockquote>
<p>使用 Filebeat 实现日志采集</p>
</blockquote>
<span id="more"></span>

<h4 id="logback-配置输出日志格式"><a href="#logback-配置输出日志格式" class="headerlink" title="logback 配置输出日志格式"></a>logback 配置输出日志格式</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; $&#123;spring:spring.application.name&#125; $&#123;spring:spring.profiles.active&#125; %-5level [%t] %C#%method:%L %msg%n</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2023-06-07 14:07:11.366 service-user dev INFO  [main] com.alibaba.cloud.nacos.refresh.NacosContextRefresher#registerNacosListener:129 [Nacos Config] Listening config: dataId=service-user.yaml, group=DEFAULT_GROUP</span><br><span class="line">2023-06-07 14:07:11.367 service-user dev INFO  [main] com.alibaba.cloud.nacos.refresh.NacosContextRefresher#registerNacosListener:129 [Nacos Config] Listening config: dataId=service-user-dev.yaml, group=DEFAULT_GROUP</span><br><span class="line">2023-06-07 14:09:59.182 ERROR [http-nio-9001-exec-2] org.apache.juli.logging.DirectJDKLog#log:175 Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">	at com.creek.user.api.controller.AuthController.token(AuthController.java:34) ~[classes/:?]</span><br><span class="line">	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]</span><br><span class="line">	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]</span><br><span class="line">	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:568) ~[?:?]</span><br><span class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-5.3.22.jar:5.3.22]</span><br><span class="line">	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150) ~[spring-web-5.3.22.jar:5.3.22]</span><br></pre></td></tr></table></figure>

<h4 id="kibana-添加采集管道"><a href="#kibana-添加采集管道" class="headerlink" title="kibana 添加采集管道"></a>kibana 添加采集管道</h4><blockquote>
<p>管理名称 filebeat_pipeline<br>处理器 grok<br>字段 message</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(?m)%&#123;TIMESTAMP_ISO8601:createTime&#125;%&#123;SPACE&#125;%&#123;NOTSPACE:serviceName&#125;%&#123;SPACE&#125;%&#123;NOTSPACE:profile&#125;%&#123;SPACE&#125;%&#123;LOGLEVEL:level&#125;%&#123;SPACE&#125;\[%&#123;DATA:threadName&#125;\]%&#123;SPACE&#125;%&#123;JAVACLASS:javaClass&#125;#(?&lt;methodName&gt;[^\s]+)%&#123;SPACE&#125;%&#123;GREEDYDATA:message&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../../../../upload/2023/06/Snipaste_2023-06-07_17-19-42.png" alt="image.png"></p>
<p>测试管道是否匹配</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-06-07 17:17:48.358 service-user dev INFO  [main] com.alibaba.cloud.nacos.registry.NacosServiceRegistry#register:75 nacos registry, DEFAULT_GROUP service-user 192.168.40.113:9001 register finished&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h4 id="Feilbeat-配置"><a href="#Feilbeat-配置" class="headerlink" title="Feilbeat 配置"></a>Feilbeat 配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">filestream</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">my-filestream-id</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">E:\logs\*\info.log</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">E:\logs\*\*\info.log</span></span><br><span class="line">  <span class="attr">parsers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">multiline:</span> <span class="comment"># 多行匹配</span></span><br><span class="line">        <span class="attr">pattern:</span> <span class="string">&#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span></span><br><span class="line">        <span class="attr">negate:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">match:</span> <span class="string">after</span></span><br><span class="line"></span><br><span class="line"><span class="attr">filebeat.config.modules:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span>  </span><br><span class="line">  <span class="attr">reload.enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">  <span class="attr">username:</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">  <span class="attr">pipeline:</span> <span class="string">&quot;filebeat_pipeline&quot;</span> <span class="comment"># 管道名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_host_metadata:</span></span><br><span class="line">      <span class="attr">when.not.contains.tags:</span> <span class="string">forwarded</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_cloud_metadata:</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_docker_metadata:</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_kubernetes_metadata:</span> <span class="string">~</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>生成日志文件后查询 kibana</p>
<p><img data-src="/../../../../upload/2023/06/Snipaste_2023-06-07_17-53-24.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>日志采集</tag>
        <tag>Filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习</title>
    <url>/2023/07/31/155224.html</url>
    <content><![CDATA[<blockquote>
<p>Python 学习</p>
</blockquote>
<span id="more"></span>

<h4 id="图片写入文字"><a href="#图片写入文字" class="headerlink" title="图片写入文字"></a>图片写入文字</h4><h5 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h5><blockquote>
<p>仅支持英文</p>
</blockquote>
<p>pip install opencv-python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载背景图片</span></span><br><span class="line">source_img = cv2.imread(<span class="string">&quot;C://Users//chenkaixin12121//Downloads//Snipaste_2023-07-28_16-43-20.png&quot;</span>)</span><br><span class="line"><span class="comment"># 在图片上添加文字信息</span></span><br><span class="line"><span class="comment"># 图片、文字、坐标、字体、大小、颜色、厚度</span></span><br><span class="line">cv2.putText(source_img, <span class="string">&quot;Hello World&quot;</span>, (<span class="number">100</span>, <span class="number">100</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.7</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;C://Users//chenkaixin12121//Downloads//save.png&quot;</span>, source_img)</span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line"><span class="comment"># cv2.imshow(&quot;add_text&quot;, source_img)</span></span><br><span class="line"><span class="comment"># cv2.waitKey()</span></span><br></pre></td></tr></table></figure>

<h5 id="PIL"><a href="#PIL" class="headerlink" title="PIL"></a>PIL</h5><blockquote>
<p>支持中英文</p>
</blockquote>
<p>pip install pillow</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont, ImageDraw, Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载背景图片</span></span><br><span class="line">source_img = cv2.imread(<span class="string">&quot;C://Users//chenkaixin12121//Downloads//Snipaste_2023-07-28_16-43-20.png&quot;</span>)</span><br><span class="line"><span class="comment"># 设置字体</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">&quot;font/simsun.ttc&quot;</span>, <span class="number">32</span>)</span><br><span class="line">img_pil = Image.fromarray(source_img)</span><br><span class="line">draw = ImageDraw.Draw(img_pil)</span><br><span class="line"><span class="comment"># 设置文字信息</span></span><br><span class="line">draw.text((<span class="number">100</span>, <span class="number">100</span>), <span class="string">&quot;Hello World&quot;</span>, font=font, fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">draw.text((<span class="number">100</span>, <span class="number">200</span>), <span class="string">&quot;你好&quot;</span>, font=font, fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">save_img = np.array(img_pil)</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;C://Users//chenkaixin12121//Downloads//save.png&quot;</span>, save_img)</span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line"><span class="comment"># cv2.imshow(&quot;add_text&quot;, save_img)</span></span><br><span class="line"><span class="comment"># cv2.waitKey()</span></span><br></pre></td></tr></table></figure>

<h4 id="生成随机优惠码"><a href="#生成随机优惠码" class="headerlink" title="生成随机优惠码"></a>生成随机优惠码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">random_sequence = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random</span>(<span class="params">len1=<span class="number">4</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(random.sample(random_sequence, len1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_code</span>(<span class="params">num, len1=<span class="number">5</span>, len2=<span class="number">4</span></span>):</span><br><span class="line">    result_code = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(result_code) &lt; num:</span><br><span class="line">        temp_str = <span class="string">&quot;—&quot;</span>.join([get_random(len2) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(len1)])</span><br><span class="line">        result_code.add(temp_str)</span><br><span class="line">    <span class="keyword">return</span> result_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">codes = get_code(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(codes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//coupon.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> codes:</span><br><span class="line">        file.write(<span class="built_in">str</span>(item) + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="将优惠码保存到-MySQL-中"><a href="#将优惠码保存到-MySQL-中" class="headerlink" title="将优惠码保存到 MySQL 中"></a>将优惠码保存到 MySQL 中</h4><p>pip install sqlalchemy<br>pip install pymysql</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line">database_info = &#123;</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ip&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;test_db&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coupon</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;coupon&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    code = Column(String(<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_connect</span>(<span class="params">db_info</span>):</span><br><span class="line">    engine = create_engine(<span class="string">&#x27;mysql+pymysql://&#123;user&#125;:&#123;passwd&#125;@&#123;ip&#125;:&#123;port&#125;/&#123;database&#125;&#x27;</span>.format_map(db_info))</span><br><span class="line">    db_session = sessionmaker(bind=engine)</span><br><span class="line">    session = db_session()</span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_to_database</span>():</span><br><span class="line">    session = make_connect(database_info)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//coupon.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():</span><br><span class="line">            session.add(Coupon(code=line))</span><br><span class="line">        session.commit()</span><br><span class="line">        session.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upload_to_database()</span><br></pre></td></tr></table></figure>

<h4 id="将优惠码保存到-Redis-中"><a href="#将优惠码保存到-Redis-中" class="headerlink" title="将优惠码保存到 Redis 中"></a>将优惠码保存到 Redis 中</h4><p>pip install redis</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_connect</span>():</span><br><span class="line">    r = redis.Redis(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_to_database</span>():</span><br><span class="line">    session = make_connect()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//coupon.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():</span><br><span class="line">            <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            session.sadd(<span class="string">&quot;set_key&quot;</span>, line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upload_to_database()</span><br></pre></td></tr></table></figure>

<h4 id="统计文件中单词的个数"><a href="#统计文件中单词的个数" class="headerlink" title="统计文件中单词的个数"></a>统计文件中单词的个数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">alphabet = &#123;letter: <span class="number">0</span> <span class="keyword">for</span> letter <span class="keyword">in</span> string.ascii_letters&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//coupon.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        words = <span class="built_in">list</span>(line)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> alphabet:</span><br><span class="line">                alphabet[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(alphabet)</span><br></pre></td></tr></table></figure>

<h4 id="修改图片尺寸"><a href="#修改图片尺寸" class="headerlink" title="修改图片尺寸"></a>修改图片尺寸</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_image</span>(<span class="params">filename, m_width=<span class="number">100</span>, m_height=<span class="number">100</span></span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(filename)</span><br><span class="line">    new_img = image.resize((m_width, m_height), Image.LANCZOS)</span><br><span class="line">    new_filename = os.path.dirname(filename) + <span class="string">&#x27;//new-&#x27;</span> + os.path.basename(filename)</span><br><span class="line">    <span class="built_in">print</span>(new_filename)</span><br><span class="line">    new_img.save(new_filename)</span><br><span class="line">    new_img.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ext = [<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>]</span><br><span class="line">file_dir = <span class="string">&#x27;C://Users//chenkaixin12121//Downloads&#x27;</span></span><br><span class="line">files = os.listdir(file_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> file.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">in</span> ext:</span><br><span class="line">        process_image(file_dir + <span class="string">&#x27;//&#x27;</span> + file, <span class="number">200</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<h4 id="统计单词出现的个数"><a href="#统计单词出现的个数" class="headerlink" title="统计单词出现的个数"></a>统计单词出现的个数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">words = [</span><br><span class="line">    <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;into&#x27;</span>, <span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;into&#x27;</span>, <span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;around&#x27;</span>, <span class="string">&#x27;the&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&quot;don&#x27;t&quot;</span>, <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;around&#x27;</span>, <span class="string">&#x27;the&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;into&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;eyes&#x27;</span>, <span class="string">&quot;you&#x27;re&quot;</span>, <span class="string">&#x27;under&#x27;</span></span><br><span class="line">]</span><br><span class="line">word_counts = Counter(words)</span><br><span class="line"></span><br><span class="line">top_three = word_counts.most_common(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(top_three)</span><br></pre></td></tr></table></figure>

<h4 id="统计文件中多少行代码"><a href="#统计文件中多少行代码" class="headerlink" title="统计文件中多少行代码"></a>统计文件中多少行代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">statistics_line</span>(<span class="params">filename</span>):</span><br><span class="line">    count = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;annotation&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;space&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">            <span class="keyword">if</span> line == <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                count[<span class="string">&#x27;space&#x27;</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> line.strip().startswith(<span class="string">&#x27;#&#x27;</span>):</span><br><span class="line">                count[<span class="string">&#x27;annotation&#x27;</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count[<span class="string">&#x27;code&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = statistics_line(<span class="string">&quot;C://Users//chenkaixin12121//Downloads//test.py&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h4 id="输出-html-文件的正文"><a href="#输出-html-文件的正文" class="headerlink" title="输出 html 文件的正文"></a>输出 html 文件的正文</h4><p>pip install lxml</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> BS</span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">soup = BS(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.get_text())</span><br></pre></td></tr></table></figure>

<h4 id="输出-html-文件的链接"><a href="#输出-html-文件的链接" class="headerlink" title="输出 html 文件的链接"></a>输出 html 文件的链接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> BS</span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">soup = BS(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(link.get(<span class="string">&#x27;href&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="生成验证码图片"><a href="#生成验证码图片" class="headerlink" title="生成验证码图片"></a>生成验证码图片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ImageFilter</span><br><span class="line"></span><br><span class="line">width = <span class="number">60</span> * <span class="number">4</span></span><br><span class="line">height = <span class="number">60</span></span><br><span class="line">image = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">font = ImageFont.truetype(<span class="string">&#x27;C://Windows//Fonts//Arial.ttf&#x27;</span>, <span class="number">36</span>)</span><br><span class="line">draw = ImageDraw.Draw(image)</span><br><span class="line"><span class="comment"># 填充像素</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        draw.point((x, y), fill=(random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>)))</span><br><span class="line"><span class="comment"># 输出文字</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    draw.text((<span class="number">60</span> * t + <span class="number">10</span>, <span class="number">10</span>), <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>)), font=font,</span><br><span class="line">              fill=(random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>)))</span><br><span class="line"><span class="comment"># 模糊</span></span><br><span class="line">image = image.<span class="built_in">filter</span>(ImageFilter.BLUR)</span><br><span class="line">image.save(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//code.jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="检测用户输入敏感词后输出指定内容"><a href="#检测用户输入敏感词后输出指定内容" class="headerlink" title="检测用户输入敏感词后输出指定内容"></a>检测用户输入敏感词后输出指定内容</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sensitive = [<span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;程序员&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;公务员&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;领导&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;牛比&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;牛逼&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;你娘&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;你妈&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;love&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;sex&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;jiangge&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&quot;请输入文字:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> word == <span class="string">&#x27;end&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> sensitive:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Freedom&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Human Rights&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="检测用户输入敏感词后替换"><a href="#检测用户输入敏感词后替换" class="headerlink" title="检测用户输入敏感词后替换"></a>检测用户输入敏感词后替换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sensitive = [<span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;程序员&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;公务员&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;领导&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;牛比&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;牛逼&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;你娘&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;你妈&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;love&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;sex&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;jiangge&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&quot;请输入文字:&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> word == <span class="string">&#x27;end&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> sensitive:</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> word:</span><br><span class="line">            word = word.replace(item, <span class="string">&#x27;*&#x27;</span> * (<span class="built_in">len</span>(item)))</span><br><span class="line">    <span class="built_in">print</span>(word)</span><br></pre></td></tr></table></figure>

<h4 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h4><p>pip install requests</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://pic.netbian.com/4kmeinv/index.html&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url_list = [<span class="string">&#x27;https://pic.netbian.com/4kmeinv/index.html&#x27;</span>] + \</span><br><span class="line">           [<span class="string">f&#x27;https://pic.netbian.com/4kmeinv/index_<span class="subst">&#123;i&#125;</span>.html&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">70</span>)]</span><br><span class="line"></span><br><span class="line">img_dir = <span class="string">&#x27;C://Users//chenkaixin12121//Downloads//图片//&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    response.encoding = <span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">    img_info = re.findall(<span class="string">&#x27;img src=&quot;(.*?)&quot; alt=&quot;(.*?)&quot; /&#x27;</span>, response.text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> src, name <span class="keyword">in</span> img_info:</span><br><span class="line">        img_url = <span class="string">&#x27;https://pic.netbian.com&#x27;</span> + src</span><br><span class="line">        img_content = requests.get(img_url, headers=headers).content</span><br><span class="line">        img_name = name + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(img_name)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(img_dir + img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在下载图片：<span class="subst">&#123;img_name&#125;</span>&quot;</span>)</span><br><span class="line">            file.write(img_content)</span><br></pre></td></tr></table></figure>

<h4 id="学生信息-文本写入到-excel"><a href="#学生信息-文本写入到-excel" class="headerlink" title="学生信息-文本写入到 excel"></a>学生信息-文本写入到 excel</h4><p>pip install xlwt</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;1&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="number">150</span><span class="punctuation">,</span><span class="number">120</span><span class="punctuation">,</span><span class="number">100</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;2&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;李四&quot;</span><span class="punctuation">,</span><span class="number">90</span><span class="punctuation">,</span><span class="number">99</span><span class="punctuation">,</span><span class="number">95</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;3&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;王五&quot;</span><span class="punctuation">,</span><span class="number">60</span><span class="punctuation">,</span><span class="number">66</span><span class="punctuation">,</span><span class="number">68</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试json.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_str = json.load(file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工作簿</span></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建 Sheet</span></span><br><span class="line">work_sheet = workbook.add_sheet(<span class="string">&#x27;student&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> row, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(json_str):</span><br><span class="line">    work_sheet.write(row, <span class="number">0</span>, key)</span><br><span class="line">    <span class="keyword">for</span> col, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(json_str[key]):</span><br><span class="line">        work_sheet.write(row, col + <span class="number">1</span>, value)</span><br><span class="line">workbook.save(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="城市信息-文本写入到-excel"><a href="#城市信息-文本写入到-excel" class="headerlink" title="城市信息-文本写入到 excel"></a>城市信息-文本写入到 excel</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;1&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;2&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;3&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;成都&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试json.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_str = json.load(file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工作簿</span></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建 Sheet</span></span><br><span class="line">work_sheet = workbook.add_sheet(<span class="string">&#x27;city&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> row, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(json_str):</span><br><span class="line">    work_sheet.write(row, <span class="number">0</span>, key)</span><br><span class="line">    work_sheet.write(row, <span class="number">1</span>, json_str[key])</span><br><span class="line">workbook.save(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="数字信息-文本写入到-excel"><a href="#数字信息-文本写入到-excel" class="headerlink" title="数字信息-文本写入到 excel"></a>数字信息-文本写入到 excel</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">json_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">	[1, 82, 65535], </span></span><br><span class="line"><span class="string">	[20, 90, 13],</span></span><br><span class="line"><span class="string">	[26, 809, 1024]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">json_list = json.loads(json_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工作簿</span></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建 Sheet</span></span><br><span class="line">work_sheet = workbook.add_sheet(<span class="string">&#x27;numbers&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(json_list)):</span><br><span class="line">    <span class="keyword">for</span> index2, item2 <span class="keyword">in</span> <span class="built_in">enumerate</span>(json_list[index]):</span><br><span class="line">        work_sheet.write(index, index2, item2)</span><br><span class="line">workbook.save(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="学生信息-xls-写入到-xml"><a href="#学生信息-xls-写入到-xml" class="headerlink" title="学生信息-xls 写入到 xml"></a>学生信息-xls 写入到 xml</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> Element, SubElement, Comment, ElementTree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xlsx&#x27;</span>)</span><br><span class="line">work_sheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(work_sheet.nrows):</span><br><span class="line">    row = work_sheet.row(i)</span><br><span class="line">    key = row[<span class="number">0</span>].value</span><br><span class="line">    data[key] = [item.value <span class="keyword">for</span> item <span class="keyword">in</span> row[<span class="number">1</span>:]]</span><br><span class="line"></span><br><span class="line">root = Element(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">comment = Comment(<span class="string">&#x27;学生信息表 &quot;id&quot; : [名字, 数学, 语文, 英文]&#x27;</span>)</span><br><span class="line">root.append(comment)</span><br><span class="line">child = SubElement(root, <span class="string">&#x27;students&#x27;</span>)</span><br><span class="line">child.text = <span class="built_in">str</span>(data)</span><br><span class="line">tree = ElementTree(root)</span><br><span class="line">tree.write(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xml&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="城市信息-xls-写入到-xml"><a href="#城市信息-xls-写入到-xml" class="headerlink" title="城市信息-xls 写入到 xml"></a>城市信息-xls 写入到 xml</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> Element, SubElement, Comment, ElementTree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xlsx&#x27;</span>)</span><br><span class="line">work_sheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(work_sheet.nrows):</span><br><span class="line">    data[work_sheet.cell_value(i, <span class="number">0</span>)] = work_sheet.cell_value(i, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">root = Element(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">comment = Comment(<span class="string">&#x27;城市信息&#x27;</span>)</span><br><span class="line">root.append(comment)</span><br><span class="line">child = SubElement(root, <span class="string">&#x27;citys&#x27;</span>)</span><br><span class="line">child.text = <span class="built_in">str</span>(data)</span><br><span class="line">tree = ElementTree(root)</span><br><span class="line">tree.write(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xml&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="数字信息-xls-写入到-xml"><a href="#数字信息-xls-写入到-xml" class="headerlink" title="数字信息-xls 写入到 xml"></a>数字信息-xls 写入到 xml</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> Element, SubElement, Comment, ElementTree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xlsx&#x27;</span>)</span><br><span class="line">work_sheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(work_sheet.nrows):</span><br><span class="line">    row = work_sheet.row(i)</span><br><span class="line">    data.append([item.value <span class="keyword">for</span> item <span class="keyword">in</span> row])</span><br><span class="line"></span><br><span class="line">root = Element(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">comment = Comment(<span class="string">&#x27;数字信息&#x27;</span>)</span><br><span class="line">root.append(comment)</span><br><span class="line">child = SubElement(root, <span class="string">&#x27;numbers&#x27;</span>)</span><br><span class="line">child.text = <span class="built_in">str</span>(data)</span><br><span class="line">tree = ElementTree(root)</span><br><span class="line">tree.write(<span class="string">&#x27;C://Users//chenkaixin12121//Downloads//测试.xml&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="xls-文件统计数据"><a href="#xls-文件统计数据" class="headerlink" title="xls 文件统计数据"></a>xls 文件统计数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collect_times</span>(<span class="params">xls_name</span>):</span><br><span class="line">    <span class="comment"># 读取第一个表格数据</span></span><br><span class="line">    xls = xlrd.open_workbook(xls_name)</span><br><span class="line">    sheet = xls.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    sum_time = <span class="number">0</span></span><br><span class="line">    caller_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去掉表头</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.nrows):</span><br><span class="line">        <span class="comment"># 读取通话时长与呼叫类型两列数据</span></span><br><span class="line">        call_time, call_type = sheet.row_values(n)[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">        <span class="comment"># 通过正则，得到时间，如9分23秒返回(9,23)</span></span><br><span class="line">        minute, second = re.<span class="keyword">match</span>(<span class="string">r&#x27;(\d*?)[分]?(\d+)秒&#x27;</span>, call_time).groups()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转化成秒</span></span><br><span class="line">        <span class="keyword">if</span> minute == <span class="string">&#x27;&#x27;</span>: minute = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        times = <span class="built_in">int</span>(minute) * <span class="number">60</span> + <span class="built_in">int</span>(second)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 统计主叫时间</span></span><br><span class="line">        <span class="keyword">if</span> call_type == <span class="string">&quot;主叫&quot;</span>:</span><br><span class="line">            caller_sum += times</span><br><span class="line">        sum_time += times</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印统计结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;本月主叫通话时间：%s分%s秒&quot;</span> % (<span class="built_in">divmod</span>(caller_sum, <span class="number">60</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;本月被叫通话时间：%s分%s秒&quot;</span> % (<span class="built_in">divmod</span>(sum_time - caller_sum, <span class="number">60</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;本月通话时间总计：%s分%s秒&quot;</span> % (<span class="built_in">divmod</span>(sum_time, <span class="number">60</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    collect_times(<span class="string">&#x27;2023年08月语音通信.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_encrypt</span>(<span class="params">value, salt=<span class="string">&#x27;sdfljoiwers23423&#x27;</span></span>):</span><br><span class="line">    <span class="comment"># new_md5 = md5(value.encode(&quot;utf-8&quot;))</span></span><br><span class="line">    new_md5 = md5()</span><br><span class="line">    new_md5.update((value + salt).encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> new_md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">password = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(md5_encrypt(password))</span><br></pre></td></tr></table></figure>

<h4 id="使用-web-框架开发留言簿"><a href="#使用-web-框架开发留言簿" class="headerlink" title="使用 web 框架开发留言簿"></a>使用 web 框架开发留言簿</h4><p>pip install fastapi<br>pip install uvicorn</p>
<p><code>uvicorn main:app --reload</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    create_time: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">response</span>(<span class="params">code, data</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: code, <span class="string">&#x27;data&#x27;</span>: data&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message_list = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/leave_message&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">leave_message</span>(<span class="params">message: Message</span>):</span><br><span class="line">    message.<span class="built_in">id</span> = <span class="built_in">len</span>(message_list) + <span class="number">1</span></span><br><span class="line">    message.create_time = datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    message_list.append(message)</span><br><span class="line">    <span class="keyword">return</span> response(<span class="number">200</span>, message.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/list&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_message_list</span>():</span><br><span class="line">    <span class="keyword">return</span> response(<span class="number">200</span>, message_list)</span><br></pre></td></tr></table></figure>

<h4 id="使用-web-框架开发-TodoList"><a href="#使用-web-框架开发-TodoList" class="headerlink" title="使用 web 框架开发 TodoList"></a>使用 web 框架开发 TodoList</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    create_time: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">response</span>(<span class="params">code, data</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>: code, <span class="string">&#x27;data&#x27;</span>: data&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task_dict = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/create&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_task</span>(<span class="params">task: Task</span>):</span><br><span class="line">    task.<span class="built_in">id</span> = <span class="built_in">max</span>(task_dict.values(), default=<span class="number">0</span>)</span><br><span class="line">    task.create_time = datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    task_dict[task.<span class="built_in">id</span>] = task</span><br><span class="line">    <span class="keyword">return</span> response(<span class="number">200</span>, task.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.delete(<span class="params"><span class="string">&quot;/&#123;task_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">remove_task</span>(<span class="params">task_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">del</span> task_dict[task_id]</span><br><span class="line">    <span class="keyword">return</span> response(code=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/list&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_task_list</span>():</span><br><span class="line">    <span class="keyword">return</span> response(<span class="number">200</span>, [item <span class="keyword">for</span> item <span class="keyword">in</span> task_dict.values()])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>GraalVM打包Native应用</title>
    <url>/2024/01/10/164707.html</url>
    <content><![CDATA[<blockquote>
<p>GraalVM 打包 Native 应用</p>
</blockquote>
<span id="more"></span>

<h4 id="安装-GraalVM"><a href="#安装-GraalVM" class="headerlink" title="安装 GraalVM"></a>安装 GraalVM</h4><ol>
<li><p>下载 <a href="https://www.graalvm.org/downloads/">GraalVM</a></p>
</li>
<li><p>添加环境变量</p>
</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=D://graalvm</span><br><span class="line">PATH=%JAVA_HOME%/bin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>校验是否安装成功</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">C:\Users\chenkaixin12121&gt;java -version</span><br><span class="line">openjdk version &quot;17.0.9&quot; 2023-10-17</span><br><span class="line">OpenJDK Runtime Environment GraalVM CE 17.0.9+9.1 (build 17.0.9+9-jvmci-23.0-b22)</span><br><span class="line">OpenJDK 64-Bit Server VM GraalVM CE 17.0.9+9.1 (build 17.0.9+9-jvmci-23.0-b22, mixed mode, sharing)</span><br><span class="line"></span><br><span class="line">C:\Users\chenkaixin12121&gt;gu list</span><br><span class="line">ComponentId              Version             Component name                Stability                     Origin</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">graalvm                  23.0.2              GraalVM Core                  Supported</span><br><span class="line">native-image             23.0.2              Native Image                  Early adopter</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>安装 <a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16">Visual Studio</a></li>
</ol>
<blockquote>
<p><a href="https://www.graalvm.org/latest/docs/getting-started/windows/#prerequisites-for-using-native-image-on-windows">https://www.graalvm.org/latest/docs/getting-started/windows/#prerequisites-for-using-native-image-on-windows</a></p>
</blockquote>
<p><img data-src="/../../../../upload/2024/01/Snipaste_2024-01-10_16-45-56.png" alt="image.png"></p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><img data-src="/../../../../upload/2024/01/Snipaste_2024-01-10_16-16-19.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2024/01/Snipaste_2024-01-10_16-16-49.png" alt="image.png"></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li><p>执行 gradle nativeCompile（exe 地址 .&#x2F;build&#x2F;nativeCompile）</p>
</li>
<li><p>启动项目后对比</p>
</li>
</ol>
<p><img data-src="/../../../../upload/2024/01/Snipaste_2024-01-10_17-10-47.png" alt="image.png"></p>
<p><img data-src="/../../../../upload/2024/01/Snipaste_2024-01-10_17-12-11.png" alt="image.png"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
